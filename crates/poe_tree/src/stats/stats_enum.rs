use std::ops::Add;
use std::ops::AddAssign;

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, PartialEq)]
pub enum StatType {
    map_pinnacle_boss_difficulty(Plus),
    attack_critical_strike_multiplier(Plus),
    all_skill_gem_level(Plus),
    maps_with_bosses_additional_strongbox(Plus),
    bow_critical_strike_multiplier(Plus),
    base_thorns_critical_strike_multiplier(Plus),
    all_skill_gem_quality(Plus),
    map_logbook_difficulty(Plus),
    spell_skill_gem_level(Plus),
    melee_range(Plus),
    base_spell_critical_strike_multiplier(Plus),
    minion_critical_strike_multiplier(Plus),
    critical_strike_multiplier_with_dagger(Plus),
    base_critical_strike_multiplier(Plus),
    quarterstaff_critical_strike_multiplier(Plus),
    map_breach_domain_difficulty(Plus),
    grenade_skill_cooldown_count(Plus),
    map_expedition_chest_marker_count(Plus),
    map_simulacrum_difficulty(Plus),
    one_handed_melee_critical_strike_multiplier(Plus),
    flail_critical_strike_multiplier(Plus),
    maps_with_bosses_additional_essence(Plus),
    critical_strike_multiplier_vs_enemies_on_full_life(Plus),
    crossbow_critical_strike_multiplier(Plus),
    maps_with_bosses_additional_shrine(Plus),
    gain__maximum_energy_shield_as_freeze_threshold(Plus),
    support_gem_limit(Plus),
    cold_skill_gem_level(Plus),
    ignites_apply_fire_resistance(Plus),
    map_bossing_difficulty(Plus),
    chaos_skill_gem_level(Plus),
    map_voodoo_king_difficulty(Plus),
    energy_shield_delay_when_not_on_full_life(MinusPercentage),
    base_self_critical_strike_multiplier(MinusPercentage),
    base_self_ignite_duration(MinusPercentage),
    energy_shield_delay(MinusPercentage),
    base_mana_cost(MinusPercentage),
    base_self_shock_duration(MinusPercentage),
    base_self_freeze_duration(MinusPercentage),
    energy_shield_delay_if_stunned_recently(MinusPercentage),
    evasion_rating_if_have_not_been_hit_recently(PlusPercentage),
    shock_effect(PlusPercentage),
    map_magic_chest_amount(PlusPercentage),
    base_curse_duration(PlusPercentage),
    damage_with_daggers_against_full_life_enemies(PlusPercentage),
    mana_regeneration_rate_while_moving(PlusPercentage),
    titan_maximum_life_final(PlusPercentage),
    charm_duration(PlusPercentage),
    bow_damage(PlusPercentage),
    sorcery_ward_strength(PlusPercentage),
    intelligence(PlusPercentage),
    chill_effect(PlusPercentage),
    critical_hit_ignite_effect(PlusPercentage),
    life_flask_charges_gained(PlusPercentage),
    attack_damage_vs_bleeding_enemies(PlusPercentage),
    base_projectile_speed(PlusPercentage),
    damage_per_different_warcry_used_recently(PlusPercentage),
    damage_vs_hindered_enemies(PlusPercentage),
    grenade_fuse_duration(PlusPercentage),
    map_boss_maximum_life(PlusPercentage),
    ailment_chance(PlusPercentage),
    physical_damage_reduction_rating(PlusPercentage),
    grenade_skill_damage(PlusPercentage),
    map_breach_monster_splinter_quantity(PlusPercentage),
    evasion_rating_if_consumed_frenzy_charge_recently(PlusPercentage),
    light_radius(PlusPercentage),
    damaging_ailments_deal_damage_faster(PlusPercentage),
    aura_effect(PlusPercentage),
    darkness_refresh_rate(PlusPercentage),
    minion_cooldown_recovery(PlusPercentage),
    crossbow_damage(PlusPercentage),
    projectile_hit_damage_stun_multiplier(PlusPercentage),
    block_chance_if_blocked_with_active_block_recently(PlusPercentage),
    mastery_chance_to_evade_melee_attacks_final(PlusPercentage),
    damage_per_1_block_chance(PlusPercentage),
    life_regeneration_rate_while_stationary(PlusPercentage),
    damage_while_unarmed(PlusPercentage),
    spell_area_of_effect(PlusPercentage),
    accuracy_rating_vs_enemies_in_close_range(PlusPercentage),
    damage_while_totem_active(PlusPercentage),
    block_chance(PlusPercentage),
    link_skill_duration(PlusPercentage),
    quarterstaff_attack_speed(PlusPercentage),
    hit_damage_vs_ignited_enemies(PlusPercentage),
    melee_critical_strike_chance_when_on_full_life(PlusPercentage),
    attack_speed_per_200_accuracy_rating(PlusPercentage),
    map_ritual_rewards_reroll_cost_final(PlusPercentage),
    global_defences(PlusPercentage),
    attack_speed_if_have_been_hit_recently(PlusPercentage),
    map_delirium_doodads_final(PlusPercentage),
    spell_damage_while_wielding_melee_weapon(PlusPercentage),
    area_of_effect_if_enemy_stunned_with_two_handed_melee_weapon_recently(PlusPercentage),
    cast_speed_for_4_seconds_on_attack(PlusPercentage),
    map_mod_effect_per_tower_affecting_area(PlusPercentage),
    attack_speed_if_rare_or_unique_enemy_nearby(PlusPercentage),
    armour_break_duration(PlusPercentage),
    flask_charges_used(PlusPercentage),
    distance_scaled_accuracy_rating_penalty(PlusPercentage),
    mana_regeneration_rate_if_enemy_shocked_recently(PlusPercentage),
    quarterstaff_accuracy_rating(PlusPercentage),
    guard_flask_effect(PlusPercentage),
    evasion_rating_if_you_have_hit_an_enemy_recently(PlusPercentage),
    base_bleed_duration(PlusPercentage),
    map_affliction_encounter_boss_chance(PlusPercentage),
    energy_shield_from_focus(PlusPercentage),
    shock_chance_vs_electrocuted_enemies(PlusPercentage),
    attack_damage_while_ally_in_presence(PlusPercentage),
    trap_damage(PlusPercentage),
    armour_break_amount_vs_enemies_affected_by_ailments(PlusPercentage),
    map_player_shrine_buff_effect_on_self(PlusPercentage),
    ignite_duration(PlusPercentage),
    charm_charges_gained(PlusPercentage),
    melee_damage_vs_immobilised_enemies(PlusPercentage),
    map_basic_currency_drop_chance_in_swamp_and_water_biome(PlusPercentage),
    ignite_shock_chill_duration(PlusPercentage),
    critical_strike_chance_vs_enemies_without_elemental_status_ailments(PlusPercentage),
    deadeye_movement_speed_penalty_final_while_performing_action(PlusPercentage),
    allies_in_presence_attack_speed(PlusPercentage),
    lightning_damage(PlusPercentage),
    armour_evasion_while_leeching(PlusPercentage),
    totem_life(PlusPercentage),
    movement_speed_while_dual_wielding(PlusPercentage),
    spell_damage(PlusPercentage),
    spell_area_damage(PlusPercentage),
    flask_life_to_recover(PlusPercentage),
    attack_damage_when_on_full_life(PlusPercentage),
    enemies_cursed_by_you_have_life_regeneration_rate(PlusPercentage),
    elemental_storm_cooldown_recovery_speed_final(PlusPercentage),
    hit_damage_electrocute_multiplier(PlusPercentage),
    maximum_fire_damage_resistance_per_40_uncapped_fire_damage_resistance(PlusPercentage),
    life_recovery_rate(PlusPercentage),
    damage_with_herald_skills(PlusPercentage),
    one_handed_melee_accuracy_rating(PlusPercentage),
    deadeye_projectile_damage_final_max_as_distance_travelled_decreases(PlusPercentage),
    cast_speed_for_cold_skills(PlusPercentage),
    area_damage(PlusPercentage),
    damage_for_4_seconds_on_crit(PlusPercentage),
    map_strongbox_mod_effect(PlusPercentage),
    armour_and_evasion_on_low_life(PlusPercentage),
    body_armour(PlusPercentage),
    cold_exposure_effect(PlusPercentage),
    electrocuted_enemy_damage_taken(PlusPercentage),
    damage_against_enemies_with_fully_broken_armour(PlusPercentage),
    map_socket_currency_drop_chance_in_grass_biome(PlusPercentage),
    minion_accuracy_rating(PlusPercentage),
    spear_attack_speed(PlusPercentage),
    map_breach_time_passed(PlusPercentage),
    spirit(PlusPercentage),
    critical_strike_chance_if_enemy_killed_recently(PlusPercentage),
    armour_if_you_havent_been_hit_recently(PlusPercentage),
    map_magic_pack_size(PlusPercentage),
    map_expedition_rare_monsters(PlusPercentage),
    cast_speed_when_on_low_life(PlusPercentage),
    knockback_distance(PlusPercentage),
    notable_knockback_distance_final_for_blocked_hits(PlusPercentage),
    attack_speed_per_15_dex(PlusPercentage),
    maximum_life(PlusPercentage),
    maximum_life_mana_and_energy_shield(PlusPercentage),
    chill_effectiveness_on_self(PlusPercentage),
    skill_area_of_effect_when_unarmed(PlusPercentage),
    expedition_monsters_logbook_chance(PlusPercentage),
    trap_throwing_speed(PlusPercentage),
    map_monster_tre(PlusPercentage),
    offering_life(PlusPercentage),
    energy_shield_if_consumed_power_charge_recently(PlusPercentage),
    charm_effect(PlusPercentage),
    map_dropped_maps_rarity(PlusPercentage),
    minion_damage_while_you_have_at_least_two_different_active_offerings(PlusPercentage),
    minion_resummon_speed(PlusPercentage),
    totem_duration(PlusPercentage),
    quarterstaff_daze_build_up(PlusPercentage),
    accuracy_rating_equal_to__attack_critical_strike_chance(PlusPercentage),
    recoup_speed(PlusPercentage),
    warcry_skill_area_of_effect(PlusPercentage),
    jagged_ground_effect(PlusPercentage),
    unarmed_attack_speed(PlusPercentage),
    mana_regeneration_rate_while_stationary(PlusPercentage),
    crossbow_critical_strike_chance(PlusPercentage),
    map_ritual_voodoo_king_key_chance(PlusPercentage),
    projectile_ailment_chance(PlusPercentage),
    maximum_mana(PlusPercentage),
    poison_effect_vs_non_poisoned_enemies(PlusPercentage),
    chronomancer_every_8_seconds_final_cast_speed_for_4_seconds(PlusPercentage),
    shock_duration(PlusPercentage),
    crossbow_damage_per_ammo_type_fired_in_past_10_seconds(PlusPercentage),
    movement_speed_if_pinned_enemy_recently(PlusPercentage),
    base_damaging_ailment_effect(PlusPercentage),
    map_ritual_monster_damage_for_each_time_revived(PlusPercentage),
    passive_tree_mace_damage_final_vs_heavy_stunned_enemies(PlusPercentage),
    physical_attack_damage(PlusPercentage),
    map_expedition_vendor_reroll_currency_quantity(PlusPercentage),
    support_anticipation_charge_gain_frequency(PlusPercentage),
    poison_duration_per_poison_applied_recently(PlusPercentage),
    damage_while_dual_wielding(PlusPercentage),
    attack_skills_damage_while_holding_shield(PlusPercentage),
    ignite_chance(PlusPercentage),
    energy_shield_recharge_rate(PlusPercentage),
    base_bleeding_effect(PlusPercentage),
    quarterstaff_damage(PlusPercentage),
    daze_build_up(PlusPercentage),
    attack_and_cast_speed_on_placing_totem(PlusPercentage),
    minion_evasion_rating(PlusPercentage),
    atlas_keystone_prefix_or_suffix_mod_effect_final(PlusPercentage),
    map_ritual_monster_spawning_speed(PlusPercentage),
    map_gold_drop_chance_in_mountain_biome(PlusPercentage),
    reload_speed(PlusPercentage),
    one_handed_attack_speed(PlusPercentage),
    elemental_damage(PlusPercentage),
    life_regeneration_rate_while_using_life_flask(PlusPercentage),
    critical_hit_damage_bonus_if_consumed_power_charge_recently(PlusPercentage),
    hit_damage_electrocute_multiplier_vs_shocked_enemies(PlusPercentage),
    attack_and_cast_speed_with_elemental_skills(PlusPercentage),
    ailment_effect(PlusPercentage),
    map_rare_chest_amount(PlusPercentage),
    critical_strike_chance_vs_enemies_with_lightning_exposure(PlusPercentage),
    map_ritual_magic_monsters(PlusPercentage),
    base_poison_duration(PlusPercentage),
    one_handed_melee_attack_speed(PlusPercentage),
    lightning_damage_while_affected_by_herald_of_thunder(PlusPercentage),
    tablet_effect_when_opening_a_map(PlusPercentage),
    flask_life_recovery_rate(PlusPercentage),
    warcry_speed(PlusPercentage),
    freeze_threshold(PlusPercentage),
    map_expedition_elite_marker_count(PlusPercentage),
    hit_damage_vs_chilled_enemies(PlusPercentage),
    map_affliction_reward_progress_on_kill(PlusPercentage),
    map_item_drop_quantity(PlusPercentage),
    deadeye_projectile_damage_final_max_as_distance_travelled_increases(PlusPercentage),
    elemental_damage_if_enemy_ignited_recently(PlusPercentage),
    spell_skill_projectile_speed(PlusPercentage),
    maximum_energy_shield_from_body_armour(PlusPercentage),
    map_boss_item_rarity(PlusPercentage),
    withered_effect(PlusPercentage),
    placing_traps_cooldown_recovery(PlusPercentage),
    curse_effect(PlusPercentage),
    triggered_spell_spell_damage(PlusPercentage),
    empowered_attack_damage(PlusPercentage),
    maximum_energy_shield(PlusPercentage),
    damage_while_using_charm(PlusPercentage),
    damage_vs_enemies_on_low_life(PlusPercentage),
    elemental_damage_if_enemy_chilled_recently(PlusPercentage),
    map_delirium_boss_life(PlusPercentage),
    armour_while_surrounded(PlusPercentage),
    curse_effect_on_self(PlusPercentage),
    damage_to_rare_and_unique_enemies(PlusPercentage),
    link_skill_buff_effect(PlusPercentage),
    stun_threshold_during_empowered_attacks(PlusPercentage),
    map_mod_effect_per_mod(PlusPercentage),
    damage_per_5_of_your_lowest_attribute(PlusPercentage),
    attack_area_of_effect(PlusPercentage),
    area_of_effect_if_have_stunned_an_enemy_recently(PlusPercentage),
    quarterstaff_critical_strike_chance(PlusPercentage),
    claw_accuracy_rating(PlusPercentage),
    cold_damage_while_affected_by_herald_of_ice(PlusPercentage),
    map_boss_damage(PlusPercentage),
    armour_if_have_been_hit_recently(PlusPercentage),
    evasion_rating_if_you_dodge_rolled_recently(PlusPercentage),
    fire_damage_while_affected_by_herald_of_ash(PlusPercentage),
    hinder_duration(PlusPercentage),
    base_poison_effect(PlusPercentage),
    mana_recovery_rate(PlusPercentage),
    staff_attack_area_of_effect(PlusPercentage),
    marked_enemy_accuracy_rating(PlusPercentage),
    melee_damage_vs_heavy_stunned_enemies(PlusPercentage),
    damage_if_you_have_consumed_a_corpse_recently(PlusPercentage),
    map_boss_dropped_item_quantity(PlusPercentage),
    projectile_damage_vs_enemies_within_2m_distance(PlusPercentage),
    critical_strike_chance_against_enemies_on_full_life(PlusPercentage),
    critical_strike_chance_vs_bleeding_enemies(PlusPercentage),
    base_movement_velocity(PlusPercentage),
    fire_damage(PlusPercentage),
    jagged_ground_enemy_damage_taken(PlusPercentage),
    base_ignite_effect(PlusPercentage),
    attack_and_cast_speed(PlusPercentage),
    spear_damage(PlusPercentage),
    minion_movement_speed(PlusPercentage),
    map_pack_size(PlusPercentage),
    totem_placement_range(PlusPercentage),
    final_repeat_of_spells_area_of_effect(PlusPercentage),
    map_expedition_relic_mod_effect(PlusPercentage),
    rage_decay_speed(PlusPercentage),
    heavy_stun_poise_decay_rate(PlusPercentage),
    base_skill_area_of_effect(PlusPercentage),
    quiver_mod_effect(PlusPercentage),
    map_expedition_fuse_burn_time(PlusPercentage),
    chill_and_freeze_duration(PlusPercentage),
    movement_speed_while_using_charm(PlusPercentage),
    stun_threshold_per_number_of_times_stunned_recently(PlusPercentage),
    totem_damage(PlusPercentage),
    charges_gained(PlusPercentage),
    life_regeneration_rate_while_on_low_life(PlusPercentage),
    base_cost(PlusPercentage),
    melee_hit_damage_stun_multiplier(PlusPercentage),
    freeze_duration(PlusPercentage),
    critical_strike_chance_while_dual_wielding(PlusPercentage),
    stormweaver_shock_duration_final(PlusPercentage),
    global_gem_attribute_requirements_final_from_gemling(PlusPercentage),
    map_expedition_artifact_quantity(PlusPercentage),
    mana_recovery_rate_while_affected_by_a_mana_flask(PlusPercentage),
    sword_attack_speed(PlusPercentage),
    map_ritual_defer_reward_tribute_cost(PlusPercentage),
    accuracy_rating_vs_rare_or_unique_enemy(PlusPercentage),
    spell_staff_damage(PlusPercentage),
    thorns_damage(PlusPercentage),
    damage_while_affected_by_a_herald(PlusPercentage),
    mark_effect(PlusPercentage),
    quarterstaff_hit_damage_stun_multiplier(PlusPercentage),
    flask_life_and_mana_to_recover(PlusPercentage),
    evasion_rating_when_on_full_life(PlusPercentage),
    attack_damage_when_on_low_life(PlusPercentage),
    ice_crystal_maximum_life(PlusPercentage),
    lightning_damage_per_10_intelligence(PlusPercentage),
    dagger_attack_speed(PlusPercentage),
    damaging_ailment_duration(PlusPercentage),
    two_handed_melee_accuracy_rating(PlusPercentage),
    armour_break_amount(PlusPercentage),
    elemental_damage_if_enemy_shocked_recently(PlusPercentage),
    claw_critical_strike_chance(PlusPercentage),
    armour_if_hit_enemy_with_melee_attack_recently(PlusPercentage),
    ascendancy_energy_generated_final(PlusPercentage),
    attack_speed_while_surrounded(PlusPercentage),
    non_damaging_ailment_effect(PlusPercentage),
    cast_speed_if_have_crit_recently(PlusPercentage),
    one_handed_melee_critical_strike_chance(PlusPercentage),
    chaos_damage(PlusPercentage),
    critical_hit_bleeding_effect(PlusPercentage),
    attack_and_cast_speed_while_affected_by_a_mana_flask(PlusPercentage),
    life_regeneration_rate_while_moving(PlusPercentage),
    elemental_damage_with_attack_skills(PlusPercentage),
    arrow_critical_strike_chance_max_as_distance_travelled_increases(PlusPercentage),
    hit_damage_pin_multiplier(PlusPercentage),
    all_attributes(PlusPercentage),
    totem_skill_cast_speed(PlusPercentage),
    base_enemy_critical_strike_chance_against_self(PlusPercentage),
    ailment_chance_vs_rare_or_unique_enemy(PlusPercentage),
    hit_damage_freeze_multiplier(PlusPercentage),
    skill_speed(PlusPercentage),
    minion_reservation(PlusPercentage),
    damage_per_enemy_elemental_ailment(PlusPercentage),
    evasion_rating_while_you_have_energy_shield(PlusPercentage),
    mace_damage(PlusPercentage),
    critical_strike_chance_vs_dazed_enemies(PlusPercentage),
    melee_damage(PlusPercentage),
    attack_damage_vs_rare_or_unique_enemy(PlusPercentage),
    axe_damage(PlusPercentage),
    buff_time_passed_only_buff_category(PlusPercentage),
    attack_mana_cost(PlusPercentage),
    base_all_ailment_duration_on_self(PlusPercentage),
    damage_if_have_crit_in_past_8_seconds(PlusPercentage),
    spear_critical_strike_chance(PlusPercentage),
    totem_skill_attack_speed(PlusPercentage),
    ailment_threshold(PlusPercentage),
    stormweaver_chill_effect_final(PlusPercentage),
    power_charge_duration(PlusPercentage),
    attack_speed_while_holding_shield(PlusPercentage),
    melee_damage_at_close_range(PlusPercentage),
    while_curse_is_50_expired_curse_effect(PlusPercentage),
    lightning_exposure_effect(PlusPercentage),
    energy_shield_recovery_rate(PlusPercentage),
    mace_hit_damage_stun_multiplier(PlusPercentage),
    unarmed_attack_skill_melee_dash_range(PlusPercentage),
    critical_strike_chance(PlusPercentage),
    dagger_critical_strike_chance(PlusPercentage),
    claw_attack_speed(PlusPercentage),
    attack_critical_strike_chance(PlusPercentage),
    minion_life_recovery_rate(PlusPercentage),
    mark_skill_mana_cost(PlusPercentage),
    map_ritual_deferred_rewards_are_offered_again_sooner(PlusPercentage),
    flail_critical_strike_chance(PlusPercentage),
    daze_duration(PlusPercentage),
    damage_taken_on_low_life(PlusPercentage),
    base_mana_leech_amount(PlusPercentage),
    link_skill_cast_speed(PlusPercentage),
    skill_effect_duration(PlusPercentage),
    damage_vs_frozen_enemies(PlusPercentage),
    witch_passive_maximum_lightning_damage_final(PlusPercentage),
    aftershock_area_of_effect(PlusPercentage),
    spell_critical_strike_chance(PlusPercentage),
    hit_damage_vs_enemies_affected_by_ailments(PlusPercentage),
    debuff_time_passed(PlusPercentage),
    movement_speed_if_enemy_killed_recently(PlusPercentage),
    map_ritual_daemon_damage(PlusPercentage),
    map_map_item_drop_chance(PlusPercentage),
    maximum_darkness(PlusPercentage),
    base_debuff_slow_magnitude(PlusPercentage),
    damage(PlusPercentage),
    cast_speed_when_on_full_life(PlusPercentage),
    ascendancy_titan_damage_reduction_rating_from_body_armour_final(PlusPercentage),
    culling_strike_threshold(PlusPercentage),
    gemling_skill_cost_final(PlusPercentage),
    arcane_surge_effect_on_self(PlusPercentage),
    strength(PlusPercentage),
    evasion_rating_if_energy_shield_recharge_started_in_past_2_seconds(PlusPercentage),
    block_recovery(PlusPercentage),
    ascendancy_pathfinder_flask_charges_gained_final(PlusPercentage),
    weapon_swap_speed(PlusPercentage),
    damage_per_warcry_used_recently(PlusPercentage),
    base_life_leech_rate(PlusPercentage),
    flail_attack_speed(PlusPercentage),
    critical_hit_damage_bonus_vs_enemies_within_2m_distance(PlusPercentage),
    dagger_damage(PlusPercentage),
    damage_vs_burning_enemies(PlusPercentage),
    curse_area_of_effect(PlusPercentage),
    map_breach_monster_quantity(PlusPercentage),
    stun_threshold_when_not_stunned_recently(PlusPercentage),
    mana_regeneration_rate_while_not_on_low_mana(PlusPercentage),
    spell_damage_if_have_crit_recently(PlusPercentage),
    life_regeneration_rate(PlusPercentage),
    attack_damage_per_75_armour_or_evasion_on_shield(PlusPercentage),
    totems_attack_speed_per_active_totem(PlusPercentage),
    offering_area_of_effect(PlusPercentage),
    energy_generated(PlusPercentage),
    attack_area_damage(PlusPercentage),
    titan_damage_final_against_heavy_stunned_enemies(PlusPercentage),
    area_of_effect_with_herald_skills(PlusPercentage),
    cast_speed_per_num_unique_spells_cast_recently(PlusPercentage),
    sword_damage(PlusPercentage),
    attack_speed_during_flask_effect(PlusPercentage),
    map_number_of_magic_packs(PlusPercentage),
    mana_cost_while_not_low_mana(PlusPercentage),
    map_player_damage_taken_vs_breach_monsters(PlusPercentage),
    attack_speed(PlusPercentage),
    evasion_if_hit_recently(PlusPercentage),
    critical_strike_chance_if_have_not_crit_recently(PlusPercentage),
    shield_evasion_rating(PlusPercentage),
    attack_speed_if_you_have_not_attacked_recently(PlusPercentage),
    infernalist_critical_strike_multiplier_final(PlusPercentage),
    stun_threshold_per_rage(PlusPercentage),
    projectile_damage_vs_enemies_further_than_6m_distance(PlusPercentage),
    jagged_ground_duration(PlusPercentage),
    witchhunter_up_to_damage_final_against_targets_with_missing_focus(PlusPercentage),
    evasion_rating(PlusPercentage),
    master_of_elements_evasion_rating_final(PlusPercentage),
    skill_area_of_effect_if_enemy_killed_recently(PlusPercentage),
    evasion_and_physical_damage_reduction_rating(PlusPercentage),
    base_cast_speed(PlusPercentage),
    base_stun_recovery(PlusPercentage),
    attack_and_cast_speed_with_lightning_skills(PlusPercentage),
    map_non_unique_delirium_monsters_splinter_amount(PlusPercentage),
    charm_charges_used(PlusPercentage),
    map_ritual_monster_tankiness_for_each_time_revived(PlusPercentage),
    small_passives_effect(PlusPercentage),
    damage_vs_shocked_enemies(PlusPercentage),
    base_slow_potency(PlusPercentage),
    physical_damage(PlusPercentage),
    fire_exposure_effect(PlusPercentage),
    movement_speed_while_you_have_energy_shield(PlusPercentage),
    attack_damage_while_surrounded(PlusPercentage),
    damage_with_two_handed_weapons(PlusPercentage),
    map_mod_effect(PlusPercentage),
    damage_taken_final_per_tailwind(PlusPercentage),
    shock_effect_with_critical_strikes(PlusPercentage),
    base_elemental_status_ailment_duration(PlusPercentage),
    energy_shield_from_helmet(PlusPercentage),
    damage_per_15_strength(PlusPercentage),
    projectile_damage(PlusPercentage),
    mana_flask_charges_gained(PlusPercentage),
    axe_attack_speed(PlusPercentage),
    critical_hit_damaging_ailment_effect(PlusPercentage),
    minion_damage(PlusPercentage),
    enemies_in_presence_cooldown_recovery(PlusPercentage),
    movement_speed_during_flask_effect(PlusPercentage),
    marked_enemy_damage_taken(PlusPercentage),
    map_affliction_secondary_wave_acceleration(PlusPercentage),
    shock_chance(PlusPercentage),
    movement_speed_if_cast_a_mark_spell_recently(PlusPercentage),
    energy_shield_recovery_rate_if_not_hit_recently(PlusPercentage),
    base_frenzy_charge_duration(PlusPercentage),
    global_item_attribute_requirements(PlusPercentage),
    damage_per_active_curse_on_self(PlusPercentage),
    bow_accuracy_rating(PlusPercentage),
    hit_damage_stun_multiplier_vs_enemies_on_low_life(PlusPercentage),
    cold_damage(PlusPercentage),
    minion_critical_strike_chance(PlusPercentage),
    body_armour_evasion_rating(PlusPercentage),
    shield_armour(PlusPercentage),
    ascendancy_warbringer_block_chance_final(PlusPercentage),
    map_player_shrine_effect_duration(PlusPercentage),
    map_ritual_omen_chance(PlusPercentage),
    ignite_effect_on_self(PlusPercentage),
    flask_duration(PlusPercentage),
    minion_maximum_life(PlusPercentage),
    defences_while_wielding_staff(PlusPercentage),
    witchhunter_armour_evasion_final(PlusPercentage),
    map_breach_chests_final(PlusPercentage),
    damage_vs_dazed_enemies(PlusPercentage),
    elemental_damage_with_attack_skills_while_using_flask(PlusPercentage),
    spell_damage_while_es_full(PlusPercentage),
    map_number_of_rare_packs(PlusPercentage),
    bow_attack_speed(PlusPercentage),
    melee_attack_speed(PlusPercentage),
    summon_totem_cast_speed(PlusPercentage),
    damage_if_triggered_skill_recently(PlusPercentage),
    attack_damage_for_4_seconds_on_cast(PlusPercentage),
    attack_speed_while_dual_wielding(PlusPercentage),
    damage_vs_enemies_on_full_life(PlusPercentage),
    stun_threshold(PlusPercentage),
    map_pinnacle_boss_item_dropped_rarity_final(PlusPercentage),
    chill_duration(PlusPercentage),
    spell_critical_strike_chance_while_wielding_staff(PlusPercentage),
    pathfinder_poison_duration_final(PlusPercentage),
    map_boss_experience_final(PlusPercentage),
    melee_critical_strike_chance(PlusPercentage),
    herald_skills_mana_reservation(PlusPercentage),
    damage_while_wielding_wand(PlusPercentage),
    damage_vs_enemies_affected_by_status_ailments(PlusPercentage),
    mark_skill_duration(PlusPercentage),
    map_delirium_daemon_damage(PlusPercentage),
    thorns_damage_if_blocked_recently(PlusPercentage),
    minion_attack_and_cast_speed(PlusPercentage),
    blind_effect(PlusPercentage),
    hit_damage_stun_multiplier(PlusPercentage),
    map_delirium_boss_splinter_amount(PlusPercentage),
    flask_charges_gained(PlusPercentage),
    melee_damage_when_on_full_life(PlusPercentage),
    armour_if_consumed_endurance_charge_recently(PlusPercentage),
    armour_per_rage(PlusPercentage),
    flask_mana_charges_used(PlusPercentage),
    endurance_charge_duration(PlusPercentage),
    damage_with_one_handed_weapons(PlusPercentage),
    flask_life_and_mana_recovery_while_using_charm(PlusPercentage),
    hit_damage_stun_multiplier_vs_enemies_at_close_range(PlusPercentage),
    curse_delay(PlusPercentage),
    evasion_rating_while_surrounded(PlusPercentage),
    critical_strike_chance_vs_enemies_further_than_6m_distance(PlusPercentage),
    totems_spells_cast_speed_per_active_totem(PlusPercentage),
    map_item_drop_rarity(PlusPercentage),
    trap_critical_strike_chance(PlusPercentage),
    warcry_damage(PlusPercentage),
    map_jewel_drop_chance_in_forest_biome(PlusPercentage),
    map_sanctum_and_ultimatum_key_drop_chance_in_desert_biome(PlusPercentage),
    life_recovery_from_flasks_while_on_low_life(PlusPercentage),
    flask_effect(PlusPercentage),
    offering_duration(PlusPercentage),
    base_life_leech_amount(PlusPercentage),
    map_tower_augment_quantity(PlusPercentage),
    flask_mana_to_recover(PlusPercentage),
    mana_regeneration_rate(PlusPercentage),
    base_cooldown_speed(PlusPercentage),
    attack_damage(PlusPercentage),
    accuracy_rating_while_dual_wielding(PlusPercentage),
    one_handed_attack_ailment_chance(PlusPercentage),
    slam_skill_area_of_effect(PlusPercentage),
    accuracy_rating(PlusPercentage),
    dexterity(PlusPercentage),
    flail_damage(PlusPercentage),
    minion_skill_area_of_effect(PlusPercentage),
    empowered_attack_hit_damage_stun_multiplier(PlusPercentage),
    critical_strike_chance_vs_shocked_enemies(PlusPercentage),
    hit_damage_stun_multiplier_with_crits(PlusPercentage),
    spell_damage_per_100_maximum_mana_up_to_60(PlusPercentage),
    cast_speed_while_holding_staff(PlusPercentage),
    movement_speed_for_4_seconds_on_block(PlusPercentage),
    warcry_cooldown_speed(PlusPercentage),
    attack_speed_if_enemy_killed_recently(PlusPercentage),
    claw_damage(PlusPercentage),
    mark_skill_cast_speed(PlusPercentage),
    non_damaging_ailment_effect_with_critical_strikes(PlusPercentage),
    grenade_skill_cooldown_speed(PlusPercentage),
    grenade_skill_area_of_effect(PlusPercentage),
    map_ritual_rare_monsters(PlusPercentage),
    crossbow_attack_speed(PlusPercentage),
    elemental_damage_if_have_crit_recently(PlusPercentage),
    stun_threshold_when_on_full_life(PlusPercentage),
    quarterstaff_hit_damage_freeze_multiplier(PlusPercentage),
    // chance_to_poison_on_critical_strike_with_dagger_(Other),
    // grenade_skill_number_of_additional_projectiles(Other),
    // projectile_chance_to_chain_1_extra_time_from_terrain_(Other),
    // reapply_enemy_shock_on_consuming_enemy_shock_chance_(Other),
    // map_breach_chests_drop_double_splinters_chance_(Other),
    // can_apply_additional_chill(Other),
    // keystone_vaal_pact(Other),
    // damage_removed_from_your_nearest_totem_before_life_or_es_(Other),
    // marked_enemies_cannot_deal_critical_strikes(Other),
    // warbringer_overbreak_armour(Other),
    // kill_enemy_on_hit_if_under_10_life(Other),
    // evasion_rating_per_1_armour_on_gloves(Other),
    // map_expiditon_logbooks_drop_with_3_implicits(Other),
    // recover__life_when_you_create_an_offering(Other),
    // number_of_infernal_familiars_allowed(Other),
    // base_skill_cost_life_instead_of_mana_(Other),
    // map_ritual_additional_wildwood_packs(Other),
    // accuracy_rating(Other),
    // stun_threshold_from__base_armour_from_equipment(Other),
    // drain_focus__of_damage_dealt_on_hit(Other),
    // witchhunter_chance_to_explode_enemies_for_100_of_life_as_physical(Other),
    // warcries_bypass_cooldown(Other),
    // enemies_you_curse_cannot_recharge_energy_shield(Other),
    // maximum_rage_while_wielding_axe(Other),
    // number_of_additional_projectiles(Other),
    // energy_shield_gained_on_block(Other),
    // gain__damage_as_chaos_from_unreserved_darkness(Other),
    // enemies_you_curse_have_15_hinder(Other),
    // slows_have_no_potency_on_you(Other),
    // base_body_armour_permyriad_to_gain_as_physical_thorns_damage(Other),
    // map_tier_bonus_permillage(Other),
    // trigger_skills_refund_half_energy_spent_chance_(Other),
    // base_intelligence(Other),
    // base_reduce_enemy_lightning_resistance_(Other),
    // recover__life_on_heavy_stunning_rare_or_unique_enemy(Other),
    // minion_cold_damage_resistance_(Other),
    // additional_physical_damage_reduction__per_jade(Other),
    // base_maximum_cold_damage_resistance_(Other),
    // physical_damage_taken_recouped_as_life_(Other),
    // slam_aftershock_chance_(Other),
    // keystone_dance_with_death(Other),
    // ascendancy_beidats_gaze_mana_per_X_maximum_life(Other),
    // cannot_gain_spirit_from_equipment(Other),
    // life_remnants_gain_per_globe(Other),
    // +1_spirit_per_X_evasion_rating_on_body_armour(Other),
    // mace_slam_aftershock_chance_(Other),
    // maim_on_hit_(Other),
    // enemies_chaos_resistance__while_cursed(Other),
    // charms__chance_on_use_to_use_another_charm_without_consuming_charges(Other),
    // minions_gain_your_dexterity(Other),
    // recover__mana_when_you_invoke_a_spell(Other),
    // map_breach_rares_catalyst_full_stack_chance_(Other),
    // defend_with__of_armour_while_not_on_low_energy_shield(Other),
    // spell_critical_strike_multiplier_while_wielding_staff(Other),
    // num_additional_skill_slots(Other),
    // recover__maximum_mana_on_kill(Other),
    // base_maximum_chaos_damage_resistance_(Other),
    // minion_maximum_all_elemental_resistances_(Other),
    // non_skill_base_all_damage__to_gain_as_physical(Other),
    // bleed_on_crit__with_attacks(Other),
    // map_duplicate_x_rare_monsters(Other),
    // map_delirium_additional_reward_type_chance_(Other),
    // keystone_mana_shield(Other),
    // recover__life_per_endurance_charge_consumed(Other),
    // base_strength_and_intelligence(Other),
    // resolute_technique(Other),
    // keystone_zealots_oath(Other),
    // base_life_leech_does_not_stop_at_full_life(Other),
    // darkness_per_level(Other),
    // gain_guard_flask_charge_when_hit_by_enemy_chance_(Other),
    // recover_maximum_life_on_enemy_killed_chance_(Other),
    // totem_additional_physical_damage_reduction_(Other),
    // gain_accuracy_rating_equal_to_strength(Other),
    // recover__maximum_life_on_kill(Other),
    // hellhound_takes__damage_before_you(Other),
    // recoup__elemental_damage_as_energy_shield(Other),
    // lose_all_tailwind_when_hit(Other),
    // map_ritual_contains_wildwood_wisp(Other),
    // base_cold_damage_resistance_(Other),
    // block_chance_from_equipped_shield_is_(Other),
    // elemental_damage_taken__recouped_as_life(Other),
    // knockback_on_crit_with_quarterstaff(Other),
    // you_gain__life_when_one_of_your_minions_is_revived(Other),
    // recover__maximum_mana_on_charm_use(Other),
    // stun_threshold_from__maximum_energy_shield(Other),
    // grenade_skill__chance_to_explode_twice(Other),
    // explode_burning_enemies_for_10_life_as_fire_on_kill_chance_(Other),
    // max_jade_stacks(Other),
    // number_of_additional_marks_allowed(Other),
    // gain_maximum_endurance_charges_on_endurance_charge_gained__chance(Other),
    // base_penetrate_elemental_resistances_(Other),
    // generate_x_charges_for_mana_flasks_per_minute(Other),
    // critical_strike_multiplier_vs_burning_enemies(Other),
    // base_darkness(Other),
    // lightning_hit_and_dot_damage__taken_as_fire(Other),
    // base_evasion_rating(Other),
    // can_apply_additional_shock(Other),
    // armour_break_damage__dealt_as_armour_break(Other),
    // mace_strike_aftershock_chance_(Other),
    // critical_strike_multiplier_vs_stunned_enemies(Other),
    // pathfinder_ascendancy_poison_on_enemies_you_kill_spread_to_enemies_within_x(Other),
    // minion_maximum_life__to_gain_as_maximum_energy_shield(Other),
    // life_reserved_by_stat_(Other),
    // map_maps_drop_with_distilled_emotions_applied_chance_(Other),
    // stun_threshold_based_on__energy_shield_instead_of_life(Other),
    // gain_accuracy_rating_equal_to_intelligence(Other),
    // max_frenzy_charges(Other),
    // +1_spirit_per_X_energy_shield_on_body_armour(Other),
    // base_resist_all_elements_(Other),
    // generate_x_charges_for_charms_per_minute(Other),
    // minion_fire_damage_resistance_(Other),
    // life_gained_on_block(Other),
    // flasks__chance_to_not_consume_charges(Other),
    // keystone_acrobatics(Other),
    // unaffected_by_chill_while_mana_leeching(Other),
    // faster_bleed_(Other),
    // map_ritual_no_revive_penalty(Other),
    // ailment_threshold_from_lowest_of_base_boots_evasion_rating_and_armour(Other),
    // projectile_chance_to_piece_vs_enemies_within_3m_distance_of_player(Other),
    // minions_get_amulet_stats_instead_of_you(Other),
    // number_of_additional_poison_stacks(Other),
    // base_life_gained_on_enemy_death(Other),
    // map_ritual_additional_reward_rerolls(Other),
    // critical_damage1_per_X_current_life(Other),
    // map_ritual_additional_daemon(Other),
    // map_final_boss_map_key_of_at_least_same_tier_as_current_map_drop_chance_(Other),
    // rage_loss_delay_ms(Other),
    // map_expedition_chests_despawn_after_X_seconds(Other),
    // map_expedition_x_extra_relic_prefixes(Other),
    // arrow_base_number_of_targets_to_pierce(Other),
    // critical_strike_multiplier_during_any_flask_effect(Other),
    // gain__life_from_body_es(Other),
    // base_strength(Other),
    // stun_threshold_from_lowest_of_base_helmet_evasion_rating_and_armour(Other),
    // map_breach_rares_have_soul_eater(Other),
    // trigger_wild_strike_on_attack_crit(Other),
    // ascendancy_chronomancer_apex_of_the_moment_base_slow_aura_value(Other),
    // focus_decay__per_minute(Other),
    // keystone_giants_blood(Other),
    // map_strongbox_chance_(Other),
    // life_regeneration_rate_per_minute__if_have_been_hit_recently(Other),
    // damage_taken_goes_to_mana_(Other),
    // base_aggravate_bleeding_on_attack_hit_chance_(Other),
    // enemies_near_marked_enemy_are_blinded(Other),
    // aggravate_bleeding_on_exerted_attack_hit_chance_(Other),
    // additional_maximum_all_elemental_resistances_(Other),
    // mana_leech_applies_recovery_to_energy_shield_also(Other),
    // _maximum_life_as_focus(Other),
    // maim_on_hit__vs_poisoned_enemies(Other),
    // life_regeneration_rate_per_minute__while_affected_by_damaging_ailment(Other),
    // allies_in_presence_life_regeneration_rate_per_minute_equal_to_your_maximum_life_(Other),
    // leech__is_instant(Other),
    // exposure_you_inflict_lowers_affected_resistance_by_extra_(Other),
    // keystone_bulwark(Other),
    // base_chance_to_not_consume_corpse_(Other),
    // keystone_pain_attunement(Other),
    // base_maximum_lightning_damage_resistance_(Other),
    // physical_damage_prevented_recouped_as_life_(Other),
    // evasion_rating__to_gain_as_armour(Other),
    // heavy_stuns_have_culling_strike(Other),
    // non_skill_base_all_damage__to_gain_as_cold(Other),
    // gain_tailwind_stack_on_skill_use(Other),
    // keystone_blood_magic(Other),
    // base_maximum_fire_damage_resistance_(Other),
    // life_regeneration_rate_per_minute__when_on_low_life(Other),
    // cold_hit_and_dot_damage__taken_as_fire(Other),
    // chance_for_skills_to_avoid_cooldown_(Other),
    // life_regeneration_rate_per_minute__while_stationary(Other),
    // map_breach__chance_for_3_additional_breach(Other),
    // map_breach_chance_to_be_guarded_by_magic_pack_(Other),
    // non_skill_base_all_damage__to_gain_as_chaos(Other),
    // mana_gained_on_block(Other),
    // regenerate__life_over_1_second_when_stunned(Other),
    // you_and_allies_in_presence_all_damage_can_ignite_while_not_on_low_infernal_flame(Other),
    // infernal_flame_instead_of_mana(Other),
    // evasion_rating_per_1_helmet_energy_shield(Other),
    // map_delirium_difficulty_scaling_from_mirror_is_double(Other),
    // map_monolith_chance_(Other),
    // critical_strikes_ignore_positive_elemental_resistances(Other),
    // ailment_threshold_per_dexterity(Other),
    // defend_with__armour_against_attacks_from_distance_greater_than_6m(Other),
    // non_skill_base_physical_damage__to_gain_as_chaos(Other),
    // maps_boss_drop_additional_bonus_map_chance_(Other),
    // trigger_elemental_storm_on_crit(Other),
    // gemling_double_basic_attribute_bonuses(Other),
    // ascendancy_beidats_will_spirit_per_X_maximum_life(Other),
    // minion_elemental_resistance_(Other),
    // keystone_eldritch_battery(Other),
    // keystone_elemental_equilibrium(Other),
    // gain_x_rage_on_hit_with_axes(Other),
    // totems_regenerate__life_per_minute(Other),
    // blind_enemies_when_they_stun_you(Other),
    // base_block__damage_taken(Other),
    // additive_armour_modifiers_apply_to_energy_shield_recharge_rate_at__value(Other),
    // map_breach__chance_for_10_additional_breach(Other),
    // buildup_jade_every_x_ms(Other),
    // additional_critical_strike_chance_permyriad_with_herald_skills(Other),
    // elemental_damage_can_inflict_bleeding(Other),
    // attacks_chance_to_blind_on_hit_(Other),
    // base_mana_leech_is_instant(Other),
    // keystone_hex_master(Other),
    // map_pinnacle_boss_drops_X_corrupted_rare_tablets(Other),
    // chance_to_gain_onslaught_on_kill_with_axes_(Other),
    // map_pinnacle_boss_special_gem_drop_chance_(Other),
    // armour_from__strength_requirements_from_boots_gloves_helmets(Other),
    // elementalist_chill_maximum_magnitude_override(Other),
    // minion_lightning_damage_resistance_(Other),
    // life_regeneration_rate_per_minute__if_used_life_flask_in_past_10_seconds(Other),
    // damage_with_hits_is_lucky_vs_enemies_on_low_life(Other),
    // hit__chance_to_gain_25_damage_as_chaos(Other),
    // base_fire_damage_resistance_(Other),
    // non_skill_base_lightning_damage__to_gain_as_cold(Other),
    // map_pinnacle_boss_rare_socket_currency_chance_(Other),
    // non_skill_base_all_damage__to_gain_as_lightning(Other),
    // lose__of_max_infernal_flame_per_minute(Other),
    // base_armour__applies_to_fire_damage(Other),
    // keystone_iron_reflexes(Other),
    // shock_enemies_in_150cm_radius_on_shock_chance_(Other),
    // base_chaos_damage_resistance_(Other),
    // max_endurance_charges(Other),
    // gain_maximum_frenzy_charges_on_frenzy_charge_gained__chance(Other),
    // arcane_surge_effect1_per_X_maximum_mana(Other),
    // life_regeneration_rate_per_minute_(Other),
    // cannot_be_blinded_while_on_full_life(Other),
    // world_map_unique_maps_visible_X_units_beyond_light_radius(Other),
    // minion_chaos_resistance_(Other),
    // base_dexterity(Other),
    // cold_exposure_you_inflict_lowers_cold_resistance_by_extra_(Other),
    // gain_maximum_power_charges_on_power_charge_gained__chance(Other),
    // minions_deal__of_physical_damage_as_additional_chaos_damage(Other),
    // corpses_in_your_presence_explode_dealing__maximum_life_physical_damage_on_warcry(Other),
    // refresh_ignite_duration_on_critical_strike_chance_(Other),
    // gain_endurance_charge_on_heavy_stunning_rare_or_unique_enemy(Other),
    // chaos_damage_resistance_is_doubled(Other),
    // minion_additional_physical_damage_reduction_(Other),
    // display_passive_attribute_text(Other),
    // hits_ignore_elemental_resistances_vs_frozen_enemies(Other),
    // map_essence_monsters_chance_for_2_additional_essences_(Other),
    // attack_additional_critical_strike_chance_permyriad(Other),
    // non_skill_base_physical_damage__to_gain_as_fire(Other),
    // base_strength_and_dexterity(Other),
    // hit_for__max_life_es_on_max_infernal_flame(Other),
    // crossbow_attack__chance_to_not_consume_ammo(Other),
    // atlas_keystone_corruption_roulette(Other),
    // life_regenerate_rate_per_second__while_totem_active(Other),
    // map_breach_hands_inflict_waking_nightmare(Other),
    // chance_to_fork_extra_projectile_(Other),
    // base_reduce_enemy_cold_resistance_(Other),
    // aggravate_bleeding_when_inflicted_vs_enemies_on_jagged_ground_chance_(Other),
    // map_pinnacle_boss_additional_unique_drop_chance_(Other),
    // aggravate_bleeding_on_attack_crit_chance_(Other),
    // lightning_penetration__while_on_low_mana(Other),
    // decimating_strike(Other),
    // cannot_have_more_than_1_damaging_ailment(Other),
    // extra_damage_rolls_with_lightning_damage_on_non_critical_hits(Other),
    // while_using_sword_reduce_enemy_block_(Other),
    // ancestral_slam_every_other_slam(Other),
    // keystone_eternal_youth(Other),
    // maximum_rage(Other),
    // gem_requirements_can_be_satisfied_by_highest_attribute(Other),
    // recoup_effects_apply_over_4_seconds_instead(Other),
    // enemies_are_maimed_for_x_seconds_after_becoming_unpinned(Other),
    // maximum_cold_resistance1_per_X_corresponding_support(Other),
    // additional_all_attributes(Other),
    // keystone_unwavering_stance(Other),
    // map_killing_rare_monsters_pauses_delirium_mirror_timer_for_x_seconds(Other),
    // skill_cost_base_life_equal_to_base_mana(Other),
    // lose__of_infernal_flame_on_reaching_max(Other),
    // chance__to_create_shocking_ground_on_shock(Other),
    // map_expedition_x_extra_relic_suffixes(Other),
    // convert_all_life_leech_to_energy_shield_leech(Other),
    // defend_with__armour_against_critical_strikes(Other),
    // can_block_all_hits_while_shield_is_lowered(Other),
    // infernalist_burn_life_and_es__per_second_if_crit_recently(Other),
    // titan_expanded_main_inventory(Other),
    // all_damage_can_shock(Other),
    // base_life_leech_from_all_spell_damage_permyriad(Other),
    // armour_break__of_armour_on_heavy_stunning(Other),
    // base_physical_damage_reduction_rating(Other),
    // global_chance_to_blind_on_hit_(Other),
    // restore_life_and_mana_on_warcry_(Other),
    // all_damage_can_chill(Other),
    // non_skill_base_all_damage__to_gain_as_fire(Other),
    // curses_never_expire(Other),
    // maximum_fire_resistance1_per_X_corresponding_support(Other),
    // minion_life_regeneration_rate_per_minute_(Other),
    // max_power_charges(Other),
    // base_spell_critical_strike_chance_override_permyriad(Other),
    // maximum_mana__gained_on_kill(Other),
    // keystone_ancestral_bond(Other),
    // chance__to_double_effect_of_removing_frenzy_charges(Other),
    // map_ritual_encounter_count_is_four(Other),
    // gain_x_rage_when_hit(Other),
    // lightning_skill_additional_chain_chance_(Other),
    // quarterstaff_skills_that_consume_power_charges_count_as_consuming_x_additional_power_charges(Other),
    // generate_x_charges_for_life_flasks_per_minute(Other),
    // recover__maximum_life_on_mana_flask_use(Other),
    // inflict_fire_exposure_on_hits_that_heavy_stun(Other),
    // lose__of_life_and_energy_shield_when_you_use_a_chaos_skill(Other),
    // double_number_of_poison_you_can_inflict(Other),
    // base_chance_to_inflict_bleeding_(Other),
    // chance_to_double_armour_effect_on_hit_(Other),
    // culling_strike_vs_marked_enemy(Other),
    // damage_taken_goes_to_life_mana_es_over_4_seconds_(Other),
    // hit__chance_to_gain_100_damage_as_chaos(Other),
    // maximum_life__to_gain_as_maximum_energy_shield(Other),
    // base_should_have_arcane_surge_from_stat(Other),
    // maximum_lightning_resistance1_per_X_corresponding_support(Other),
    // map_pinnacle_boss_drops_X_waystones(Other),
    // armour_break_equal_to__physical_damage_dealt_on_critical_strike_with_spells(Other),
    // accuracy_rating_vs_bleeding_enemies(Other),
    // inflict_withered_for_x_seconds_on_unwithered_enemies_when_they_enter_your_presence(Other),
    // physical_hit_and_dot_damage__taken_as_chaos(Other),
    // deadeye_accuracy_unaffected_by_range(Other),
    // physical_damage_from_hits__taken_as_random_element(Other),
    // base_dexterity_and_intelligence(Other),
    // cannot_recharge_energy_shield(Other),
    // map_boss_area_chance_to_be_corrupted_(Other),
    // chance_to_summon_two_totems_(Other),
    // base_maximum_mana(Other),
    // breach_flame_effects_doubled(Other),
    // remove_curse_on_mana_flask_use(Other),
    // faster_burn_(Other),
    // atlas_keystone_rare_or_unique_monsters_have_1_or_2_additional_mods(Other),
    // base_attack_damage_penetrates_elemental_resist_(Other),
    // keystone_glancing_blows(Other),
    // gain_x_rage_on_melee_hit(Other),
    // charms__chance_to_not_consume_charges(Other),
    // focus_decay_delay_ms(Other),
    // attack_skills_additional_totems_allowed(Other),
    // max_demon_form_stacks(Other),
    // map_shrine_chance_(Other),
    // evasion_rating_also_reduces_physical_damage(Other),
    // hit__chance_to_gain_50_damage_as_chaos(Other),
    // atlas_keystone_extreme_archaeology(Other),
    // double_tablet_effect_chance__when_opening_a_map(Other),
    // base_damage_removed_from_mana_before_life_(Other),
    // fire_exposure_you_inflict_lowers_fire_resistance_by_extra_(Other),
    // keystone_oasis(Other),
    // gain_unbound_ailment_stacks(Other),
    // maps_with_bosses_are_irradiated(Other),
    // crushing_blow(Other),
    // map_breach__chance_for_1_additional_breach(Other),
    // arrow_speed_additive_modifiers_also_apply_to_bow_damage(Other),
    // lose__of_life_loss_over_4_seconds_instead(Other),
    // gain_max_rage_on_rage_gain_from_hit__chance(Other),
    // knockback_chance__at_close_range(Other),
    // base_chance_to_pierce_(Other),
    // keystone_heartstopper(Other),
    // base_maximum_life(Other),
    // dummy_stat_display_nothing(Other),
    // keystone_avatar_of_fire(Other),
    // keystone_charge_cycle(Other),
    // stun_threshold_per_strength(Other),
    // life_flask_effects_are_not_removed_at_full_life(Other),
    // x_faster_start_of_sorcery_ward_recovery(Other),
    // allies_in_presence_accuracy_rating(Other),
    // aggravate_bleeding_older_than_ms_on_hit(Other),
    // minions_have__chance_to_inflict_wither_on_hit(Other),
    // gain_arcane_surge_on_crit__chance(Other),
    // minion_damage_taken__recouped_as_their_life(Other),
    // link_skills_can_target_minions(Other),
    // life_regeneration_rate_per_minute__while_surrounded(Other),
    // recover_X_life_on_block(Other),
    // defend_with__armour_against_ranged_attacks(Other),
    // ascendancy_beidats_hand_energy_shield_per_X_maximum_life(Other),
    // keystone_conduit(Other),
    // base_thorns_critical_strike_chance(Other),
    // minion_accuracy_rating(Other),
    // damage_with_hits_is_lucky_vs_heavy_stunned_enemies(Other),
    // base_maximum_energy_shield(Other),
    // base_chance_to_poison_on_hit_(Other),
    // damage_taken_goes_to_life_over_4_seconds_(Other),
    // critical_strike_multiplier_if_have_dealt_non_crit_recently(Other),
    // link_to_X_additional_random_allies(Other),
    // bleed_on_crit_(Other),
    // maximum_energy_shield1_per_x_body_armour_evasion_rating(Other),
    // base_reduce_enemy_fire_resistance_(Other),
    // recover__life_when_you_use_a_life_flask_while_on_low_life(Other),
    // base_chance_to_poison_on_hit__vs_non_poisoned_enemies(Other),
    // warcry_empowers_next_x_melee_attacks(Other),
    // every_4_seconds_regenerate__of_armour_and_evasion_as_life_over_1_second(Other),
    // non_skill_cold_damage__to_gain_as_fire_vs_frozen_enemies(Other),
    // unaffected_by_chill_during_dodge_roll(Other),
    // base_darkness_refresh_rate_ms(Other),
    // you_and_allies_in_presence_non_skill_base_all_damage__to_gain_as_fire_while_on_high_infernal_flame(Other),
    // critical_strike_multiplier_if_have_not_dealt_critical_strike_recently(Other),
    // num_charm_slots(Other),
    // totem_elemental_resistance_(Other),
    // recover__maximum_life_on_killing_poisoned_enemy(Other),
    // critical_strike_multiplier_if_gained_power_charge_recently(Other),
    // keystone_chaos_inoculation(Other),
    // reduce_enemy_elemental_resistance_(Other),
    // spell_skills_fire_2_additional_projectiles_final_chance_(Other),
    // spawn_defender_with_totem(Other),
    // area_skill_knockback_chance_(Other),
    // create_chilling_ground_on_freeze(Other),
}

impl StatType {
    pub fn sum(stats: &[Self]) -> Option<Self> {
        let mut total = 0.0;
        let mut variant = None;

        for stat in stats {
            match stat {
                Self::map_pinnacle_boss_difficulty(Plus(v)) => { total += v; variant = Some("map_pinnacle_boss_difficulty"); },
                Self::attack_critical_strike_multiplier(Plus(v)) => { total += v; variant = Some("attack_critical_strike_multiplier"); },
                Self::all_skill_gem_level(Plus(v)) => { total += v; variant = Some("all_skill_gem_level"); },
                Self::maps_with_bosses_additional_strongbox(Plus(v)) => { total += v; variant = Some("maps_with_bosses_additional_strongbox"); },
                Self::bow_critical_strike_multiplier(Plus(v)) => { total += v; variant = Some("bow_critical_strike_multiplier"); },
                Self::base_thorns_critical_strike_multiplier(Plus(v)) => { total += v; variant = Some("base_thorns_critical_strike_multiplier"); },
                Self::all_skill_gem_quality(Plus(v)) => { total += v; variant = Some("all_skill_gem_quality"); },
                Self::map_logbook_difficulty(Plus(v)) => { total += v; variant = Some("map_logbook_difficulty"); },
                Self::spell_skill_gem_level(Plus(v)) => { total += v; variant = Some("spell_skill_gem_level"); },
                Self::melee_range(Plus(v)) => { total += v; variant = Some("melee_range"); },
                Self::base_spell_critical_strike_multiplier(Plus(v)) => { total += v; variant = Some("base_spell_critical_strike_multiplier"); },
                Self::minion_critical_strike_multiplier(Plus(v)) => { total += v; variant = Some("minion_critical_strike_multiplier"); },
                Self::critical_strike_multiplier_with_dagger(Plus(v)) => { total += v; variant = Some("critical_strike_multiplier_with_dagger"); },
                Self::base_critical_strike_multiplier(Plus(v)) => { total += v; variant = Some("base_critical_strike_multiplier"); },
                Self::quarterstaff_critical_strike_multiplier(Plus(v)) => { total += v; variant = Some("quarterstaff_critical_strike_multiplier"); },
                Self::map_breach_domain_difficulty(Plus(v)) => { total += v; variant = Some("map_breach_domain_difficulty"); },
                Self::grenade_skill_cooldown_count(Plus(v)) => { total += v; variant = Some("grenade_skill_cooldown_count"); },
                Self::map_expedition_chest_marker_count(Plus(v)) => { total += v; variant = Some("map_expedition_chest_marker_count"); },
                Self::map_simulacrum_difficulty(Plus(v)) => { total += v; variant = Some("map_simulacrum_difficulty"); },
                Self::one_handed_melee_critical_strike_multiplier(Plus(v)) => { total += v; variant = Some("one_handed_melee_critical_strike_multiplier"); },
                Self::flail_critical_strike_multiplier(Plus(v)) => { total += v; variant = Some("flail_critical_strike_multiplier"); },
                Self::maps_with_bosses_additional_essence(Plus(v)) => { total += v; variant = Some("maps_with_bosses_additional_essence"); },
                Self::critical_strike_multiplier_vs_enemies_on_full_life(Plus(v)) => { total += v; variant = Some("critical_strike_multiplier_vs_enemies_on_full_life"); },
                Self::crossbow_critical_strike_multiplier(Plus(v)) => { total += v; variant = Some("crossbow_critical_strike_multiplier"); },
                Self::maps_with_bosses_additional_shrine(Plus(v)) => { total += v; variant = Some("maps_with_bosses_additional_shrine"); },
                Self::gain__maximum_energy_shield_as_freeze_threshold(Plus(v)) => { total += v; variant = Some("gain__maximum_energy_shield_as_freeze_threshold"); },
                Self::support_gem_limit(Plus(v)) => { total += v; variant = Some("support_gem_limit"); },
                Self::cold_skill_gem_level(Plus(v)) => { total += v; variant = Some("cold_skill_gem_level"); },
                Self::ignites_apply_fire_resistance(Plus(v)) => { total += v; variant = Some("ignites_apply_fire_resistance"); },
                Self::map_bossing_difficulty(Plus(v)) => { total += v; variant = Some("map_bossing_difficulty"); },
                Self::chaos_skill_gem_level(Plus(v)) => { total += v; variant = Some("chaos_skill_gem_level"); },
                Self::map_voodoo_king_difficulty(Plus(v)) => { total += v; variant = Some("map_voodoo_king_difficulty"); },
                Self::energy_shield_delay_when_not_on_full_life(MinusPercentage(v)) => { total += v; variant = Some("energy_shield_delay_when_not_on_full_life"); },
                Self::base_self_critical_strike_multiplier(MinusPercentage(v)) => { total += v; variant = Some("base_self_critical_strike_multiplier"); },
                Self::base_self_ignite_duration(MinusPercentage(v)) => { total += v; variant = Some("base_self_ignite_duration"); },
                Self::energy_shield_delay(MinusPercentage(v)) => { total += v; variant = Some("energy_shield_delay"); },
                Self::base_mana_cost(MinusPercentage(v)) => { total += v; variant = Some("base_mana_cost"); },
                Self::base_self_shock_duration(MinusPercentage(v)) => { total += v; variant = Some("base_self_shock_duration"); },
                Self::base_self_freeze_duration(MinusPercentage(v)) => { total += v; variant = Some("base_self_freeze_duration"); },
                Self::energy_shield_delay_if_stunned_recently(MinusPercentage(v)) => { total += v; variant = Some("energy_shield_delay_if_stunned_recently"); },
                Self::evasion_rating_if_have_not_been_hit_recently(PlusPercentage(v)) => { total += v; variant = Some("evasion_rating_if_have_not_been_hit_recently"); },
                Self::shock_effect(PlusPercentage(v)) => { total += v; variant = Some("shock_effect"); },
                Self::map_magic_chest_amount(PlusPercentage(v)) => { total += v; variant = Some("map_magic_chest_amount"); },
                Self::base_curse_duration(PlusPercentage(v)) => { total += v; variant = Some("base_curse_duration"); },
                Self::damage_with_daggers_against_full_life_enemies(PlusPercentage(v)) => { total += v; variant = Some("damage_with_daggers_against_full_life_enemies"); },
                Self::mana_regeneration_rate_while_moving(PlusPercentage(v)) => { total += v; variant = Some("mana_regeneration_rate_while_moving"); },
                Self::titan_maximum_life_final(PlusPercentage(v)) => { total += v; variant = Some("titan_maximum_life_final"); },
                Self::charm_duration(PlusPercentage(v)) => { total += v; variant = Some("charm_duration"); },
                Self::bow_damage(PlusPercentage(v)) => { total += v; variant = Some("bow_damage"); },
                Self::sorcery_ward_strength(PlusPercentage(v)) => { total += v; variant = Some("sorcery_ward_strength"); },
                Self::intelligence(PlusPercentage(v)) => { total += v; variant = Some("intelligence"); },
                Self::chill_effect(PlusPercentage(v)) => { total += v; variant = Some("chill_effect"); },
                Self::critical_hit_ignite_effect(PlusPercentage(v)) => { total += v; variant = Some("critical_hit_ignite_effect"); },
                Self::life_flask_charges_gained(PlusPercentage(v)) => { total += v; variant = Some("life_flask_charges_gained"); },
                Self::attack_damage_vs_bleeding_enemies(PlusPercentage(v)) => { total += v; variant = Some("attack_damage_vs_bleeding_enemies"); },
                Self::base_projectile_speed(PlusPercentage(v)) => { total += v; variant = Some("base_projectile_speed"); },
                Self::damage_per_different_warcry_used_recently(PlusPercentage(v)) => { total += v; variant = Some("damage_per_different_warcry_used_recently"); },
                Self::damage_vs_hindered_enemies(PlusPercentage(v)) => { total += v; variant = Some("damage_vs_hindered_enemies"); },
                Self::grenade_fuse_duration(PlusPercentage(v)) => { total += v; variant = Some("grenade_fuse_duration"); },
                Self::map_boss_maximum_life(PlusPercentage(v)) => { total += v; variant = Some("map_boss_maximum_life"); },
                Self::ailment_chance(PlusPercentage(v)) => { total += v; variant = Some("ailment_chance"); },
                Self::physical_damage_reduction_rating(PlusPercentage(v)) => { total += v; variant = Some("physical_damage_reduction_rating"); },
                Self::grenade_skill_damage(PlusPercentage(v)) => { total += v; variant = Some("grenade_skill_damage"); },
                Self::map_breach_monster_splinter_quantity(PlusPercentage(v)) => { total += v; variant = Some("map_breach_monster_splinter_quantity"); },
                Self::evasion_rating_if_consumed_frenzy_charge_recently(PlusPercentage(v)) => { total += v; variant = Some("evasion_rating_if_consumed_frenzy_charge_recently"); },
                Self::light_radius(PlusPercentage(v)) => { total += v; variant = Some("light_radius"); },
                Self::damaging_ailments_deal_damage_faster(PlusPercentage(v)) => { total += v; variant = Some("damaging_ailments_deal_damage_faster"); },
                Self::aura_effect(PlusPercentage(v)) => { total += v; variant = Some("aura_effect"); },
                Self::darkness_refresh_rate(PlusPercentage(v)) => { total += v; variant = Some("darkness_refresh_rate"); },
                Self::minion_cooldown_recovery(PlusPercentage(v)) => { total += v; variant = Some("minion_cooldown_recovery"); },
                Self::crossbow_damage(PlusPercentage(v)) => { total += v; variant = Some("crossbow_damage"); },
                Self::projectile_hit_damage_stun_multiplier(PlusPercentage(v)) => { total += v; variant = Some("projectile_hit_damage_stun_multiplier"); },
                Self::block_chance_if_blocked_with_active_block_recently(PlusPercentage(v)) => { total += v; variant = Some("block_chance_if_blocked_with_active_block_recently"); },
                Self::mastery_chance_to_evade_melee_attacks_final(PlusPercentage(v)) => { total += v; variant = Some("mastery_chance_to_evade_melee_attacks_final"); },
                Self::damage_per_1_block_chance(PlusPercentage(v)) => { total += v; variant = Some("damage_per_1_block_chance"); },
                Self::life_regeneration_rate_while_stationary(PlusPercentage(v)) => { total += v; variant = Some("life_regeneration_rate_while_stationary"); },
                Self::damage_while_unarmed(PlusPercentage(v)) => { total += v; variant = Some("damage_while_unarmed"); },
                Self::spell_area_of_effect(PlusPercentage(v)) => { total += v; variant = Some("spell_area_of_effect"); },
                Self::accuracy_rating_vs_enemies_in_close_range(PlusPercentage(v)) => { total += v; variant = Some("accuracy_rating_vs_enemies_in_close_range"); },
                Self::damage_while_totem_active(PlusPercentage(v)) => { total += v; variant = Some("damage_while_totem_active"); },
                Self::block_chance(PlusPercentage(v)) => { total += v; variant = Some("block_chance"); },
                Self::link_skill_duration(PlusPercentage(v)) => { total += v; variant = Some("link_skill_duration"); },
                Self::quarterstaff_attack_speed(PlusPercentage(v)) => { total += v; variant = Some("quarterstaff_attack_speed"); },
                Self::hit_damage_vs_ignited_enemies(PlusPercentage(v)) => { total += v; variant = Some("hit_damage_vs_ignited_enemies"); },
                Self::melee_critical_strike_chance_when_on_full_life(PlusPercentage(v)) => { total += v; variant = Some("melee_critical_strike_chance_when_on_full_life"); },
                Self::attack_speed_per_200_accuracy_rating(PlusPercentage(v)) => { total += v; variant = Some("attack_speed_per_200_accuracy_rating"); },
                Self::map_ritual_rewards_reroll_cost_final(PlusPercentage(v)) => { total += v; variant = Some("map_ritual_rewards_reroll_cost_final"); },
                Self::global_defences(PlusPercentage(v)) => { total += v; variant = Some("global_defences"); },
                Self::attack_speed_if_have_been_hit_recently(PlusPercentage(v)) => { total += v; variant = Some("attack_speed_if_have_been_hit_recently"); },
                Self::map_delirium_doodads_final(PlusPercentage(v)) => { total += v; variant = Some("map_delirium_doodads_final"); },
                Self::spell_damage_while_wielding_melee_weapon(PlusPercentage(v)) => { total += v; variant = Some("spell_damage_while_wielding_melee_weapon"); },
                Self::area_of_effect_if_enemy_stunned_with_two_handed_melee_weapon_recently(PlusPercentage(v)) => { total += v; variant = Some("area_of_effect_if_enemy_stunned_with_two_handed_melee_weapon_recently"); },
                Self::cast_speed_for_4_seconds_on_attack(PlusPercentage(v)) => { total += v; variant = Some("cast_speed_for_4_seconds_on_attack"); },
                Self::map_mod_effect_per_tower_affecting_area(PlusPercentage(v)) => { total += v; variant = Some("map_mod_effect_per_tower_affecting_area"); },
                Self::attack_speed_if_rare_or_unique_enemy_nearby(PlusPercentage(v)) => { total += v; variant = Some("attack_speed_if_rare_or_unique_enemy_nearby"); },
                Self::armour_break_duration(PlusPercentage(v)) => { total += v; variant = Some("armour_break_duration"); },
                Self::flask_charges_used(PlusPercentage(v)) => { total += v; variant = Some("flask_charges_used"); },
                Self::distance_scaled_accuracy_rating_penalty(PlusPercentage(v)) => { total += v; variant = Some("distance_scaled_accuracy_rating_penalty"); },
                Self::mana_regeneration_rate_if_enemy_shocked_recently(PlusPercentage(v)) => { total += v; variant = Some("mana_regeneration_rate_if_enemy_shocked_recently"); },
                Self::quarterstaff_accuracy_rating(PlusPercentage(v)) => { total += v; variant = Some("quarterstaff_accuracy_rating"); },
                Self::guard_flask_effect(PlusPercentage(v)) => { total += v; variant = Some("guard_flask_effect"); },
                Self::evasion_rating_if_you_have_hit_an_enemy_recently(PlusPercentage(v)) => { total += v; variant = Some("evasion_rating_if_you_have_hit_an_enemy_recently"); },
                Self::base_bleed_duration(PlusPercentage(v)) => { total += v; variant = Some("base_bleed_duration"); },
                Self::map_affliction_encounter_boss_chance(PlusPercentage(v)) => { total += v; variant = Some("map_affliction_encounter_boss_chance"); },
                Self::energy_shield_from_focus(PlusPercentage(v)) => { total += v; variant = Some("energy_shield_from_focus"); },
                Self::shock_chance_vs_electrocuted_enemies(PlusPercentage(v)) => { total += v; variant = Some("shock_chance_vs_electrocuted_enemies"); },
                Self::attack_damage_while_ally_in_presence(PlusPercentage(v)) => { total += v; variant = Some("attack_damage_while_ally_in_presence"); },
                Self::trap_damage(PlusPercentage(v)) => { total += v; variant = Some("trap_damage"); },
                Self::armour_break_amount_vs_enemies_affected_by_ailments(PlusPercentage(v)) => { total += v; variant = Some("armour_break_amount_vs_enemies_affected_by_ailments"); },
                Self::map_player_shrine_buff_effect_on_self(PlusPercentage(v)) => { total += v; variant = Some("map_player_shrine_buff_effect_on_self"); },
                Self::ignite_duration(PlusPercentage(v)) => { total += v; variant = Some("ignite_duration"); },
                Self::charm_charges_gained(PlusPercentage(v)) => { total += v; variant = Some("charm_charges_gained"); },
                Self::melee_damage_vs_immobilised_enemies(PlusPercentage(v)) => { total += v; variant = Some("melee_damage_vs_immobilised_enemies"); },
                Self::map_basic_currency_drop_chance_in_swamp_and_water_biome(PlusPercentage(v)) => { total += v; variant = Some("map_basic_currency_drop_chance_in_swamp_and_water_biome"); },
                Self::ignite_shock_chill_duration(PlusPercentage(v)) => { total += v; variant = Some("ignite_shock_chill_duration"); },
                Self::critical_strike_chance_vs_enemies_without_elemental_status_ailments(PlusPercentage(v)) => { total += v; variant = Some("critical_strike_chance_vs_enemies_without_elemental_status_ailments"); },
                Self::deadeye_movement_speed_penalty_final_while_performing_action(PlusPercentage(v)) => { total += v; variant = Some("deadeye_movement_speed_penalty_final_while_performing_action"); },
                Self::allies_in_presence_attack_speed(PlusPercentage(v)) => { total += v; variant = Some("allies_in_presence_attack_speed"); },
                Self::lightning_damage(PlusPercentage(v)) => { total += v; variant = Some("lightning_damage"); },
                Self::armour_evasion_while_leeching(PlusPercentage(v)) => { total += v; variant = Some("armour_evasion_while_leeching"); },
                Self::totem_life(PlusPercentage(v)) => { total += v; variant = Some("totem_life"); },
                Self::movement_speed_while_dual_wielding(PlusPercentage(v)) => { total += v; variant = Some("movement_speed_while_dual_wielding"); },
                Self::spell_damage(PlusPercentage(v)) => { total += v; variant = Some("spell_damage"); },
                Self::spell_area_damage(PlusPercentage(v)) => { total += v; variant = Some("spell_area_damage"); },
                Self::flask_life_to_recover(PlusPercentage(v)) => { total += v; variant = Some("flask_life_to_recover"); },
                Self::attack_damage_when_on_full_life(PlusPercentage(v)) => { total += v; variant = Some("attack_damage_when_on_full_life"); },
                Self::enemies_cursed_by_you_have_life_regeneration_rate(PlusPercentage(v)) => { total += v; variant = Some("enemies_cursed_by_you_have_life_regeneration_rate"); },
                Self::elemental_storm_cooldown_recovery_speed_final(PlusPercentage(v)) => { total += v; variant = Some("elemental_storm_cooldown_recovery_speed_final"); },
                Self::hit_damage_electrocute_multiplier(PlusPercentage(v)) => { total += v; variant = Some("hit_damage_electrocute_multiplier"); },
                Self::maximum_fire_damage_resistance_per_40_uncapped_fire_damage_resistance(PlusPercentage(v)) => { total += v; variant = Some("maximum_fire_damage_resistance_per_40_uncapped_fire_damage_resistance"); },
                Self::life_recovery_rate(PlusPercentage(v)) => { total += v; variant = Some("life_recovery_rate"); },
                Self::damage_with_herald_skills(PlusPercentage(v)) => { total += v; variant = Some("damage_with_herald_skills"); },
                Self::one_handed_melee_accuracy_rating(PlusPercentage(v)) => { total += v; variant = Some("one_handed_melee_accuracy_rating"); },
                Self::deadeye_projectile_damage_final_max_as_distance_travelled_decreases(PlusPercentage(v)) => { total += v; variant = Some("deadeye_projectile_damage_final_max_as_distance_travelled_decreases"); },
                Self::cast_speed_for_cold_skills(PlusPercentage(v)) => { total += v; variant = Some("cast_speed_for_cold_skills"); },
                Self::area_damage(PlusPercentage(v)) => { total += v; variant = Some("area_damage"); },
                Self::damage_for_4_seconds_on_crit(PlusPercentage(v)) => { total += v; variant = Some("damage_for_4_seconds_on_crit"); },
                Self::map_strongbox_mod_effect(PlusPercentage(v)) => { total += v; variant = Some("map_strongbox_mod_effect"); },
                Self::armour_and_evasion_on_low_life(PlusPercentage(v)) => { total += v; variant = Some("armour_and_evasion_on_low_life"); },
                Self::body_armour(PlusPercentage(v)) => { total += v; variant = Some("body_armour"); },
                Self::cold_exposure_effect(PlusPercentage(v)) => { total += v; variant = Some("cold_exposure_effect"); },
                Self::electrocuted_enemy_damage_taken(PlusPercentage(v)) => { total += v; variant = Some("electrocuted_enemy_damage_taken"); },
                Self::damage_against_enemies_with_fully_broken_armour(PlusPercentage(v)) => { total += v; variant = Some("damage_against_enemies_with_fully_broken_armour"); },
                Self::map_socket_currency_drop_chance_in_grass_biome(PlusPercentage(v)) => { total += v; variant = Some("map_socket_currency_drop_chance_in_grass_biome"); },
                Self::minion_accuracy_rating(PlusPercentage(v)) => { total += v; variant = Some("minion_accuracy_rating"); },
                Self::spear_attack_speed(PlusPercentage(v)) => { total += v; variant = Some("spear_attack_speed"); },
                Self::map_breach_time_passed(PlusPercentage(v)) => { total += v; variant = Some("map_breach_time_passed"); },
                Self::spirit(PlusPercentage(v)) => { total += v; variant = Some("spirit"); },
                Self::critical_strike_chance_if_enemy_killed_recently(PlusPercentage(v)) => { total += v; variant = Some("critical_strike_chance_if_enemy_killed_recently"); },
                Self::armour_if_you_havent_been_hit_recently(PlusPercentage(v)) => { total += v; variant = Some("armour_if_you_havent_been_hit_recently"); },
                Self::map_magic_pack_size(PlusPercentage(v)) => { total += v; variant = Some("map_magic_pack_size"); },
                Self::map_expedition_rare_monsters(PlusPercentage(v)) => { total += v; variant = Some("map_expedition_rare_monsters"); },
                Self::cast_speed_when_on_low_life(PlusPercentage(v)) => { total += v; variant = Some("cast_speed_when_on_low_life"); },
                Self::knockback_distance(PlusPercentage(v)) => { total += v; variant = Some("knockback_distance"); },
                Self::notable_knockback_distance_final_for_blocked_hits(PlusPercentage(v)) => { total += v; variant = Some("notable_knockback_distance_final_for_blocked_hits"); },
                Self::attack_speed_per_15_dex(PlusPercentage(v)) => { total += v; variant = Some("attack_speed_per_15_dex"); },
                Self::maximum_life(PlusPercentage(v)) => { total += v; variant = Some("maximum_life"); },
                Self::maximum_life_mana_and_energy_shield(PlusPercentage(v)) => { total += v; variant = Some("maximum_life_mana_and_energy_shield"); },
                Self::chill_effectiveness_on_self(PlusPercentage(v)) => { total += v; variant = Some("chill_effectiveness_on_self"); },
                Self::skill_area_of_effect_when_unarmed(PlusPercentage(v)) => { total += v; variant = Some("skill_area_of_effect_when_unarmed"); },
                Self::expedition_monsters_logbook_chance(PlusPercentage(v)) => { total += v; variant = Some("expedition_monsters_logbook_chance"); },
                Self::trap_throwing_speed(PlusPercentage(v)) => { total += v; variant = Some("trap_throwing_speed"); },
                Self::map_monster_tre(PlusPercentage(v)) => { total += v; variant = Some("map_monster_tre"); },
                Self::offering_life(PlusPercentage(v)) => { total += v; variant = Some("offering_life"); },
                Self::energy_shield_if_consumed_power_charge_recently(PlusPercentage(v)) => { total += v; variant = Some("energy_shield_if_consumed_power_charge_recently"); },
                Self::charm_effect(PlusPercentage(v)) => { total += v; variant = Some("charm_effect"); },
                Self::map_dropped_maps_rarity(PlusPercentage(v)) => { total += v; variant = Some("map_dropped_maps_rarity"); },
                Self::minion_damage_while_you_have_at_least_two_different_active_offerings(PlusPercentage(v)) => { total += v; variant = Some("minion_damage_while_you_have_at_least_two_different_active_offerings"); },
                Self::minion_resummon_speed(PlusPercentage(v)) => { total += v; variant = Some("minion_resummon_speed"); },
                Self::totem_duration(PlusPercentage(v)) => { total += v; variant = Some("totem_duration"); },
                Self::quarterstaff_daze_build_up(PlusPercentage(v)) => { total += v; variant = Some("quarterstaff_daze_build_up"); },
                Self::accuracy_rating_equal_to__attack_critical_strike_chance(PlusPercentage(v)) => { total += v; variant = Some("accuracy_rating_equal_to__attack_critical_strike_chance"); },
                Self::recoup_speed(PlusPercentage(v)) => { total += v; variant = Some("recoup_speed"); },
                Self::warcry_skill_area_of_effect(PlusPercentage(v)) => { total += v; variant = Some("warcry_skill_area_of_effect"); },
                Self::jagged_ground_effect(PlusPercentage(v)) => { total += v; variant = Some("jagged_ground_effect"); },
                Self::unarmed_attack_speed(PlusPercentage(v)) => { total += v; variant = Some("unarmed_attack_speed"); },
                Self::mana_regeneration_rate_while_stationary(PlusPercentage(v)) => { total += v; variant = Some("mana_regeneration_rate_while_stationary"); },
                Self::crossbow_critical_strike_chance(PlusPercentage(v)) => { total += v; variant = Some("crossbow_critical_strike_chance"); },
                Self::map_ritual_voodoo_king_key_chance(PlusPercentage(v)) => { total += v; variant = Some("map_ritual_voodoo_king_key_chance"); },
                Self::projectile_ailment_chance(PlusPercentage(v)) => { total += v; variant = Some("projectile_ailment_chance"); },
                Self::maximum_mana(PlusPercentage(v)) => { total += v; variant = Some("maximum_mana"); },
                Self::poison_effect_vs_non_poisoned_enemies(PlusPercentage(v)) => { total += v; variant = Some("poison_effect_vs_non_poisoned_enemies"); },
                Self::chronomancer_every_8_seconds_final_cast_speed_for_4_seconds(PlusPercentage(v)) => { total += v; variant = Some("chronomancer_every_8_seconds_final_cast_speed_for_4_seconds"); },
                Self::shock_duration(PlusPercentage(v)) => { total += v; variant = Some("shock_duration"); },
                Self::crossbow_damage_per_ammo_type_fired_in_past_10_seconds(PlusPercentage(v)) => { total += v; variant = Some("crossbow_damage_per_ammo_type_fired_in_past_10_seconds"); },
                Self::movement_speed_if_pinned_enemy_recently(PlusPercentage(v)) => { total += v; variant = Some("movement_speed_if_pinned_enemy_recently"); },
                Self::base_damaging_ailment_effect(PlusPercentage(v)) => { total += v; variant = Some("base_damaging_ailment_effect"); },
                Self::map_ritual_monster_damage_for_each_time_revived(PlusPercentage(v)) => { total += v; variant = Some("map_ritual_monster_damage_for_each_time_revived"); },
                Self::passive_tree_mace_damage_final_vs_heavy_stunned_enemies(PlusPercentage(v)) => { total += v; variant = Some("passive_tree_mace_damage_final_vs_heavy_stunned_enemies"); },
                Self::physical_attack_damage(PlusPercentage(v)) => { total += v; variant = Some("physical_attack_damage"); },
                Self::map_expedition_vendor_reroll_currency_quantity(PlusPercentage(v)) => { total += v; variant = Some("map_expedition_vendor_reroll_currency_quantity"); },
                Self::support_anticipation_charge_gain_frequency(PlusPercentage(v)) => { total += v; variant = Some("support_anticipation_charge_gain_frequency"); },
                Self::poison_duration_per_poison_applied_recently(PlusPercentage(v)) => { total += v; variant = Some("poison_duration_per_poison_applied_recently"); },
                Self::damage_while_dual_wielding(PlusPercentage(v)) => { total += v; variant = Some("damage_while_dual_wielding"); },
                Self::attack_skills_damage_while_holding_shield(PlusPercentage(v)) => { total += v; variant = Some("attack_skills_damage_while_holding_shield"); },
                Self::ignite_chance(PlusPercentage(v)) => { total += v; variant = Some("ignite_chance"); },
                Self::energy_shield_recharge_rate(PlusPercentage(v)) => { total += v; variant = Some("energy_shield_recharge_rate"); },
                Self::base_bleeding_effect(PlusPercentage(v)) => { total += v; variant = Some("base_bleeding_effect"); },
                Self::quarterstaff_damage(PlusPercentage(v)) => { total += v; variant = Some("quarterstaff_damage"); },
                Self::daze_build_up(PlusPercentage(v)) => { total += v; variant = Some("daze_build_up"); },
                Self::attack_and_cast_speed_on_placing_totem(PlusPercentage(v)) => { total += v; variant = Some("attack_and_cast_speed_on_placing_totem"); },
                Self::minion_evasion_rating(PlusPercentage(v)) => { total += v; variant = Some("minion_evasion_rating"); },
                Self::atlas_keystone_prefix_or_suffix_mod_effect_final(PlusPercentage(v)) => { total += v; variant = Some("atlas_keystone_prefix_or_suffix_mod_effect_final"); },
                Self::map_ritual_monster_spawning_speed(PlusPercentage(v)) => { total += v; variant = Some("map_ritual_monster_spawning_speed"); },
                Self::map_gold_drop_chance_in_mountain_biome(PlusPercentage(v)) => { total += v; variant = Some("map_gold_drop_chance_in_mountain_biome"); },
                Self::reload_speed(PlusPercentage(v)) => { total += v; variant = Some("reload_speed"); },
                Self::one_handed_attack_speed(PlusPercentage(v)) => { total += v; variant = Some("one_handed_attack_speed"); },
                Self::elemental_damage(PlusPercentage(v)) => { total += v; variant = Some("elemental_damage"); },
                Self::life_regeneration_rate_while_using_life_flask(PlusPercentage(v)) => { total += v; variant = Some("life_regeneration_rate_while_using_life_flask"); },
                Self::critical_hit_damage_bonus_if_consumed_power_charge_recently(PlusPercentage(v)) => { total += v; variant = Some("critical_hit_damage_bonus_if_consumed_power_charge_recently"); },
                Self::hit_damage_electrocute_multiplier_vs_shocked_enemies(PlusPercentage(v)) => { total += v; variant = Some("hit_damage_electrocute_multiplier_vs_shocked_enemies"); },
                Self::attack_and_cast_speed_with_elemental_skills(PlusPercentage(v)) => { total += v; variant = Some("attack_and_cast_speed_with_elemental_skills"); },
                Self::ailment_effect(PlusPercentage(v)) => { total += v; variant = Some("ailment_effect"); },
                Self::map_rare_chest_amount(PlusPercentage(v)) => { total += v; variant = Some("map_rare_chest_amount"); },
                Self::critical_strike_chance_vs_enemies_with_lightning_exposure(PlusPercentage(v)) => { total += v; variant = Some("critical_strike_chance_vs_enemies_with_lightning_exposure"); },
                Self::map_ritual_magic_monsters(PlusPercentage(v)) => { total += v; variant = Some("map_ritual_magic_monsters"); },
                Self::base_poison_duration(PlusPercentage(v)) => { total += v; variant = Some("base_poison_duration"); },
                Self::one_handed_melee_attack_speed(PlusPercentage(v)) => { total += v; variant = Some("one_handed_melee_attack_speed"); },
                Self::lightning_damage_while_affected_by_herald_of_thunder(PlusPercentage(v)) => { total += v; variant = Some("lightning_damage_while_affected_by_herald_of_thunder"); },
                Self::tablet_effect_when_opening_a_map(PlusPercentage(v)) => { total += v; variant = Some("tablet_effect_when_opening_a_map"); },
                Self::flask_life_recovery_rate(PlusPercentage(v)) => { total += v; variant = Some("flask_life_recovery_rate"); },
                Self::warcry_speed(PlusPercentage(v)) => { total += v; variant = Some("warcry_speed"); },
                Self::freeze_threshold(PlusPercentage(v)) => { total += v; variant = Some("freeze_threshold"); },
                Self::map_expedition_elite_marker_count(PlusPercentage(v)) => { total += v; variant = Some("map_expedition_elite_marker_count"); },
                Self::hit_damage_vs_chilled_enemies(PlusPercentage(v)) => { total += v; variant = Some("hit_damage_vs_chilled_enemies"); },
                Self::map_affliction_reward_progress_on_kill(PlusPercentage(v)) => { total += v; variant = Some("map_affliction_reward_progress_on_kill"); },
                Self::map_item_drop_quantity(PlusPercentage(v)) => { total += v; variant = Some("map_item_drop_quantity"); },
                Self::deadeye_projectile_damage_final_max_as_distance_travelled_increases(PlusPercentage(v)) => { total += v; variant = Some("deadeye_projectile_damage_final_max_as_distance_travelled_increases"); },
                Self::elemental_damage_if_enemy_ignited_recently(PlusPercentage(v)) => { total += v; variant = Some("elemental_damage_if_enemy_ignited_recently"); },
                Self::spell_skill_projectile_speed(PlusPercentage(v)) => { total += v; variant = Some("spell_skill_projectile_speed"); },
                Self::maximum_energy_shield_from_body_armour(PlusPercentage(v)) => { total += v; variant = Some("maximum_energy_shield_from_body_armour"); },
                Self::map_boss_item_rarity(PlusPercentage(v)) => { total += v; variant = Some("map_boss_item_rarity"); },
                Self::withered_effect(PlusPercentage(v)) => { total += v; variant = Some("withered_effect"); },
                Self::placing_traps_cooldown_recovery(PlusPercentage(v)) => { total += v; variant = Some("placing_traps_cooldown_recovery"); },
                Self::curse_effect(PlusPercentage(v)) => { total += v; variant = Some("curse_effect"); },
                Self::triggered_spell_spell_damage(PlusPercentage(v)) => { total += v; variant = Some("triggered_spell_spell_damage"); },
                Self::empowered_attack_damage(PlusPercentage(v)) => { total += v; variant = Some("empowered_attack_damage"); },
                Self::maximum_energy_shield(PlusPercentage(v)) => { total += v; variant = Some("maximum_energy_shield"); },
                Self::damage_while_using_charm(PlusPercentage(v)) => { total += v; variant = Some("damage_while_using_charm"); },
                Self::damage_vs_enemies_on_low_life(PlusPercentage(v)) => { total += v; variant = Some("damage_vs_enemies_on_low_life"); },
                Self::elemental_damage_if_enemy_chilled_recently(PlusPercentage(v)) => { total += v; variant = Some("elemental_damage_if_enemy_chilled_recently"); },
                Self::map_delirium_boss_life(PlusPercentage(v)) => { total += v; variant = Some("map_delirium_boss_life"); },
                Self::armour_while_surrounded(PlusPercentage(v)) => { total += v; variant = Some("armour_while_surrounded"); },
                Self::curse_effect_on_self(PlusPercentage(v)) => { total += v; variant = Some("curse_effect_on_self"); },
                Self::damage_to_rare_and_unique_enemies(PlusPercentage(v)) => { total += v; variant = Some("damage_to_rare_and_unique_enemies"); },
                Self::link_skill_buff_effect(PlusPercentage(v)) => { total += v; variant = Some("link_skill_buff_effect"); },
                Self::stun_threshold_during_empowered_attacks(PlusPercentage(v)) => { total += v; variant = Some("stun_threshold_during_empowered_attacks"); },
                Self::map_mod_effect_per_mod(PlusPercentage(v)) => { total += v; variant = Some("map_mod_effect_per_mod"); },
                Self::damage_per_5_of_your_lowest_attribute(PlusPercentage(v)) => { total += v; variant = Some("damage_per_5_of_your_lowest_attribute"); },
                Self::attack_area_of_effect(PlusPercentage(v)) => { total += v; variant = Some("attack_area_of_effect"); },
                Self::area_of_effect_if_have_stunned_an_enemy_recently(PlusPercentage(v)) => { total += v; variant = Some("area_of_effect_if_have_stunned_an_enemy_recently"); },
                Self::quarterstaff_critical_strike_chance(PlusPercentage(v)) => { total += v; variant = Some("quarterstaff_critical_strike_chance"); },
                Self::claw_accuracy_rating(PlusPercentage(v)) => { total += v; variant = Some("claw_accuracy_rating"); },
                Self::cold_damage_while_affected_by_herald_of_ice(PlusPercentage(v)) => { total += v; variant = Some("cold_damage_while_affected_by_herald_of_ice"); },
                Self::map_boss_damage(PlusPercentage(v)) => { total += v; variant = Some("map_boss_damage"); },
                Self::armour_if_have_been_hit_recently(PlusPercentage(v)) => { total += v; variant = Some("armour_if_have_been_hit_recently"); },
                Self::evasion_rating_if_you_dodge_rolled_recently(PlusPercentage(v)) => { total += v; variant = Some("evasion_rating_if_you_dodge_rolled_recently"); },
                Self::fire_damage_while_affected_by_herald_of_ash(PlusPercentage(v)) => { total += v; variant = Some("fire_damage_while_affected_by_herald_of_ash"); },
                Self::hinder_duration(PlusPercentage(v)) => { total += v; variant = Some("hinder_duration"); },
                Self::base_poison_effect(PlusPercentage(v)) => { total += v; variant = Some("base_poison_effect"); },
                Self::mana_recovery_rate(PlusPercentage(v)) => { total += v; variant = Some("mana_recovery_rate"); },
                Self::staff_attack_area_of_effect(PlusPercentage(v)) => { total += v; variant = Some("staff_attack_area_of_effect"); },
                Self::marked_enemy_accuracy_rating(PlusPercentage(v)) => { total += v; variant = Some("marked_enemy_accuracy_rating"); },
                Self::melee_damage_vs_heavy_stunned_enemies(PlusPercentage(v)) => { total += v; variant = Some("melee_damage_vs_heavy_stunned_enemies"); },
                Self::damage_if_you_have_consumed_a_corpse_recently(PlusPercentage(v)) => { total += v; variant = Some("damage_if_you_have_consumed_a_corpse_recently"); },
                Self::map_boss_dropped_item_quantity(PlusPercentage(v)) => { total += v; variant = Some("map_boss_dropped_item_quantity"); },
                Self::projectile_damage_vs_enemies_within_2m_distance(PlusPercentage(v)) => { total += v; variant = Some("projectile_damage_vs_enemies_within_2m_distance"); },
                Self::critical_strike_chance_against_enemies_on_full_life(PlusPercentage(v)) => { total += v; variant = Some("critical_strike_chance_against_enemies_on_full_life"); },
                Self::critical_strike_chance_vs_bleeding_enemies(PlusPercentage(v)) => { total += v; variant = Some("critical_strike_chance_vs_bleeding_enemies"); },
                Self::base_movement_velocity(PlusPercentage(v)) => { total += v; variant = Some("base_movement_velocity"); },
                Self::fire_damage(PlusPercentage(v)) => { total += v; variant = Some("fire_damage"); },
                Self::jagged_ground_enemy_damage_taken(PlusPercentage(v)) => { total += v; variant = Some("jagged_ground_enemy_damage_taken"); },
                Self::base_ignite_effect(PlusPercentage(v)) => { total += v; variant = Some("base_ignite_effect"); },
                Self::attack_and_cast_speed(PlusPercentage(v)) => { total += v; variant = Some("attack_and_cast_speed"); },
                Self::spear_damage(PlusPercentage(v)) => { total += v; variant = Some("spear_damage"); },
                Self::minion_movement_speed(PlusPercentage(v)) => { total += v; variant = Some("minion_movement_speed"); },
                Self::map_pack_size(PlusPercentage(v)) => { total += v; variant = Some("map_pack_size"); },
                Self::totem_placement_range(PlusPercentage(v)) => { total += v; variant = Some("totem_placement_range"); },
                Self::final_repeat_of_spells_area_of_effect(PlusPercentage(v)) => { total += v; variant = Some("final_repeat_of_spells_area_of_effect"); },
                Self::map_expedition_relic_mod_effect(PlusPercentage(v)) => { total += v; variant = Some("map_expedition_relic_mod_effect"); },
                Self::rage_decay_speed(PlusPercentage(v)) => { total += v; variant = Some("rage_decay_speed"); },
                Self::heavy_stun_poise_decay_rate(PlusPercentage(v)) => { total += v; variant = Some("heavy_stun_poise_decay_rate"); },
                Self::base_skill_area_of_effect(PlusPercentage(v)) => { total += v; variant = Some("base_skill_area_of_effect"); },
                Self::quiver_mod_effect(PlusPercentage(v)) => { total += v; variant = Some("quiver_mod_effect"); },
                Self::map_expedition_fuse_burn_time(PlusPercentage(v)) => { total += v; variant = Some("map_expedition_fuse_burn_time"); },
                Self::chill_and_freeze_duration(PlusPercentage(v)) => { total += v; variant = Some("chill_and_freeze_duration"); },
                Self::movement_speed_while_using_charm(PlusPercentage(v)) => { total += v; variant = Some("movement_speed_while_using_charm"); },
                Self::stun_threshold_per_number_of_times_stunned_recently(PlusPercentage(v)) => { total += v; variant = Some("stun_threshold_per_number_of_times_stunned_recently"); },
                Self::totem_damage(PlusPercentage(v)) => { total += v; variant = Some("totem_damage"); },
                Self::charges_gained(PlusPercentage(v)) => { total += v; variant = Some("charges_gained"); },
                Self::life_regeneration_rate_while_on_low_life(PlusPercentage(v)) => { total += v; variant = Some("life_regeneration_rate_while_on_low_life"); },
                Self::base_cost(PlusPercentage(v)) => { total += v; variant = Some("base_cost"); },
                Self::melee_hit_damage_stun_multiplier(PlusPercentage(v)) => { total += v; variant = Some("melee_hit_damage_stun_multiplier"); },
                Self::freeze_duration(PlusPercentage(v)) => { total += v; variant = Some("freeze_duration"); },
                Self::critical_strike_chance_while_dual_wielding(PlusPercentage(v)) => { total += v; variant = Some("critical_strike_chance_while_dual_wielding"); },
                Self::stormweaver_shock_duration_final(PlusPercentage(v)) => { total += v; variant = Some("stormweaver_shock_duration_final"); },
                Self::global_gem_attribute_requirements_final_from_gemling(PlusPercentage(v)) => { total += v; variant = Some("global_gem_attribute_requirements_final_from_gemling"); },
                Self::map_expedition_artifact_quantity(PlusPercentage(v)) => { total += v; variant = Some("map_expedition_artifact_quantity"); },
                Self::mana_recovery_rate_while_affected_by_a_mana_flask(PlusPercentage(v)) => { total += v; variant = Some("mana_recovery_rate_while_affected_by_a_mana_flask"); },
                Self::sword_attack_speed(PlusPercentage(v)) => { total += v; variant = Some("sword_attack_speed"); },
                Self::map_ritual_defer_reward_tribute_cost(PlusPercentage(v)) => { total += v; variant = Some("map_ritual_defer_reward_tribute_cost"); },
                Self::accuracy_rating_vs_rare_or_unique_enemy(PlusPercentage(v)) => { total += v; variant = Some("accuracy_rating_vs_rare_or_unique_enemy"); },
                Self::spell_staff_damage(PlusPercentage(v)) => { total += v; variant = Some("spell_staff_damage"); },
                Self::thorns_damage(PlusPercentage(v)) => { total += v; variant = Some("thorns_damage"); },
                Self::damage_while_affected_by_a_herald(PlusPercentage(v)) => { total += v; variant = Some("damage_while_affected_by_a_herald"); },
                Self::mark_effect(PlusPercentage(v)) => { total += v; variant = Some("mark_effect"); },
                Self::quarterstaff_hit_damage_stun_multiplier(PlusPercentage(v)) => { total += v; variant = Some("quarterstaff_hit_damage_stun_multiplier"); },
                Self::flask_life_and_mana_to_recover(PlusPercentage(v)) => { total += v; variant = Some("flask_life_and_mana_to_recover"); },
                Self::evasion_rating_when_on_full_life(PlusPercentage(v)) => { total += v; variant = Some("evasion_rating_when_on_full_life"); },
                Self::attack_damage_when_on_low_life(PlusPercentage(v)) => { total += v; variant = Some("attack_damage_when_on_low_life"); },
                Self::ice_crystal_maximum_life(PlusPercentage(v)) => { total += v; variant = Some("ice_crystal_maximum_life"); },
                Self::lightning_damage_per_10_intelligence(PlusPercentage(v)) => { total += v; variant = Some("lightning_damage_per_10_intelligence"); },
                Self::dagger_attack_speed(PlusPercentage(v)) => { total += v; variant = Some("dagger_attack_speed"); },
                Self::damaging_ailment_duration(PlusPercentage(v)) => { total += v; variant = Some("damaging_ailment_duration"); },
                Self::two_handed_melee_accuracy_rating(PlusPercentage(v)) => { total += v; variant = Some("two_handed_melee_accuracy_rating"); },
                Self::armour_break_amount(PlusPercentage(v)) => { total += v; variant = Some("armour_break_amount"); },
                Self::elemental_damage_if_enemy_shocked_recently(PlusPercentage(v)) => { total += v; variant = Some("elemental_damage_if_enemy_shocked_recently"); },
                Self::claw_critical_strike_chance(PlusPercentage(v)) => { total += v; variant = Some("claw_critical_strike_chance"); },
                Self::armour_if_hit_enemy_with_melee_attack_recently(PlusPercentage(v)) => { total += v; variant = Some("armour_if_hit_enemy_with_melee_attack_recently"); },
                Self::ascendancy_energy_generated_final(PlusPercentage(v)) => { total += v; variant = Some("ascendancy_energy_generated_final"); },
                Self::attack_speed_while_surrounded(PlusPercentage(v)) => { total += v; variant = Some("attack_speed_while_surrounded"); },
                Self::non_damaging_ailment_effect(PlusPercentage(v)) => { total += v; variant = Some("non_damaging_ailment_effect"); },
                Self::cast_speed_if_have_crit_recently(PlusPercentage(v)) => { total += v; variant = Some("cast_speed_if_have_crit_recently"); },
                Self::one_handed_melee_critical_strike_chance(PlusPercentage(v)) => { total += v; variant = Some("one_handed_melee_critical_strike_chance"); },
                Self::chaos_damage(PlusPercentage(v)) => { total += v; variant = Some("chaos_damage"); },
                Self::critical_hit_bleeding_effect(PlusPercentage(v)) => { total += v; variant = Some("critical_hit_bleeding_effect"); },
                Self::attack_and_cast_speed_while_affected_by_a_mana_flask(PlusPercentage(v)) => { total += v; variant = Some("attack_and_cast_speed_while_affected_by_a_mana_flask"); },
                Self::life_regeneration_rate_while_moving(PlusPercentage(v)) => { total += v; variant = Some("life_regeneration_rate_while_moving"); },
                Self::elemental_damage_with_attack_skills(PlusPercentage(v)) => { total += v; variant = Some("elemental_damage_with_attack_skills"); },
                Self::arrow_critical_strike_chance_max_as_distance_travelled_increases(PlusPercentage(v)) => { total += v; variant = Some("arrow_critical_strike_chance_max_as_distance_travelled_increases"); },
                Self::hit_damage_pin_multiplier(PlusPercentage(v)) => { total += v; variant = Some("hit_damage_pin_multiplier"); },
                Self::all_attributes(PlusPercentage(v)) => { total += v; variant = Some("all_attributes"); },
                Self::totem_skill_cast_speed(PlusPercentage(v)) => { total += v; variant = Some("totem_skill_cast_speed"); },
                Self::base_enemy_critical_strike_chance_against_self(PlusPercentage(v)) => { total += v; variant = Some("base_enemy_critical_strike_chance_against_self"); },
                Self::ailment_chance_vs_rare_or_unique_enemy(PlusPercentage(v)) => { total += v; variant = Some("ailment_chance_vs_rare_or_unique_enemy"); },
                Self::hit_damage_freeze_multiplier(PlusPercentage(v)) => { total += v; variant = Some("hit_damage_freeze_multiplier"); },
                Self::skill_speed(PlusPercentage(v)) => { total += v; variant = Some("skill_speed"); },
                Self::minion_reservation(PlusPercentage(v)) => { total += v; variant = Some("minion_reservation"); },
                Self::damage_per_enemy_elemental_ailment(PlusPercentage(v)) => { total += v; variant = Some("damage_per_enemy_elemental_ailment"); },
                Self::evasion_rating_while_you_have_energy_shield(PlusPercentage(v)) => { total += v; variant = Some("evasion_rating_while_you_have_energy_shield"); },
                Self::mace_damage(PlusPercentage(v)) => { total += v; variant = Some("mace_damage"); },
                Self::critical_strike_chance_vs_dazed_enemies(PlusPercentage(v)) => { total += v; variant = Some("critical_strike_chance_vs_dazed_enemies"); },
                Self::melee_damage(PlusPercentage(v)) => { total += v; variant = Some("melee_damage"); },
                Self::attack_damage_vs_rare_or_unique_enemy(PlusPercentage(v)) => { total += v; variant = Some("attack_damage_vs_rare_or_unique_enemy"); },
                Self::axe_damage(PlusPercentage(v)) => { total += v; variant = Some("axe_damage"); },
                Self::buff_time_passed_only_buff_category(PlusPercentage(v)) => { total += v; variant = Some("buff_time_passed_only_buff_category"); },
                Self::attack_mana_cost(PlusPercentage(v)) => { total += v; variant = Some("attack_mana_cost"); },
                Self::base_all_ailment_duration_on_self(PlusPercentage(v)) => { total += v; variant = Some("base_all_ailment_duration_on_self"); },
                Self::damage_if_have_crit_in_past_8_seconds(PlusPercentage(v)) => { total += v; variant = Some("damage_if_have_crit_in_past_8_seconds"); },
                Self::spear_critical_strike_chance(PlusPercentage(v)) => { total += v; variant = Some("spear_critical_strike_chance"); },
                Self::totem_skill_attack_speed(PlusPercentage(v)) => { total += v; variant = Some("totem_skill_attack_speed"); },
                Self::ailment_threshold(PlusPercentage(v)) => { total += v; variant = Some("ailment_threshold"); },
                Self::stormweaver_chill_effect_final(PlusPercentage(v)) => { total += v; variant = Some("stormweaver_chill_effect_final"); },
                Self::power_charge_duration(PlusPercentage(v)) => { total += v; variant = Some("power_charge_duration"); },
                Self::attack_speed_while_holding_shield(PlusPercentage(v)) => { total += v; variant = Some("attack_speed_while_holding_shield"); },
                Self::melee_damage_at_close_range(PlusPercentage(v)) => { total += v; variant = Some("melee_damage_at_close_range"); },
                Self::while_curse_is_50_expired_curse_effect(PlusPercentage(v)) => { total += v; variant = Some("while_curse_is_50_expired_curse_effect"); },
                Self::lightning_exposure_effect(PlusPercentage(v)) => { total += v; variant = Some("lightning_exposure_effect"); },
                Self::energy_shield_recovery_rate(PlusPercentage(v)) => { total += v; variant = Some("energy_shield_recovery_rate"); },
                Self::mace_hit_damage_stun_multiplier(PlusPercentage(v)) => { total += v; variant = Some("mace_hit_damage_stun_multiplier"); },
                Self::unarmed_attack_skill_melee_dash_range(PlusPercentage(v)) => { total += v; variant = Some("unarmed_attack_skill_melee_dash_range"); },
                Self::critical_strike_chance(PlusPercentage(v)) => { total += v; variant = Some("critical_strike_chance"); },
                Self::dagger_critical_strike_chance(PlusPercentage(v)) => { total += v; variant = Some("dagger_critical_strike_chance"); },
                Self::claw_attack_speed(PlusPercentage(v)) => { total += v; variant = Some("claw_attack_speed"); },
                Self::attack_critical_strike_chance(PlusPercentage(v)) => { total += v; variant = Some("attack_critical_strike_chance"); },
                Self::minion_life_recovery_rate(PlusPercentage(v)) => { total += v; variant = Some("minion_life_recovery_rate"); },
                Self::mark_skill_mana_cost(PlusPercentage(v)) => { total += v; variant = Some("mark_skill_mana_cost"); },
                Self::map_ritual_deferred_rewards_are_offered_again_sooner(PlusPercentage(v)) => { total += v; variant = Some("map_ritual_deferred_rewards_are_offered_again_sooner"); },
                Self::flail_critical_strike_chance(PlusPercentage(v)) => { total += v; variant = Some("flail_critical_strike_chance"); },
                Self::daze_duration(PlusPercentage(v)) => { total += v; variant = Some("daze_duration"); },
                Self::damage_taken_on_low_life(PlusPercentage(v)) => { total += v; variant = Some("damage_taken_on_low_life"); },
                Self::base_mana_leech_amount(PlusPercentage(v)) => { total += v; variant = Some("base_mana_leech_amount"); },
                Self::link_skill_cast_speed(PlusPercentage(v)) => { total += v; variant = Some("link_skill_cast_speed"); },
                Self::skill_effect_duration(PlusPercentage(v)) => { total += v; variant = Some("skill_effect_duration"); },
                Self::damage_vs_frozen_enemies(PlusPercentage(v)) => { total += v; variant = Some("damage_vs_frozen_enemies"); },
                Self::witch_passive_maximum_lightning_damage_final(PlusPercentage(v)) => { total += v; variant = Some("witch_passive_maximum_lightning_damage_final"); },
                Self::aftershock_area_of_effect(PlusPercentage(v)) => { total += v; variant = Some("aftershock_area_of_effect"); },
                Self::spell_critical_strike_chance(PlusPercentage(v)) => { total += v; variant = Some("spell_critical_strike_chance"); },
                Self::hit_damage_vs_enemies_affected_by_ailments(PlusPercentage(v)) => { total += v; variant = Some("hit_damage_vs_enemies_affected_by_ailments"); },
                Self::debuff_time_passed(PlusPercentage(v)) => { total += v; variant = Some("debuff_time_passed"); },
                Self::movement_speed_if_enemy_killed_recently(PlusPercentage(v)) => { total += v; variant = Some("movement_speed_if_enemy_killed_recently"); },
                Self::map_ritual_daemon_damage(PlusPercentage(v)) => { total += v; variant = Some("map_ritual_daemon_damage"); },
                Self::map_map_item_drop_chance(PlusPercentage(v)) => { total += v; variant = Some("map_map_item_drop_chance"); },
                Self::maximum_darkness(PlusPercentage(v)) => { total += v; variant = Some("maximum_darkness"); },
                Self::base_debuff_slow_magnitude(PlusPercentage(v)) => { total += v; variant = Some("base_debuff_slow_magnitude"); },
                Self::damage(PlusPercentage(v)) => { total += v; variant = Some("damage"); },
                Self::cast_speed_when_on_full_life(PlusPercentage(v)) => { total += v; variant = Some("cast_speed_when_on_full_life"); },
                Self::ascendancy_titan_damage_reduction_rating_from_body_armour_final(PlusPercentage(v)) => { total += v; variant = Some("ascendancy_titan_damage_reduction_rating_from_body_armour_final"); },
                Self::culling_strike_threshold(PlusPercentage(v)) => { total += v; variant = Some("culling_strike_threshold"); },
                Self::gemling_skill_cost_final(PlusPercentage(v)) => { total += v; variant = Some("gemling_skill_cost_final"); },
                Self::arcane_surge_effect_on_self(PlusPercentage(v)) => { total += v; variant = Some("arcane_surge_effect_on_self"); },
                Self::strength(PlusPercentage(v)) => { total += v; variant = Some("strength"); },
                Self::evasion_rating_if_energy_shield_recharge_started_in_past_2_seconds(PlusPercentage(v)) => { total += v; variant = Some("evasion_rating_if_energy_shield_recharge_started_in_past_2_seconds"); },
                Self::block_recovery(PlusPercentage(v)) => { total += v; variant = Some("block_recovery"); },
                Self::ascendancy_pathfinder_flask_charges_gained_final(PlusPercentage(v)) => { total += v; variant = Some("ascendancy_pathfinder_flask_charges_gained_final"); },
                Self::weapon_swap_speed(PlusPercentage(v)) => { total += v; variant = Some("weapon_swap_speed"); },
                Self::damage_per_warcry_used_recently(PlusPercentage(v)) => { total += v; variant = Some("damage_per_warcry_used_recently"); },
                Self::base_life_leech_rate(PlusPercentage(v)) => { total += v; variant = Some("base_life_leech_rate"); },
                Self::flail_attack_speed(PlusPercentage(v)) => { total += v; variant = Some("flail_attack_speed"); },
                Self::critical_hit_damage_bonus_vs_enemies_within_2m_distance(PlusPercentage(v)) => { total += v; variant = Some("critical_hit_damage_bonus_vs_enemies_within_2m_distance"); },
                Self::dagger_damage(PlusPercentage(v)) => { total += v; variant = Some("dagger_damage"); },
                Self::damage_vs_burning_enemies(PlusPercentage(v)) => { total += v; variant = Some("damage_vs_burning_enemies"); },
                Self::curse_area_of_effect(PlusPercentage(v)) => { total += v; variant = Some("curse_area_of_effect"); },
                Self::map_breach_monster_quantity(PlusPercentage(v)) => { total += v; variant = Some("map_breach_monster_quantity"); },
                Self::stun_threshold_when_not_stunned_recently(PlusPercentage(v)) => { total += v; variant = Some("stun_threshold_when_not_stunned_recently"); },
                Self::mana_regeneration_rate_while_not_on_low_mana(PlusPercentage(v)) => { total += v; variant = Some("mana_regeneration_rate_while_not_on_low_mana"); },
                Self::spell_damage_if_have_crit_recently(PlusPercentage(v)) => { total += v; variant = Some("spell_damage_if_have_crit_recently"); },
                Self::life_regeneration_rate(PlusPercentage(v)) => { total += v; variant = Some("life_regeneration_rate"); },
                Self::attack_damage_per_75_armour_or_evasion_on_shield(PlusPercentage(v)) => { total += v; variant = Some("attack_damage_per_75_armour_or_evasion_on_shield"); },
                Self::totems_attack_speed_per_active_totem(PlusPercentage(v)) => { total += v; variant = Some("totems_attack_speed_per_active_totem"); },
                Self::offering_area_of_effect(PlusPercentage(v)) => { total += v; variant = Some("offering_area_of_effect"); },
                Self::energy_generated(PlusPercentage(v)) => { total += v; variant = Some("energy_generated"); },
                Self::attack_area_damage(PlusPercentage(v)) => { total += v; variant = Some("attack_area_damage"); },
                Self::titan_damage_final_against_heavy_stunned_enemies(PlusPercentage(v)) => { total += v; variant = Some("titan_damage_final_against_heavy_stunned_enemies"); },
                Self::area_of_effect_with_herald_skills(PlusPercentage(v)) => { total += v; variant = Some("area_of_effect_with_herald_skills"); },
                Self::cast_speed_per_num_unique_spells_cast_recently(PlusPercentage(v)) => { total += v; variant = Some("cast_speed_per_num_unique_spells_cast_recently"); },
                Self::sword_damage(PlusPercentage(v)) => { total += v; variant = Some("sword_damage"); },
                Self::attack_speed_during_flask_effect(PlusPercentage(v)) => { total += v; variant = Some("attack_speed_during_flask_effect"); },
                Self::map_number_of_magic_packs(PlusPercentage(v)) => { total += v; variant = Some("map_number_of_magic_packs"); },
                Self::mana_cost_while_not_low_mana(PlusPercentage(v)) => { total += v; variant = Some("mana_cost_while_not_low_mana"); },
                Self::map_player_damage_taken_vs_breach_monsters(PlusPercentage(v)) => { total += v; variant = Some("map_player_damage_taken_vs_breach_monsters"); },
                Self::attack_speed(PlusPercentage(v)) => { total += v; variant = Some("attack_speed"); },
                Self::evasion_if_hit_recently(PlusPercentage(v)) => { total += v; variant = Some("evasion_if_hit_recently"); },
                Self::critical_strike_chance_if_have_not_crit_recently(PlusPercentage(v)) => { total += v; variant = Some("critical_strike_chance_if_have_not_crit_recently"); },
                Self::shield_evasion_rating(PlusPercentage(v)) => { total += v; variant = Some("shield_evasion_rating"); },
                Self::attack_speed_if_you_have_not_attacked_recently(PlusPercentage(v)) => { total += v; variant = Some("attack_speed_if_you_have_not_attacked_recently"); },
                Self::infernalist_critical_strike_multiplier_final(PlusPercentage(v)) => { total += v; variant = Some("infernalist_critical_strike_multiplier_final"); },
                Self::stun_threshold_per_rage(PlusPercentage(v)) => { total += v; variant = Some("stun_threshold_per_rage"); },
                Self::projectile_damage_vs_enemies_further_than_6m_distance(PlusPercentage(v)) => { total += v; variant = Some("projectile_damage_vs_enemies_further_than_6m_distance"); },
                Self::jagged_ground_duration(PlusPercentage(v)) => { total += v; variant = Some("jagged_ground_duration"); },
                Self::witchhunter_up_to_damage_final_against_targets_with_missing_focus(PlusPercentage(v)) => { total += v; variant = Some("witchhunter_up_to_damage_final_against_targets_with_missing_focus"); },
                Self::evasion_rating(PlusPercentage(v)) => { total += v; variant = Some("evasion_rating"); },
                Self::master_of_elements_evasion_rating_final(PlusPercentage(v)) => { total += v; variant = Some("master_of_elements_evasion_rating_final"); },
                Self::skill_area_of_effect_if_enemy_killed_recently(PlusPercentage(v)) => { total += v; variant = Some("skill_area_of_effect_if_enemy_killed_recently"); },
                Self::evasion_and_physical_damage_reduction_rating(PlusPercentage(v)) => { total += v; variant = Some("evasion_and_physical_damage_reduction_rating"); },
                Self::base_cast_speed(PlusPercentage(v)) => { total += v; variant = Some("base_cast_speed"); },
                Self::base_stun_recovery(PlusPercentage(v)) => { total += v; variant = Some("base_stun_recovery"); },
                Self::attack_and_cast_speed_with_lightning_skills(PlusPercentage(v)) => { total += v; variant = Some("attack_and_cast_speed_with_lightning_skills"); },
                Self::map_non_unique_delirium_monsters_splinter_amount(PlusPercentage(v)) => { total += v; variant = Some("map_non_unique_delirium_monsters_splinter_amount"); },
                Self::charm_charges_used(PlusPercentage(v)) => { total += v; variant = Some("charm_charges_used"); },
                Self::map_ritual_monster_tankiness_for_each_time_revived(PlusPercentage(v)) => { total += v; variant = Some("map_ritual_monster_tankiness_for_each_time_revived"); },
                Self::small_passives_effect(PlusPercentage(v)) => { total += v; variant = Some("small_passives_effect"); },
                Self::damage_vs_shocked_enemies(PlusPercentage(v)) => { total += v; variant = Some("damage_vs_shocked_enemies"); },
                Self::base_slow_potency(PlusPercentage(v)) => { total += v; variant = Some("base_slow_potency"); },
                Self::physical_damage(PlusPercentage(v)) => { total += v; variant = Some("physical_damage"); },
                Self::fire_exposure_effect(PlusPercentage(v)) => { total += v; variant = Some("fire_exposure_effect"); },
                Self::movement_speed_while_you_have_energy_shield(PlusPercentage(v)) => { total += v; variant = Some("movement_speed_while_you_have_energy_shield"); },
                Self::attack_damage_while_surrounded(PlusPercentage(v)) => { total += v; variant = Some("attack_damage_while_surrounded"); },
                Self::damage_with_two_handed_weapons(PlusPercentage(v)) => { total += v; variant = Some("damage_with_two_handed_weapons"); },
                Self::map_mod_effect(PlusPercentage(v)) => { total += v; variant = Some("map_mod_effect"); },
                Self::damage_taken_final_per_tailwind(PlusPercentage(v)) => { total += v; variant = Some("damage_taken_final_per_tailwind"); },
                Self::shock_effect_with_critical_strikes(PlusPercentage(v)) => { total += v; variant = Some("shock_effect_with_critical_strikes"); },
                Self::base_elemental_status_ailment_duration(PlusPercentage(v)) => { total += v; variant = Some("base_elemental_status_ailment_duration"); },
                Self::energy_shield_from_helmet(PlusPercentage(v)) => { total += v; variant = Some("energy_shield_from_helmet"); },
                Self::damage_per_15_strength(PlusPercentage(v)) => { total += v; variant = Some("damage_per_15_strength"); },
                Self::projectile_damage(PlusPercentage(v)) => { total += v; variant = Some("projectile_damage"); },
                Self::mana_flask_charges_gained(PlusPercentage(v)) => { total += v; variant = Some("mana_flask_charges_gained"); },
                Self::axe_attack_speed(PlusPercentage(v)) => { total += v; variant = Some("axe_attack_speed"); },
                Self::critical_hit_damaging_ailment_effect(PlusPercentage(v)) => { total += v; variant = Some("critical_hit_damaging_ailment_effect"); },
                Self::minion_damage(PlusPercentage(v)) => { total += v; variant = Some("minion_damage"); },
                Self::enemies_in_presence_cooldown_recovery(PlusPercentage(v)) => { total += v; variant = Some("enemies_in_presence_cooldown_recovery"); },
                Self::movement_speed_during_flask_effect(PlusPercentage(v)) => { total += v; variant = Some("movement_speed_during_flask_effect"); },
                Self::marked_enemy_damage_taken(PlusPercentage(v)) => { total += v; variant = Some("marked_enemy_damage_taken"); },
                Self::map_affliction_secondary_wave_acceleration(PlusPercentage(v)) => { total += v; variant = Some("map_affliction_secondary_wave_acceleration"); },
                Self::shock_chance(PlusPercentage(v)) => { total += v; variant = Some("shock_chance"); },
                Self::movement_speed_if_cast_a_mark_spell_recently(PlusPercentage(v)) => { total += v; variant = Some("movement_speed_if_cast_a_mark_spell_recently"); },
                Self::energy_shield_recovery_rate_if_not_hit_recently(PlusPercentage(v)) => { total += v; variant = Some("energy_shield_recovery_rate_if_not_hit_recently"); },
                Self::base_frenzy_charge_duration(PlusPercentage(v)) => { total += v; variant = Some("base_frenzy_charge_duration"); },
                Self::global_item_attribute_requirements(PlusPercentage(v)) => { total += v; variant = Some("global_item_attribute_requirements"); },
                Self::damage_per_active_curse_on_self(PlusPercentage(v)) => { total += v; variant = Some("damage_per_active_curse_on_self"); },
                Self::bow_accuracy_rating(PlusPercentage(v)) => { total += v; variant = Some("bow_accuracy_rating"); },
                Self::hit_damage_stun_multiplier_vs_enemies_on_low_life(PlusPercentage(v)) => { total += v; variant = Some("hit_damage_stun_multiplier_vs_enemies_on_low_life"); },
                Self::cold_damage(PlusPercentage(v)) => { total += v; variant = Some("cold_damage"); },
                Self::minion_critical_strike_chance(PlusPercentage(v)) => { total += v; variant = Some("minion_critical_strike_chance"); },
                Self::body_armour_evasion_rating(PlusPercentage(v)) => { total += v; variant = Some("body_armour_evasion_rating"); },
                Self::shield_armour(PlusPercentage(v)) => { total += v; variant = Some("shield_armour"); },
                Self::ascendancy_warbringer_block_chance_final(PlusPercentage(v)) => { total += v; variant = Some("ascendancy_warbringer_block_chance_final"); },
                Self::map_player_shrine_effect_duration(PlusPercentage(v)) => { total += v; variant = Some("map_player_shrine_effect_duration"); },
                Self::map_ritual_omen_chance(PlusPercentage(v)) => { total += v; variant = Some("map_ritual_omen_chance"); },
                Self::ignite_effect_on_self(PlusPercentage(v)) => { total += v; variant = Some("ignite_effect_on_self"); },
                Self::flask_duration(PlusPercentage(v)) => { total += v; variant = Some("flask_duration"); },
                Self::minion_maximum_life(PlusPercentage(v)) => { total += v; variant = Some("minion_maximum_life"); },
                Self::defences_while_wielding_staff(PlusPercentage(v)) => { total += v; variant = Some("defences_while_wielding_staff"); },
                Self::witchhunter_armour_evasion_final(PlusPercentage(v)) => { total += v; variant = Some("witchhunter_armour_evasion_final"); },
                Self::map_breach_chests_final(PlusPercentage(v)) => { total += v; variant = Some("map_breach_chests_final"); },
                Self::damage_vs_dazed_enemies(PlusPercentage(v)) => { total += v; variant = Some("damage_vs_dazed_enemies"); },
                Self::elemental_damage_with_attack_skills_while_using_flask(PlusPercentage(v)) => { total += v; variant = Some("elemental_damage_with_attack_skills_while_using_flask"); },
                Self::spell_damage_while_es_full(PlusPercentage(v)) => { total += v; variant = Some("spell_damage_while_es_full"); },
                Self::map_number_of_rare_packs(PlusPercentage(v)) => { total += v; variant = Some("map_number_of_rare_packs"); },
                Self::bow_attack_speed(PlusPercentage(v)) => { total += v; variant = Some("bow_attack_speed"); },
                Self::melee_attack_speed(PlusPercentage(v)) => { total += v; variant = Some("melee_attack_speed"); },
                Self::summon_totem_cast_speed(PlusPercentage(v)) => { total += v; variant = Some("summon_totem_cast_speed"); },
                Self::damage_if_triggered_skill_recently(PlusPercentage(v)) => { total += v; variant = Some("damage_if_triggered_skill_recently"); },
                Self::attack_damage_for_4_seconds_on_cast(PlusPercentage(v)) => { total += v; variant = Some("attack_damage_for_4_seconds_on_cast"); },
                Self::attack_speed_while_dual_wielding(PlusPercentage(v)) => { total += v; variant = Some("attack_speed_while_dual_wielding"); },
                Self::damage_vs_enemies_on_full_life(PlusPercentage(v)) => { total += v; variant = Some("damage_vs_enemies_on_full_life"); },
                Self::stun_threshold(PlusPercentage(v)) => { total += v; variant = Some("stun_threshold"); },
                Self::map_pinnacle_boss_item_dropped_rarity_final(PlusPercentage(v)) => { total += v; variant = Some("map_pinnacle_boss_item_dropped_rarity_final"); },
                Self::chill_duration(PlusPercentage(v)) => { total += v; variant = Some("chill_duration"); },
                Self::spell_critical_strike_chance_while_wielding_staff(PlusPercentage(v)) => { total += v; variant = Some("spell_critical_strike_chance_while_wielding_staff"); },
                Self::pathfinder_poison_duration_final(PlusPercentage(v)) => { total += v; variant = Some("pathfinder_poison_duration_final"); },
                Self::map_boss_experience_final(PlusPercentage(v)) => { total += v; variant = Some("map_boss_experience_final"); },
                Self::melee_critical_strike_chance(PlusPercentage(v)) => { total += v; variant = Some("melee_critical_strike_chance"); },
                Self::herald_skills_mana_reservation(PlusPercentage(v)) => { total += v; variant = Some("herald_skills_mana_reservation"); },
                Self::damage_while_wielding_wand(PlusPercentage(v)) => { total += v; variant = Some("damage_while_wielding_wand"); },
                Self::damage_vs_enemies_affected_by_status_ailments(PlusPercentage(v)) => { total += v; variant = Some("damage_vs_enemies_affected_by_status_ailments"); },
                Self::mark_skill_duration(PlusPercentage(v)) => { total += v; variant = Some("mark_skill_duration"); },
                Self::map_delirium_daemon_damage(PlusPercentage(v)) => { total += v; variant = Some("map_delirium_daemon_damage"); },
                Self::thorns_damage_if_blocked_recently(PlusPercentage(v)) => { total += v; variant = Some("thorns_damage_if_blocked_recently"); },
                Self::minion_attack_and_cast_speed(PlusPercentage(v)) => { total += v; variant = Some("minion_attack_and_cast_speed"); },
                Self::blind_effect(PlusPercentage(v)) => { total += v; variant = Some("blind_effect"); },
                Self::hit_damage_stun_multiplier(PlusPercentage(v)) => { total += v; variant = Some("hit_damage_stun_multiplier"); },
                Self::map_delirium_boss_splinter_amount(PlusPercentage(v)) => { total += v; variant = Some("map_delirium_boss_splinter_amount"); },
                Self::flask_charges_gained(PlusPercentage(v)) => { total += v; variant = Some("flask_charges_gained"); },
                Self::melee_damage_when_on_full_life(PlusPercentage(v)) => { total += v; variant = Some("melee_damage_when_on_full_life"); },
                Self::armour_if_consumed_endurance_charge_recently(PlusPercentage(v)) => { total += v; variant = Some("armour_if_consumed_endurance_charge_recently"); },
                Self::armour_per_rage(PlusPercentage(v)) => { total += v; variant = Some("armour_per_rage"); },
                Self::flask_mana_charges_used(PlusPercentage(v)) => { total += v; variant = Some("flask_mana_charges_used"); },
                Self::endurance_charge_duration(PlusPercentage(v)) => { total += v; variant = Some("endurance_charge_duration"); },
                Self::damage_with_one_handed_weapons(PlusPercentage(v)) => { total += v; variant = Some("damage_with_one_handed_weapons"); },
                Self::flask_life_and_mana_recovery_while_using_charm(PlusPercentage(v)) => { total += v; variant = Some("flask_life_and_mana_recovery_while_using_charm"); },
                Self::hit_damage_stun_multiplier_vs_enemies_at_close_range(PlusPercentage(v)) => { total += v; variant = Some("hit_damage_stun_multiplier_vs_enemies_at_close_range"); },
                Self::curse_delay(PlusPercentage(v)) => { total += v; variant = Some("curse_delay"); },
                Self::evasion_rating_while_surrounded(PlusPercentage(v)) => { total += v; variant = Some("evasion_rating_while_surrounded"); },
                Self::critical_strike_chance_vs_enemies_further_than_6m_distance(PlusPercentage(v)) => { total += v; variant = Some("critical_strike_chance_vs_enemies_further_than_6m_distance"); },
                Self::totems_spells_cast_speed_per_active_totem(PlusPercentage(v)) => { total += v; variant = Some("totems_spells_cast_speed_per_active_totem"); },
                Self::map_item_drop_rarity(PlusPercentage(v)) => { total += v; variant = Some("map_item_drop_rarity"); },
                Self::trap_critical_strike_chance(PlusPercentage(v)) => { total += v; variant = Some("trap_critical_strike_chance"); },
                Self::warcry_damage(PlusPercentage(v)) => { total += v; variant = Some("warcry_damage"); },
                Self::map_jewel_drop_chance_in_forest_biome(PlusPercentage(v)) => { total += v; variant = Some("map_jewel_drop_chance_in_forest_biome"); },
                Self::map_sanctum_and_ultimatum_key_drop_chance_in_desert_biome(PlusPercentage(v)) => { total += v; variant = Some("map_sanctum_and_ultimatum_key_drop_chance_in_desert_biome"); },
                Self::life_recovery_from_flasks_while_on_low_life(PlusPercentage(v)) => { total += v; variant = Some("life_recovery_from_flasks_while_on_low_life"); },
                Self::flask_effect(PlusPercentage(v)) => { total += v; variant = Some("flask_effect"); },
                Self::offering_duration(PlusPercentage(v)) => { total += v; variant = Some("offering_duration"); },
                Self::base_life_leech_amount(PlusPercentage(v)) => { total += v; variant = Some("base_life_leech_amount"); },
                Self::map_tower_augment_quantity(PlusPercentage(v)) => { total += v; variant = Some("map_tower_augment_quantity"); },
                Self::flask_mana_to_recover(PlusPercentage(v)) => { total += v; variant = Some("flask_mana_to_recover"); },
                Self::mana_regeneration_rate(PlusPercentage(v)) => { total += v; variant = Some("mana_regeneration_rate"); },
                Self::base_cooldown_speed(PlusPercentage(v)) => { total += v; variant = Some("base_cooldown_speed"); },
                Self::attack_damage(PlusPercentage(v)) => { total += v; variant = Some("attack_damage"); },
                Self::accuracy_rating_while_dual_wielding(PlusPercentage(v)) => { total += v; variant = Some("accuracy_rating_while_dual_wielding"); },
                Self::one_handed_attack_ailment_chance(PlusPercentage(v)) => { total += v; variant = Some("one_handed_attack_ailment_chance"); },
                Self::slam_skill_area_of_effect(PlusPercentage(v)) => { total += v; variant = Some("slam_skill_area_of_effect"); },
                Self::accuracy_rating(PlusPercentage(v)) => { total += v; variant = Some("accuracy_rating"); },
                Self::dexterity(PlusPercentage(v)) => { total += v; variant = Some("dexterity"); },
                Self::flail_damage(PlusPercentage(v)) => { total += v; variant = Some("flail_damage"); },
                Self::minion_skill_area_of_effect(PlusPercentage(v)) => { total += v; variant = Some("minion_skill_area_of_effect"); },
                Self::empowered_attack_hit_damage_stun_multiplier(PlusPercentage(v)) => { total += v; variant = Some("empowered_attack_hit_damage_stun_multiplier"); },
                Self::critical_strike_chance_vs_shocked_enemies(PlusPercentage(v)) => { total += v; variant = Some("critical_strike_chance_vs_shocked_enemies"); },
                Self::hit_damage_stun_multiplier_with_crits(PlusPercentage(v)) => { total += v; variant = Some("hit_damage_stun_multiplier_with_crits"); },
                Self::spell_damage_per_100_maximum_mana_up_to_60(PlusPercentage(v)) => { total += v; variant = Some("spell_damage_per_100_maximum_mana_up_to_60"); },
                Self::cast_speed_while_holding_staff(PlusPercentage(v)) => { total += v; variant = Some("cast_speed_while_holding_staff"); },
                Self::movement_speed_for_4_seconds_on_block(PlusPercentage(v)) => { total += v; variant = Some("movement_speed_for_4_seconds_on_block"); },
                Self::warcry_cooldown_speed(PlusPercentage(v)) => { total += v; variant = Some("warcry_cooldown_speed"); },
                Self::attack_speed_if_enemy_killed_recently(PlusPercentage(v)) => { total += v; variant = Some("attack_speed_if_enemy_killed_recently"); },
                Self::claw_damage(PlusPercentage(v)) => { total += v; variant = Some("claw_damage"); },
                Self::mark_skill_cast_speed(PlusPercentage(v)) => { total += v; variant = Some("mark_skill_cast_speed"); },
                Self::non_damaging_ailment_effect_with_critical_strikes(PlusPercentage(v)) => { total += v; variant = Some("non_damaging_ailment_effect_with_critical_strikes"); },
                Self::grenade_skill_cooldown_speed(PlusPercentage(v)) => { total += v; variant = Some("grenade_skill_cooldown_speed"); },
                Self::grenade_skill_area_of_effect(PlusPercentage(v)) => { total += v; variant = Some("grenade_skill_area_of_effect"); },
                Self::map_ritual_rare_monsters(PlusPercentage(v)) => { total += v; variant = Some("map_ritual_rare_monsters"); },
                Self::crossbow_attack_speed(PlusPercentage(v)) => { total += v; variant = Some("crossbow_attack_speed"); },
                Self::elemental_damage_if_have_crit_recently(PlusPercentage(v)) => { total += v; variant = Some("elemental_damage_if_have_crit_recently"); },
                Self::stun_threshold_when_on_full_life(PlusPercentage(v)) => { total += v; variant = Some("stun_threshold_when_on_full_life"); },
                Self::quarterstaff_hit_damage_freeze_multiplier(PlusPercentage(v)) => { total += v; variant = Some("quarterstaff_hit_damage_freeze_multiplier"); },
                _ => return None, // Cannot sum unknown stat types
            }
        }

        variant.map(|v| match v {
            "map_pinnacle_boss_difficulty" => Self::map_pinnacle_boss_difficulty(Plus(total)),
            "attack_critical_strike_multiplier" => Self::attack_critical_strike_multiplier(Plus(total)),
            "all_skill_gem_level" => Self::all_skill_gem_level(Plus(total)),
            "maps_with_bosses_additional_strongbox" => Self::maps_with_bosses_additional_strongbox(Plus(total)),
            "bow_critical_strike_multiplier" => Self::bow_critical_strike_multiplier(Plus(total)),
            "base_thorns_critical_strike_multiplier" => Self::base_thorns_critical_strike_multiplier(Plus(total)),
            "all_skill_gem_quality" => Self::all_skill_gem_quality(Plus(total)),
            "map_logbook_difficulty" => Self::map_logbook_difficulty(Plus(total)),
            "spell_skill_gem_level" => Self::spell_skill_gem_level(Plus(total)),
            "melee_range" => Self::melee_range(Plus(total)),
            "base_spell_critical_strike_multiplier" => Self::base_spell_critical_strike_multiplier(Plus(total)),
            "minion_critical_strike_multiplier" => Self::minion_critical_strike_multiplier(Plus(total)),
            "critical_strike_multiplier_with_dagger" => Self::critical_strike_multiplier_with_dagger(Plus(total)),
            "base_critical_strike_multiplier" => Self::base_critical_strike_multiplier(Plus(total)),
            "quarterstaff_critical_strike_multiplier" => Self::quarterstaff_critical_strike_multiplier(Plus(total)),
            "map_breach_domain_difficulty" => Self::map_breach_domain_difficulty(Plus(total)),
            "grenade_skill_cooldown_count" => Self::grenade_skill_cooldown_count(Plus(total)),
            "map_expedition_chest_marker_count" => Self::map_expedition_chest_marker_count(Plus(total)),
            "map_simulacrum_difficulty" => Self::map_simulacrum_difficulty(Plus(total)),
            "one_handed_melee_critical_strike_multiplier" => Self::one_handed_melee_critical_strike_multiplier(Plus(total)),
            "flail_critical_strike_multiplier" => Self::flail_critical_strike_multiplier(Plus(total)),
            "maps_with_bosses_additional_essence" => Self::maps_with_bosses_additional_essence(Plus(total)),
            "critical_strike_multiplier_vs_enemies_on_full_life" => Self::critical_strike_multiplier_vs_enemies_on_full_life(Plus(total)),
            "crossbow_critical_strike_multiplier" => Self::crossbow_critical_strike_multiplier(Plus(total)),
            "maps_with_bosses_additional_shrine" => Self::maps_with_bosses_additional_shrine(Plus(total)),
            "gain__maximum_energy_shield_as_freeze_threshold" => Self::gain__maximum_energy_shield_as_freeze_threshold(Plus(total)),
            "support_gem_limit" => Self::support_gem_limit(Plus(total)),
            "cold_skill_gem_level" => Self::cold_skill_gem_level(Plus(total)),
            "ignites_apply_fire_resistance" => Self::ignites_apply_fire_resistance(Plus(total)),
            "map_bossing_difficulty" => Self::map_bossing_difficulty(Plus(total)),
            "chaos_skill_gem_level" => Self::chaos_skill_gem_level(Plus(total)),
            "map_voodoo_king_difficulty" => Self::map_voodoo_king_difficulty(Plus(total)),
            "energy_shield_delay_when_not_on_full_life" => Self::energy_shield_delay_when_not_on_full_life(MinusPercentage(total)),
            "base_self_critical_strike_multiplier" => Self::base_self_critical_strike_multiplier(MinusPercentage(total)),
            "base_self_ignite_duration" => Self::base_self_ignite_duration(MinusPercentage(total)),
            "energy_shield_delay" => Self::energy_shield_delay(MinusPercentage(total)),
            "base_mana_cost" => Self::base_mana_cost(MinusPercentage(total)),
            "base_self_shock_duration" => Self::base_self_shock_duration(MinusPercentage(total)),
            "base_self_freeze_duration" => Self::base_self_freeze_duration(MinusPercentage(total)),
            "energy_shield_delay_if_stunned_recently" => Self::energy_shield_delay_if_stunned_recently(MinusPercentage(total)),
            "evasion_rating_if_have_not_been_hit_recently" => Self::evasion_rating_if_have_not_been_hit_recently(PlusPercentage(total)),
            "shock_effect" => Self::shock_effect(PlusPercentage(total)),
            "map_magic_chest_amount" => Self::map_magic_chest_amount(PlusPercentage(total)),
            "base_curse_duration" => Self::base_curse_duration(PlusPercentage(total)),
            "damage_with_daggers_against_full_life_enemies" => Self::damage_with_daggers_against_full_life_enemies(PlusPercentage(total)),
            "mana_regeneration_rate_while_moving" => Self::mana_regeneration_rate_while_moving(PlusPercentage(total)),
            "titan_maximum_life_final" => Self::titan_maximum_life_final(PlusPercentage(total)),
            "charm_duration" => Self::charm_duration(PlusPercentage(total)),
            "bow_damage" => Self::bow_damage(PlusPercentage(total)),
            "sorcery_ward_strength" => Self::sorcery_ward_strength(PlusPercentage(total)),
            "intelligence" => Self::intelligence(PlusPercentage(total)),
            "chill_effect" => Self::chill_effect(PlusPercentage(total)),
            "critical_hit_ignite_effect" => Self::critical_hit_ignite_effect(PlusPercentage(total)),
            "life_flask_charges_gained" => Self::life_flask_charges_gained(PlusPercentage(total)),
            "attack_damage_vs_bleeding_enemies" => Self::attack_damage_vs_bleeding_enemies(PlusPercentage(total)),
            "base_projectile_speed" => Self::base_projectile_speed(PlusPercentage(total)),
            "damage_per_different_warcry_used_recently" => Self::damage_per_different_warcry_used_recently(PlusPercentage(total)),
            "damage_vs_hindered_enemies" => Self::damage_vs_hindered_enemies(PlusPercentage(total)),
            "grenade_fuse_duration" => Self::grenade_fuse_duration(PlusPercentage(total)),
            "map_boss_maximum_life" => Self::map_boss_maximum_life(PlusPercentage(total)),
            "ailment_chance" => Self::ailment_chance(PlusPercentage(total)),
            "physical_damage_reduction_rating" => Self::physical_damage_reduction_rating(PlusPercentage(total)),
            "grenade_skill_damage" => Self::grenade_skill_damage(PlusPercentage(total)),
            "map_breach_monster_splinter_quantity" => Self::map_breach_monster_splinter_quantity(PlusPercentage(total)),
            "evasion_rating_if_consumed_frenzy_charge_recently" => Self::evasion_rating_if_consumed_frenzy_charge_recently(PlusPercentage(total)),
            "light_radius" => Self::light_radius(PlusPercentage(total)),
            "damaging_ailments_deal_damage_faster" => Self::damaging_ailments_deal_damage_faster(PlusPercentage(total)),
            "aura_effect" => Self::aura_effect(PlusPercentage(total)),
            "darkness_refresh_rate" => Self::darkness_refresh_rate(PlusPercentage(total)),
            "minion_cooldown_recovery" => Self::minion_cooldown_recovery(PlusPercentage(total)),
            "crossbow_damage" => Self::crossbow_damage(PlusPercentage(total)),
            "projectile_hit_damage_stun_multiplier" => Self::projectile_hit_damage_stun_multiplier(PlusPercentage(total)),
            "block_chance_if_blocked_with_active_block_recently" => Self::block_chance_if_blocked_with_active_block_recently(PlusPercentage(total)),
            "mastery_chance_to_evade_melee_attacks_final" => Self::mastery_chance_to_evade_melee_attacks_final(PlusPercentage(total)),
            "damage_per_1_block_chance" => Self::damage_per_1_block_chance(PlusPercentage(total)),
            "life_regeneration_rate_while_stationary" => Self::life_regeneration_rate_while_stationary(PlusPercentage(total)),
            "damage_while_unarmed" => Self::damage_while_unarmed(PlusPercentage(total)),
            "spell_area_of_effect" => Self::spell_area_of_effect(PlusPercentage(total)),
            "accuracy_rating_vs_enemies_in_close_range" => Self::accuracy_rating_vs_enemies_in_close_range(PlusPercentage(total)),
            "damage_while_totem_active" => Self::damage_while_totem_active(PlusPercentage(total)),
            "block_chance" => Self::block_chance(PlusPercentage(total)),
            "link_skill_duration" => Self::link_skill_duration(PlusPercentage(total)),
            "quarterstaff_attack_speed" => Self::quarterstaff_attack_speed(PlusPercentage(total)),
            "hit_damage_vs_ignited_enemies" => Self::hit_damage_vs_ignited_enemies(PlusPercentage(total)),
            "melee_critical_strike_chance_when_on_full_life" => Self::melee_critical_strike_chance_when_on_full_life(PlusPercentage(total)),
            "attack_speed_per_200_accuracy_rating" => Self::attack_speed_per_200_accuracy_rating(PlusPercentage(total)),
            "map_ritual_rewards_reroll_cost_final" => Self::map_ritual_rewards_reroll_cost_final(PlusPercentage(total)),
            "global_defences" => Self::global_defences(PlusPercentage(total)),
            "attack_speed_if_have_been_hit_recently" => Self::attack_speed_if_have_been_hit_recently(PlusPercentage(total)),
            "map_delirium_doodads_final" => Self::map_delirium_doodads_final(PlusPercentage(total)),
            "spell_damage_while_wielding_melee_weapon" => Self::spell_damage_while_wielding_melee_weapon(PlusPercentage(total)),
            "area_of_effect_if_enemy_stunned_with_two_handed_melee_weapon_recently" => Self::area_of_effect_if_enemy_stunned_with_two_handed_melee_weapon_recently(PlusPercentage(total)),
            "cast_speed_for_4_seconds_on_attack" => Self::cast_speed_for_4_seconds_on_attack(PlusPercentage(total)),
            "map_mod_effect_per_tower_affecting_area" => Self::map_mod_effect_per_tower_affecting_area(PlusPercentage(total)),
            "attack_speed_if_rare_or_unique_enemy_nearby" => Self::attack_speed_if_rare_or_unique_enemy_nearby(PlusPercentage(total)),
            "armour_break_duration" => Self::armour_break_duration(PlusPercentage(total)),
            "flask_charges_used" => Self::flask_charges_used(PlusPercentage(total)),
            "distance_scaled_accuracy_rating_penalty" => Self::distance_scaled_accuracy_rating_penalty(PlusPercentage(total)),
            "mana_regeneration_rate_if_enemy_shocked_recently" => Self::mana_regeneration_rate_if_enemy_shocked_recently(PlusPercentage(total)),
            "quarterstaff_accuracy_rating" => Self::quarterstaff_accuracy_rating(PlusPercentage(total)),
            "guard_flask_effect" => Self::guard_flask_effect(PlusPercentage(total)),
            "evasion_rating_if_you_have_hit_an_enemy_recently" => Self::evasion_rating_if_you_have_hit_an_enemy_recently(PlusPercentage(total)),
            "base_bleed_duration" => Self::base_bleed_duration(PlusPercentage(total)),
            "map_affliction_encounter_boss_chance" => Self::map_affliction_encounter_boss_chance(PlusPercentage(total)),
            "energy_shield_from_focus" => Self::energy_shield_from_focus(PlusPercentage(total)),
            "shock_chance_vs_electrocuted_enemies" => Self::shock_chance_vs_electrocuted_enemies(PlusPercentage(total)),
            "attack_damage_while_ally_in_presence" => Self::attack_damage_while_ally_in_presence(PlusPercentage(total)),
            "trap_damage" => Self::trap_damage(PlusPercentage(total)),
            "armour_break_amount_vs_enemies_affected_by_ailments" => Self::armour_break_amount_vs_enemies_affected_by_ailments(PlusPercentage(total)),
            "map_player_shrine_buff_effect_on_self" => Self::map_player_shrine_buff_effect_on_self(PlusPercentage(total)),
            "ignite_duration" => Self::ignite_duration(PlusPercentage(total)),
            "charm_charges_gained" => Self::charm_charges_gained(PlusPercentage(total)),
            "melee_damage_vs_immobilised_enemies" => Self::melee_damage_vs_immobilised_enemies(PlusPercentage(total)),
            "map_basic_currency_drop_chance_in_swamp_and_water_biome" => Self::map_basic_currency_drop_chance_in_swamp_and_water_biome(PlusPercentage(total)),
            "ignite_shock_chill_duration" => Self::ignite_shock_chill_duration(PlusPercentage(total)),
            "critical_strike_chance_vs_enemies_without_elemental_status_ailments" => Self::critical_strike_chance_vs_enemies_without_elemental_status_ailments(PlusPercentage(total)),
            "deadeye_movement_speed_penalty_final_while_performing_action" => Self::deadeye_movement_speed_penalty_final_while_performing_action(PlusPercentage(total)),
            "allies_in_presence_attack_speed" => Self::allies_in_presence_attack_speed(PlusPercentage(total)),
            "lightning_damage" => Self::lightning_damage(PlusPercentage(total)),
            "armour_evasion_while_leeching" => Self::armour_evasion_while_leeching(PlusPercentage(total)),
            "totem_life" => Self::totem_life(PlusPercentage(total)),
            "movement_speed_while_dual_wielding" => Self::movement_speed_while_dual_wielding(PlusPercentage(total)),
            "spell_damage" => Self::spell_damage(PlusPercentage(total)),
            "spell_area_damage" => Self::spell_area_damage(PlusPercentage(total)),
            "flask_life_to_recover" => Self::flask_life_to_recover(PlusPercentage(total)),
            "attack_damage_when_on_full_life" => Self::attack_damage_when_on_full_life(PlusPercentage(total)),
            "enemies_cursed_by_you_have_life_regeneration_rate" => Self::enemies_cursed_by_you_have_life_regeneration_rate(PlusPercentage(total)),
            "elemental_storm_cooldown_recovery_speed_final" => Self::elemental_storm_cooldown_recovery_speed_final(PlusPercentage(total)),
            "hit_damage_electrocute_multiplier" => Self::hit_damage_electrocute_multiplier(PlusPercentage(total)),
            "maximum_fire_damage_resistance_per_40_uncapped_fire_damage_resistance" => Self::maximum_fire_damage_resistance_per_40_uncapped_fire_damage_resistance(PlusPercentage(total)),
            "life_recovery_rate" => Self::life_recovery_rate(PlusPercentage(total)),
            "damage_with_herald_skills" => Self::damage_with_herald_skills(PlusPercentage(total)),
            "one_handed_melee_accuracy_rating" => Self::one_handed_melee_accuracy_rating(PlusPercentage(total)),
            "deadeye_projectile_damage_final_max_as_distance_travelled_decreases" => Self::deadeye_projectile_damage_final_max_as_distance_travelled_decreases(PlusPercentage(total)),
            "cast_speed_for_cold_skills" => Self::cast_speed_for_cold_skills(PlusPercentage(total)),
            "area_damage" => Self::area_damage(PlusPercentage(total)),
            "damage_for_4_seconds_on_crit" => Self::damage_for_4_seconds_on_crit(PlusPercentage(total)),
            "map_strongbox_mod_effect" => Self::map_strongbox_mod_effect(PlusPercentage(total)),
            "armour_and_evasion_on_low_life" => Self::armour_and_evasion_on_low_life(PlusPercentage(total)),
            "body_armour" => Self::body_armour(PlusPercentage(total)),
            "cold_exposure_effect" => Self::cold_exposure_effect(PlusPercentage(total)),
            "electrocuted_enemy_damage_taken" => Self::electrocuted_enemy_damage_taken(PlusPercentage(total)),
            "damage_against_enemies_with_fully_broken_armour" => Self::damage_against_enemies_with_fully_broken_armour(PlusPercentage(total)),
            "map_socket_currency_drop_chance_in_grass_biome" => Self::map_socket_currency_drop_chance_in_grass_biome(PlusPercentage(total)),
            "minion_accuracy_rating" => Self::minion_accuracy_rating(PlusPercentage(total)),
            "spear_attack_speed" => Self::spear_attack_speed(PlusPercentage(total)),
            "map_breach_time_passed" => Self::map_breach_time_passed(PlusPercentage(total)),
            "spirit" => Self::spirit(PlusPercentage(total)),
            "critical_strike_chance_if_enemy_killed_recently" => Self::critical_strike_chance_if_enemy_killed_recently(PlusPercentage(total)),
            "armour_if_you_havent_been_hit_recently" => Self::armour_if_you_havent_been_hit_recently(PlusPercentage(total)),
            "map_magic_pack_size" => Self::map_magic_pack_size(PlusPercentage(total)),
            "map_expedition_rare_monsters" => Self::map_expedition_rare_monsters(PlusPercentage(total)),
            "cast_speed_when_on_low_life" => Self::cast_speed_when_on_low_life(PlusPercentage(total)),
            "knockback_distance" => Self::knockback_distance(PlusPercentage(total)),
            "notable_knockback_distance_final_for_blocked_hits" => Self::notable_knockback_distance_final_for_blocked_hits(PlusPercentage(total)),
            "attack_speed_per_15_dex" => Self::attack_speed_per_15_dex(PlusPercentage(total)),
            "maximum_life" => Self::maximum_life(PlusPercentage(total)),
            "maximum_life_mana_and_energy_shield" => Self::maximum_life_mana_and_energy_shield(PlusPercentage(total)),
            "chill_effectiveness_on_self" => Self::chill_effectiveness_on_self(PlusPercentage(total)),
            "skill_area_of_effect_when_unarmed" => Self::skill_area_of_effect_when_unarmed(PlusPercentage(total)),
            "expedition_monsters_logbook_chance" => Self::expedition_monsters_logbook_chance(PlusPercentage(total)),
            "trap_throwing_speed" => Self::trap_throwing_speed(PlusPercentage(total)),
            "map_monster_tre" => Self::map_monster_tre(PlusPercentage(total)),
            "offering_life" => Self::offering_life(PlusPercentage(total)),
            "energy_shield_if_consumed_power_charge_recently" => Self::energy_shield_if_consumed_power_charge_recently(PlusPercentage(total)),
            "charm_effect" => Self::charm_effect(PlusPercentage(total)),
            "map_dropped_maps_rarity" => Self::map_dropped_maps_rarity(PlusPercentage(total)),
            "minion_damage_while_you_have_at_least_two_different_active_offerings" => Self::minion_damage_while_you_have_at_least_two_different_active_offerings(PlusPercentage(total)),
            "minion_resummon_speed" => Self::minion_resummon_speed(PlusPercentage(total)),
            "totem_duration" => Self::totem_duration(PlusPercentage(total)),
            "quarterstaff_daze_build_up" => Self::quarterstaff_daze_build_up(PlusPercentage(total)),
            "accuracy_rating_equal_to__attack_critical_strike_chance" => Self::accuracy_rating_equal_to__attack_critical_strike_chance(PlusPercentage(total)),
            "recoup_speed" => Self::recoup_speed(PlusPercentage(total)),
            "warcry_skill_area_of_effect" => Self::warcry_skill_area_of_effect(PlusPercentage(total)),
            "jagged_ground_effect" => Self::jagged_ground_effect(PlusPercentage(total)),
            "unarmed_attack_speed" => Self::unarmed_attack_speed(PlusPercentage(total)),
            "mana_regeneration_rate_while_stationary" => Self::mana_regeneration_rate_while_stationary(PlusPercentage(total)),
            "crossbow_critical_strike_chance" => Self::crossbow_critical_strike_chance(PlusPercentage(total)),
            "map_ritual_voodoo_king_key_chance" => Self::map_ritual_voodoo_king_key_chance(PlusPercentage(total)),
            "projectile_ailment_chance" => Self::projectile_ailment_chance(PlusPercentage(total)),
            "maximum_mana" => Self::maximum_mana(PlusPercentage(total)),
            "poison_effect_vs_non_poisoned_enemies" => Self::poison_effect_vs_non_poisoned_enemies(PlusPercentage(total)),
            "chronomancer_every_8_seconds_final_cast_speed_for_4_seconds" => Self::chronomancer_every_8_seconds_final_cast_speed_for_4_seconds(PlusPercentage(total)),
            "shock_duration" => Self::shock_duration(PlusPercentage(total)),
            "crossbow_damage_per_ammo_type_fired_in_past_10_seconds" => Self::crossbow_damage_per_ammo_type_fired_in_past_10_seconds(PlusPercentage(total)),
            "movement_speed_if_pinned_enemy_recently" => Self::movement_speed_if_pinned_enemy_recently(PlusPercentage(total)),
            "base_damaging_ailment_effect" => Self::base_damaging_ailment_effect(PlusPercentage(total)),
            "map_ritual_monster_damage_for_each_time_revived" => Self::map_ritual_monster_damage_for_each_time_revived(PlusPercentage(total)),
            "passive_tree_mace_damage_final_vs_heavy_stunned_enemies" => Self::passive_tree_mace_damage_final_vs_heavy_stunned_enemies(PlusPercentage(total)),
            "physical_attack_damage" => Self::physical_attack_damage(PlusPercentage(total)),
            "map_expedition_vendor_reroll_currency_quantity" => Self::map_expedition_vendor_reroll_currency_quantity(PlusPercentage(total)),
            "support_anticipation_charge_gain_frequency" => Self::support_anticipation_charge_gain_frequency(PlusPercentage(total)),
            "poison_duration_per_poison_applied_recently" => Self::poison_duration_per_poison_applied_recently(PlusPercentage(total)),
            "damage_while_dual_wielding" => Self::damage_while_dual_wielding(PlusPercentage(total)),
            "attack_skills_damage_while_holding_shield" => Self::attack_skills_damage_while_holding_shield(PlusPercentage(total)),
            "ignite_chance" => Self::ignite_chance(PlusPercentage(total)),
            "energy_shield_recharge_rate" => Self::energy_shield_recharge_rate(PlusPercentage(total)),
            "base_bleeding_effect" => Self::base_bleeding_effect(PlusPercentage(total)),
            "quarterstaff_damage" => Self::quarterstaff_damage(PlusPercentage(total)),
            "daze_build_up" => Self::daze_build_up(PlusPercentage(total)),
            "attack_and_cast_speed_on_placing_totem" => Self::attack_and_cast_speed_on_placing_totem(PlusPercentage(total)),
            "minion_evasion_rating" => Self::minion_evasion_rating(PlusPercentage(total)),
            "atlas_keystone_prefix_or_suffix_mod_effect_final" => Self::atlas_keystone_prefix_or_suffix_mod_effect_final(PlusPercentage(total)),
            "map_ritual_monster_spawning_speed" => Self::map_ritual_monster_spawning_speed(PlusPercentage(total)),
            "map_gold_drop_chance_in_mountain_biome" => Self::map_gold_drop_chance_in_mountain_biome(PlusPercentage(total)),
            "reload_speed" => Self::reload_speed(PlusPercentage(total)),
            "one_handed_attack_speed" => Self::one_handed_attack_speed(PlusPercentage(total)),
            "elemental_damage" => Self::elemental_damage(PlusPercentage(total)),
            "life_regeneration_rate_while_using_life_flask" => Self::life_regeneration_rate_while_using_life_flask(PlusPercentage(total)),
            "critical_hit_damage_bonus_if_consumed_power_charge_recently" => Self::critical_hit_damage_bonus_if_consumed_power_charge_recently(PlusPercentage(total)),
            "hit_damage_electrocute_multiplier_vs_shocked_enemies" => Self::hit_damage_electrocute_multiplier_vs_shocked_enemies(PlusPercentage(total)),
            "attack_and_cast_speed_with_elemental_skills" => Self::attack_and_cast_speed_with_elemental_skills(PlusPercentage(total)),
            "ailment_effect" => Self::ailment_effect(PlusPercentage(total)),
            "map_rare_chest_amount" => Self::map_rare_chest_amount(PlusPercentage(total)),
            "critical_strike_chance_vs_enemies_with_lightning_exposure" => Self::critical_strike_chance_vs_enemies_with_lightning_exposure(PlusPercentage(total)),
            "map_ritual_magic_monsters" => Self::map_ritual_magic_monsters(PlusPercentage(total)),
            "base_poison_duration" => Self::base_poison_duration(PlusPercentage(total)),
            "one_handed_melee_attack_speed" => Self::one_handed_melee_attack_speed(PlusPercentage(total)),
            "lightning_damage_while_affected_by_herald_of_thunder" => Self::lightning_damage_while_affected_by_herald_of_thunder(PlusPercentage(total)),
            "tablet_effect_when_opening_a_map" => Self::tablet_effect_when_opening_a_map(PlusPercentage(total)),
            "flask_life_recovery_rate" => Self::flask_life_recovery_rate(PlusPercentage(total)),
            "warcry_speed" => Self::warcry_speed(PlusPercentage(total)),
            "freeze_threshold" => Self::freeze_threshold(PlusPercentage(total)),
            "map_expedition_elite_marker_count" => Self::map_expedition_elite_marker_count(PlusPercentage(total)),
            "hit_damage_vs_chilled_enemies" => Self::hit_damage_vs_chilled_enemies(PlusPercentage(total)),
            "map_affliction_reward_progress_on_kill" => Self::map_affliction_reward_progress_on_kill(PlusPercentage(total)),
            "map_item_drop_quantity" => Self::map_item_drop_quantity(PlusPercentage(total)),
            "deadeye_projectile_damage_final_max_as_distance_travelled_increases" => Self::deadeye_projectile_damage_final_max_as_distance_travelled_increases(PlusPercentage(total)),
            "elemental_damage_if_enemy_ignited_recently" => Self::elemental_damage_if_enemy_ignited_recently(PlusPercentage(total)),
            "spell_skill_projectile_speed" => Self::spell_skill_projectile_speed(PlusPercentage(total)),
            "maximum_energy_shield_from_body_armour" => Self::maximum_energy_shield_from_body_armour(PlusPercentage(total)),
            "map_boss_item_rarity" => Self::map_boss_item_rarity(PlusPercentage(total)),
            "withered_effect" => Self::withered_effect(PlusPercentage(total)),
            "placing_traps_cooldown_recovery" => Self::placing_traps_cooldown_recovery(PlusPercentage(total)),
            "curse_effect" => Self::curse_effect(PlusPercentage(total)),
            "triggered_spell_spell_damage" => Self::triggered_spell_spell_damage(PlusPercentage(total)),
            "empowered_attack_damage" => Self::empowered_attack_damage(PlusPercentage(total)),
            "maximum_energy_shield" => Self::maximum_energy_shield(PlusPercentage(total)),
            "damage_while_using_charm" => Self::damage_while_using_charm(PlusPercentage(total)),
            "damage_vs_enemies_on_low_life" => Self::damage_vs_enemies_on_low_life(PlusPercentage(total)),
            "elemental_damage_if_enemy_chilled_recently" => Self::elemental_damage_if_enemy_chilled_recently(PlusPercentage(total)),
            "map_delirium_boss_life" => Self::map_delirium_boss_life(PlusPercentage(total)),
            "armour_while_surrounded" => Self::armour_while_surrounded(PlusPercentage(total)),
            "curse_effect_on_self" => Self::curse_effect_on_self(PlusPercentage(total)),
            "damage_to_rare_and_unique_enemies" => Self::damage_to_rare_and_unique_enemies(PlusPercentage(total)),
            "link_skill_buff_effect" => Self::link_skill_buff_effect(PlusPercentage(total)),
            "stun_threshold_during_empowered_attacks" => Self::stun_threshold_during_empowered_attacks(PlusPercentage(total)),
            "map_mod_effect_per_mod" => Self::map_mod_effect_per_mod(PlusPercentage(total)),
            "damage_per_5_of_your_lowest_attribute" => Self::damage_per_5_of_your_lowest_attribute(PlusPercentage(total)),
            "attack_area_of_effect" => Self::attack_area_of_effect(PlusPercentage(total)),
            "area_of_effect_if_have_stunned_an_enemy_recently" => Self::area_of_effect_if_have_stunned_an_enemy_recently(PlusPercentage(total)),
            "quarterstaff_critical_strike_chance" => Self::quarterstaff_critical_strike_chance(PlusPercentage(total)),
            "claw_accuracy_rating" => Self::claw_accuracy_rating(PlusPercentage(total)),
            "cold_damage_while_affected_by_herald_of_ice" => Self::cold_damage_while_affected_by_herald_of_ice(PlusPercentage(total)),
            "map_boss_damage" => Self::map_boss_damage(PlusPercentage(total)),
            "armour_if_have_been_hit_recently" => Self::armour_if_have_been_hit_recently(PlusPercentage(total)),
            "evasion_rating_if_you_dodge_rolled_recently" => Self::evasion_rating_if_you_dodge_rolled_recently(PlusPercentage(total)),
            "fire_damage_while_affected_by_herald_of_ash" => Self::fire_damage_while_affected_by_herald_of_ash(PlusPercentage(total)),
            "hinder_duration" => Self::hinder_duration(PlusPercentage(total)),
            "base_poison_effect" => Self::base_poison_effect(PlusPercentage(total)),
            "mana_recovery_rate" => Self::mana_recovery_rate(PlusPercentage(total)),
            "staff_attack_area_of_effect" => Self::staff_attack_area_of_effect(PlusPercentage(total)),
            "marked_enemy_accuracy_rating" => Self::marked_enemy_accuracy_rating(PlusPercentage(total)),
            "melee_damage_vs_heavy_stunned_enemies" => Self::melee_damage_vs_heavy_stunned_enemies(PlusPercentage(total)),
            "damage_if_you_have_consumed_a_corpse_recently" => Self::damage_if_you_have_consumed_a_corpse_recently(PlusPercentage(total)),
            "map_boss_dropped_item_quantity" => Self::map_boss_dropped_item_quantity(PlusPercentage(total)),
            "projectile_damage_vs_enemies_within_2m_distance" => Self::projectile_damage_vs_enemies_within_2m_distance(PlusPercentage(total)),
            "critical_strike_chance_against_enemies_on_full_life" => Self::critical_strike_chance_against_enemies_on_full_life(PlusPercentage(total)),
            "critical_strike_chance_vs_bleeding_enemies" => Self::critical_strike_chance_vs_bleeding_enemies(PlusPercentage(total)),
            "base_movement_velocity" => Self::base_movement_velocity(PlusPercentage(total)),
            "fire_damage" => Self::fire_damage(PlusPercentage(total)),
            "jagged_ground_enemy_damage_taken" => Self::jagged_ground_enemy_damage_taken(PlusPercentage(total)),
            "base_ignite_effect" => Self::base_ignite_effect(PlusPercentage(total)),
            "attack_and_cast_speed" => Self::attack_and_cast_speed(PlusPercentage(total)),
            "spear_damage" => Self::spear_damage(PlusPercentage(total)),
            "minion_movement_speed" => Self::minion_movement_speed(PlusPercentage(total)),
            "map_pack_size" => Self::map_pack_size(PlusPercentage(total)),
            "totem_placement_range" => Self::totem_placement_range(PlusPercentage(total)),
            "final_repeat_of_spells_area_of_effect" => Self::final_repeat_of_spells_area_of_effect(PlusPercentage(total)),
            "map_expedition_relic_mod_effect" => Self::map_expedition_relic_mod_effect(PlusPercentage(total)),
            "rage_decay_speed" => Self::rage_decay_speed(PlusPercentage(total)),
            "heavy_stun_poise_decay_rate" => Self::heavy_stun_poise_decay_rate(PlusPercentage(total)),
            "base_skill_area_of_effect" => Self::base_skill_area_of_effect(PlusPercentage(total)),
            "quiver_mod_effect" => Self::quiver_mod_effect(PlusPercentage(total)),
            "map_expedition_fuse_burn_time" => Self::map_expedition_fuse_burn_time(PlusPercentage(total)),
            "chill_and_freeze_duration" => Self::chill_and_freeze_duration(PlusPercentage(total)),
            "movement_speed_while_using_charm" => Self::movement_speed_while_using_charm(PlusPercentage(total)),
            "stun_threshold_per_number_of_times_stunned_recently" => Self::stun_threshold_per_number_of_times_stunned_recently(PlusPercentage(total)),
            "totem_damage" => Self::totem_damage(PlusPercentage(total)),
            "charges_gained" => Self::charges_gained(PlusPercentage(total)),
            "life_regeneration_rate_while_on_low_life" => Self::life_regeneration_rate_while_on_low_life(PlusPercentage(total)),
            "base_cost" => Self::base_cost(PlusPercentage(total)),
            "melee_hit_damage_stun_multiplier" => Self::melee_hit_damage_stun_multiplier(PlusPercentage(total)),
            "freeze_duration" => Self::freeze_duration(PlusPercentage(total)),
            "critical_strike_chance_while_dual_wielding" => Self::critical_strike_chance_while_dual_wielding(PlusPercentage(total)),
            "stormweaver_shock_duration_final" => Self::stormweaver_shock_duration_final(PlusPercentage(total)),
            "global_gem_attribute_requirements_final_from_gemling" => Self::global_gem_attribute_requirements_final_from_gemling(PlusPercentage(total)),
            "map_expedition_artifact_quantity" => Self::map_expedition_artifact_quantity(PlusPercentage(total)),
            "mana_recovery_rate_while_affected_by_a_mana_flask" => Self::mana_recovery_rate_while_affected_by_a_mana_flask(PlusPercentage(total)),
            "sword_attack_speed" => Self::sword_attack_speed(PlusPercentage(total)),
            "map_ritual_defer_reward_tribute_cost" => Self::map_ritual_defer_reward_tribute_cost(PlusPercentage(total)),
            "accuracy_rating_vs_rare_or_unique_enemy" => Self::accuracy_rating_vs_rare_or_unique_enemy(PlusPercentage(total)),
            "spell_staff_damage" => Self::spell_staff_damage(PlusPercentage(total)),
            "thorns_damage" => Self::thorns_damage(PlusPercentage(total)),
            "damage_while_affected_by_a_herald" => Self::damage_while_affected_by_a_herald(PlusPercentage(total)),
            "mark_effect" => Self::mark_effect(PlusPercentage(total)),
            "quarterstaff_hit_damage_stun_multiplier" => Self::quarterstaff_hit_damage_stun_multiplier(PlusPercentage(total)),
            "flask_life_and_mana_to_recover" => Self::flask_life_and_mana_to_recover(PlusPercentage(total)),
            "evasion_rating_when_on_full_life" => Self::evasion_rating_when_on_full_life(PlusPercentage(total)),
            "attack_damage_when_on_low_life" => Self::attack_damage_when_on_low_life(PlusPercentage(total)),
            "ice_crystal_maximum_life" => Self::ice_crystal_maximum_life(PlusPercentage(total)),
            "lightning_damage_per_10_intelligence" => Self::lightning_damage_per_10_intelligence(PlusPercentage(total)),
            "dagger_attack_speed" => Self::dagger_attack_speed(PlusPercentage(total)),
            "damaging_ailment_duration" => Self::damaging_ailment_duration(PlusPercentage(total)),
            "two_handed_melee_accuracy_rating" => Self::two_handed_melee_accuracy_rating(PlusPercentage(total)),
            "armour_break_amount" => Self::armour_break_amount(PlusPercentage(total)),
            "elemental_damage_if_enemy_shocked_recently" => Self::elemental_damage_if_enemy_shocked_recently(PlusPercentage(total)),
            "claw_critical_strike_chance" => Self::claw_critical_strike_chance(PlusPercentage(total)),
            "armour_if_hit_enemy_with_melee_attack_recently" => Self::armour_if_hit_enemy_with_melee_attack_recently(PlusPercentage(total)),
            "ascendancy_energy_generated_final" => Self::ascendancy_energy_generated_final(PlusPercentage(total)),
            "attack_speed_while_surrounded" => Self::attack_speed_while_surrounded(PlusPercentage(total)),
            "non_damaging_ailment_effect" => Self::non_damaging_ailment_effect(PlusPercentage(total)),
            "cast_speed_if_have_crit_recently" => Self::cast_speed_if_have_crit_recently(PlusPercentage(total)),
            "one_handed_melee_critical_strike_chance" => Self::one_handed_melee_critical_strike_chance(PlusPercentage(total)),
            "chaos_damage" => Self::chaos_damage(PlusPercentage(total)),
            "critical_hit_bleeding_effect" => Self::critical_hit_bleeding_effect(PlusPercentage(total)),
            "attack_and_cast_speed_while_affected_by_a_mana_flask" => Self::attack_and_cast_speed_while_affected_by_a_mana_flask(PlusPercentage(total)),
            "life_regeneration_rate_while_moving" => Self::life_regeneration_rate_while_moving(PlusPercentage(total)),
            "elemental_damage_with_attack_skills" => Self::elemental_damage_with_attack_skills(PlusPercentage(total)),
            "arrow_critical_strike_chance_max_as_distance_travelled_increases" => Self::arrow_critical_strike_chance_max_as_distance_travelled_increases(PlusPercentage(total)),
            "hit_damage_pin_multiplier" => Self::hit_damage_pin_multiplier(PlusPercentage(total)),
            "all_attributes" => Self::all_attributes(PlusPercentage(total)),
            "totem_skill_cast_speed" => Self::totem_skill_cast_speed(PlusPercentage(total)),
            "base_enemy_critical_strike_chance_against_self" => Self::base_enemy_critical_strike_chance_against_self(PlusPercentage(total)),
            "ailment_chance_vs_rare_or_unique_enemy" => Self::ailment_chance_vs_rare_or_unique_enemy(PlusPercentage(total)),
            "hit_damage_freeze_multiplier" => Self::hit_damage_freeze_multiplier(PlusPercentage(total)),
            "skill_speed" => Self::skill_speed(PlusPercentage(total)),
            "minion_reservation" => Self::minion_reservation(PlusPercentage(total)),
            "damage_per_enemy_elemental_ailment" => Self::damage_per_enemy_elemental_ailment(PlusPercentage(total)),
            "evasion_rating_while_you_have_energy_shield" => Self::evasion_rating_while_you_have_energy_shield(PlusPercentage(total)),
            "mace_damage" => Self::mace_damage(PlusPercentage(total)),
            "critical_strike_chance_vs_dazed_enemies" => Self::critical_strike_chance_vs_dazed_enemies(PlusPercentage(total)),
            "melee_damage" => Self::melee_damage(PlusPercentage(total)),
            "attack_damage_vs_rare_or_unique_enemy" => Self::attack_damage_vs_rare_or_unique_enemy(PlusPercentage(total)),
            "axe_damage" => Self::axe_damage(PlusPercentage(total)),
            "buff_time_passed_only_buff_category" => Self::buff_time_passed_only_buff_category(PlusPercentage(total)),
            "attack_mana_cost" => Self::attack_mana_cost(PlusPercentage(total)),
            "base_all_ailment_duration_on_self" => Self::base_all_ailment_duration_on_self(PlusPercentage(total)),
            "damage_if_have_crit_in_past_8_seconds" => Self::damage_if_have_crit_in_past_8_seconds(PlusPercentage(total)),
            "spear_critical_strike_chance" => Self::spear_critical_strike_chance(PlusPercentage(total)),
            "totem_skill_attack_speed" => Self::totem_skill_attack_speed(PlusPercentage(total)),
            "ailment_threshold" => Self::ailment_threshold(PlusPercentage(total)),
            "stormweaver_chill_effect_final" => Self::stormweaver_chill_effect_final(PlusPercentage(total)),
            "power_charge_duration" => Self::power_charge_duration(PlusPercentage(total)),
            "attack_speed_while_holding_shield" => Self::attack_speed_while_holding_shield(PlusPercentage(total)),
            "melee_damage_at_close_range" => Self::melee_damage_at_close_range(PlusPercentage(total)),
            "while_curse_is_50_expired_curse_effect" => Self::while_curse_is_50_expired_curse_effect(PlusPercentage(total)),
            "lightning_exposure_effect" => Self::lightning_exposure_effect(PlusPercentage(total)),
            "energy_shield_recovery_rate" => Self::energy_shield_recovery_rate(PlusPercentage(total)),
            "mace_hit_damage_stun_multiplier" => Self::mace_hit_damage_stun_multiplier(PlusPercentage(total)),
            "unarmed_attack_skill_melee_dash_range" => Self::unarmed_attack_skill_melee_dash_range(PlusPercentage(total)),
            "critical_strike_chance" => Self::critical_strike_chance(PlusPercentage(total)),
            "dagger_critical_strike_chance" => Self::dagger_critical_strike_chance(PlusPercentage(total)),
            "claw_attack_speed" => Self::claw_attack_speed(PlusPercentage(total)),
            "attack_critical_strike_chance" => Self::attack_critical_strike_chance(PlusPercentage(total)),
            "minion_life_recovery_rate" => Self::minion_life_recovery_rate(PlusPercentage(total)),
            "mark_skill_mana_cost" => Self::mark_skill_mana_cost(PlusPercentage(total)),
            "map_ritual_deferred_rewards_are_offered_again_sooner" => Self::map_ritual_deferred_rewards_are_offered_again_sooner(PlusPercentage(total)),
            "flail_critical_strike_chance" => Self::flail_critical_strike_chance(PlusPercentage(total)),
            "daze_duration" => Self::daze_duration(PlusPercentage(total)),
            "damage_taken_on_low_life" => Self::damage_taken_on_low_life(PlusPercentage(total)),
            "base_mana_leech_amount" => Self::base_mana_leech_amount(PlusPercentage(total)),
            "link_skill_cast_speed" => Self::link_skill_cast_speed(PlusPercentage(total)),
            "skill_effect_duration" => Self::skill_effect_duration(PlusPercentage(total)),
            "damage_vs_frozen_enemies" => Self::damage_vs_frozen_enemies(PlusPercentage(total)),
            "witch_passive_maximum_lightning_damage_final" => Self::witch_passive_maximum_lightning_damage_final(PlusPercentage(total)),
            "aftershock_area_of_effect" => Self::aftershock_area_of_effect(PlusPercentage(total)),
            "spell_critical_strike_chance" => Self::spell_critical_strike_chance(PlusPercentage(total)),
            "hit_damage_vs_enemies_affected_by_ailments" => Self::hit_damage_vs_enemies_affected_by_ailments(PlusPercentage(total)),
            "debuff_time_passed" => Self::debuff_time_passed(PlusPercentage(total)),
            "movement_speed_if_enemy_killed_recently" => Self::movement_speed_if_enemy_killed_recently(PlusPercentage(total)),
            "map_ritual_daemon_damage" => Self::map_ritual_daemon_damage(PlusPercentage(total)),
            "map_map_item_drop_chance" => Self::map_map_item_drop_chance(PlusPercentage(total)),
            "maximum_darkness" => Self::maximum_darkness(PlusPercentage(total)),
            "base_debuff_slow_magnitude" => Self::base_debuff_slow_magnitude(PlusPercentage(total)),
            "damage" => Self::damage(PlusPercentage(total)),
            "cast_speed_when_on_full_life" => Self::cast_speed_when_on_full_life(PlusPercentage(total)),
            "ascendancy_titan_damage_reduction_rating_from_body_armour_final" => Self::ascendancy_titan_damage_reduction_rating_from_body_armour_final(PlusPercentage(total)),
            "culling_strike_threshold" => Self::culling_strike_threshold(PlusPercentage(total)),
            "gemling_skill_cost_final" => Self::gemling_skill_cost_final(PlusPercentage(total)),
            "arcane_surge_effect_on_self" => Self::arcane_surge_effect_on_self(PlusPercentage(total)),
            "strength" => Self::strength(PlusPercentage(total)),
            "evasion_rating_if_energy_shield_recharge_started_in_past_2_seconds" => Self::evasion_rating_if_energy_shield_recharge_started_in_past_2_seconds(PlusPercentage(total)),
            "block_recovery" => Self::block_recovery(PlusPercentage(total)),
            "ascendancy_pathfinder_flask_charges_gained_final" => Self::ascendancy_pathfinder_flask_charges_gained_final(PlusPercentage(total)),
            "weapon_swap_speed" => Self::weapon_swap_speed(PlusPercentage(total)),
            "damage_per_warcry_used_recently" => Self::damage_per_warcry_used_recently(PlusPercentage(total)),
            "base_life_leech_rate" => Self::base_life_leech_rate(PlusPercentage(total)),
            "flail_attack_speed" => Self::flail_attack_speed(PlusPercentage(total)),
            "critical_hit_damage_bonus_vs_enemies_within_2m_distance" => Self::critical_hit_damage_bonus_vs_enemies_within_2m_distance(PlusPercentage(total)),
            "dagger_damage" => Self::dagger_damage(PlusPercentage(total)),
            "damage_vs_burning_enemies" => Self::damage_vs_burning_enemies(PlusPercentage(total)),
            "curse_area_of_effect" => Self::curse_area_of_effect(PlusPercentage(total)),
            "map_breach_monster_quantity" => Self::map_breach_monster_quantity(PlusPercentage(total)),
            "stun_threshold_when_not_stunned_recently" => Self::stun_threshold_when_not_stunned_recently(PlusPercentage(total)),
            "mana_regeneration_rate_while_not_on_low_mana" => Self::mana_regeneration_rate_while_not_on_low_mana(PlusPercentage(total)),
            "spell_damage_if_have_crit_recently" => Self::spell_damage_if_have_crit_recently(PlusPercentage(total)),
            "life_regeneration_rate" => Self::life_regeneration_rate(PlusPercentage(total)),
            "attack_damage_per_75_armour_or_evasion_on_shield" => Self::attack_damage_per_75_armour_or_evasion_on_shield(PlusPercentage(total)),
            "totems_attack_speed_per_active_totem" => Self::totems_attack_speed_per_active_totem(PlusPercentage(total)),
            "offering_area_of_effect" => Self::offering_area_of_effect(PlusPercentage(total)),
            "energy_generated" => Self::energy_generated(PlusPercentage(total)),
            "attack_area_damage" => Self::attack_area_damage(PlusPercentage(total)),
            "titan_damage_final_against_heavy_stunned_enemies" => Self::titan_damage_final_against_heavy_stunned_enemies(PlusPercentage(total)),
            "area_of_effect_with_herald_skills" => Self::area_of_effect_with_herald_skills(PlusPercentage(total)),
            "cast_speed_per_num_unique_spells_cast_recently" => Self::cast_speed_per_num_unique_spells_cast_recently(PlusPercentage(total)),
            "sword_damage" => Self::sword_damage(PlusPercentage(total)),
            "attack_speed_during_flask_effect" => Self::attack_speed_during_flask_effect(PlusPercentage(total)),
            "map_number_of_magic_packs" => Self::map_number_of_magic_packs(PlusPercentage(total)),
            "mana_cost_while_not_low_mana" => Self::mana_cost_while_not_low_mana(PlusPercentage(total)),
            "map_player_damage_taken_vs_breach_monsters" => Self::map_player_damage_taken_vs_breach_monsters(PlusPercentage(total)),
            "attack_speed" => Self::attack_speed(PlusPercentage(total)),
            "evasion_if_hit_recently" => Self::evasion_if_hit_recently(PlusPercentage(total)),
            "critical_strike_chance_if_have_not_crit_recently" => Self::critical_strike_chance_if_have_not_crit_recently(PlusPercentage(total)),
            "shield_evasion_rating" => Self::shield_evasion_rating(PlusPercentage(total)),
            "attack_speed_if_you_have_not_attacked_recently" => Self::attack_speed_if_you_have_not_attacked_recently(PlusPercentage(total)),
            "infernalist_critical_strike_multiplier_final" => Self::infernalist_critical_strike_multiplier_final(PlusPercentage(total)),
            "stun_threshold_per_rage" => Self::stun_threshold_per_rage(PlusPercentage(total)),
            "projectile_damage_vs_enemies_further_than_6m_distance" => Self::projectile_damage_vs_enemies_further_than_6m_distance(PlusPercentage(total)),
            "jagged_ground_duration" => Self::jagged_ground_duration(PlusPercentage(total)),
            "witchhunter_up_to_damage_final_against_targets_with_missing_focus" => Self::witchhunter_up_to_damage_final_against_targets_with_missing_focus(PlusPercentage(total)),
            "evasion_rating" => Self::evasion_rating(PlusPercentage(total)),
            "master_of_elements_evasion_rating_final" => Self::master_of_elements_evasion_rating_final(PlusPercentage(total)),
            "skill_area_of_effect_if_enemy_killed_recently" => Self::skill_area_of_effect_if_enemy_killed_recently(PlusPercentage(total)),
            "evasion_and_physical_damage_reduction_rating" => Self::evasion_and_physical_damage_reduction_rating(PlusPercentage(total)),
            "base_cast_speed" => Self::base_cast_speed(PlusPercentage(total)),
            "base_stun_recovery" => Self::base_stun_recovery(PlusPercentage(total)),
            "attack_and_cast_speed_with_lightning_skills" => Self::attack_and_cast_speed_with_lightning_skills(PlusPercentage(total)),
            "map_non_unique_delirium_monsters_splinter_amount" => Self::map_non_unique_delirium_monsters_splinter_amount(PlusPercentage(total)),
            "charm_charges_used" => Self::charm_charges_used(PlusPercentage(total)),
            "map_ritual_monster_tankiness_for_each_time_revived" => Self::map_ritual_monster_tankiness_for_each_time_revived(PlusPercentage(total)),
            "small_passives_effect" => Self::small_passives_effect(PlusPercentage(total)),
            "damage_vs_shocked_enemies" => Self::damage_vs_shocked_enemies(PlusPercentage(total)),
            "base_slow_potency" => Self::base_slow_potency(PlusPercentage(total)),
            "physical_damage" => Self::physical_damage(PlusPercentage(total)),
            "fire_exposure_effect" => Self::fire_exposure_effect(PlusPercentage(total)),
            "movement_speed_while_you_have_energy_shield" => Self::movement_speed_while_you_have_energy_shield(PlusPercentage(total)),
            "attack_damage_while_surrounded" => Self::attack_damage_while_surrounded(PlusPercentage(total)),
            "damage_with_two_handed_weapons" => Self::damage_with_two_handed_weapons(PlusPercentage(total)),
            "map_mod_effect" => Self::map_mod_effect(PlusPercentage(total)),
            "damage_taken_final_per_tailwind" => Self::damage_taken_final_per_tailwind(PlusPercentage(total)),
            "shock_effect_with_critical_strikes" => Self::shock_effect_with_critical_strikes(PlusPercentage(total)),
            "base_elemental_status_ailment_duration" => Self::base_elemental_status_ailment_duration(PlusPercentage(total)),
            "energy_shield_from_helmet" => Self::energy_shield_from_helmet(PlusPercentage(total)),
            "damage_per_15_strength" => Self::damage_per_15_strength(PlusPercentage(total)),
            "projectile_damage" => Self::projectile_damage(PlusPercentage(total)),
            "mana_flask_charges_gained" => Self::mana_flask_charges_gained(PlusPercentage(total)),
            "axe_attack_speed" => Self::axe_attack_speed(PlusPercentage(total)),
            "critical_hit_damaging_ailment_effect" => Self::critical_hit_damaging_ailment_effect(PlusPercentage(total)),
            "minion_damage" => Self::minion_damage(PlusPercentage(total)),
            "enemies_in_presence_cooldown_recovery" => Self::enemies_in_presence_cooldown_recovery(PlusPercentage(total)),
            "movement_speed_during_flask_effect" => Self::movement_speed_during_flask_effect(PlusPercentage(total)),
            "marked_enemy_damage_taken" => Self::marked_enemy_damage_taken(PlusPercentage(total)),
            "map_affliction_secondary_wave_acceleration" => Self::map_affliction_secondary_wave_acceleration(PlusPercentage(total)),
            "shock_chance" => Self::shock_chance(PlusPercentage(total)),
            "movement_speed_if_cast_a_mark_spell_recently" => Self::movement_speed_if_cast_a_mark_spell_recently(PlusPercentage(total)),
            "energy_shield_recovery_rate_if_not_hit_recently" => Self::energy_shield_recovery_rate_if_not_hit_recently(PlusPercentage(total)),
            "base_frenzy_charge_duration" => Self::base_frenzy_charge_duration(PlusPercentage(total)),
            "global_item_attribute_requirements" => Self::global_item_attribute_requirements(PlusPercentage(total)),
            "damage_per_active_curse_on_self" => Self::damage_per_active_curse_on_self(PlusPercentage(total)),
            "bow_accuracy_rating" => Self::bow_accuracy_rating(PlusPercentage(total)),
            "hit_damage_stun_multiplier_vs_enemies_on_low_life" => Self::hit_damage_stun_multiplier_vs_enemies_on_low_life(PlusPercentage(total)),
            "cold_damage" => Self::cold_damage(PlusPercentage(total)),
            "minion_critical_strike_chance" => Self::minion_critical_strike_chance(PlusPercentage(total)),
            "body_armour_evasion_rating" => Self::body_armour_evasion_rating(PlusPercentage(total)),
            "shield_armour" => Self::shield_armour(PlusPercentage(total)),
            "ascendancy_warbringer_block_chance_final" => Self::ascendancy_warbringer_block_chance_final(PlusPercentage(total)),
            "map_player_shrine_effect_duration" => Self::map_player_shrine_effect_duration(PlusPercentage(total)),
            "map_ritual_omen_chance" => Self::map_ritual_omen_chance(PlusPercentage(total)),
            "ignite_effect_on_self" => Self::ignite_effect_on_self(PlusPercentage(total)),
            "flask_duration" => Self::flask_duration(PlusPercentage(total)),
            "minion_maximum_life" => Self::minion_maximum_life(PlusPercentage(total)),
            "defences_while_wielding_staff" => Self::defences_while_wielding_staff(PlusPercentage(total)),
            "witchhunter_armour_evasion_final" => Self::witchhunter_armour_evasion_final(PlusPercentage(total)),
            "map_breach_chests_final" => Self::map_breach_chests_final(PlusPercentage(total)),
            "damage_vs_dazed_enemies" => Self::damage_vs_dazed_enemies(PlusPercentage(total)),
            "elemental_damage_with_attack_skills_while_using_flask" => Self::elemental_damage_with_attack_skills_while_using_flask(PlusPercentage(total)),
            "spell_damage_while_es_full" => Self::spell_damage_while_es_full(PlusPercentage(total)),
            "map_number_of_rare_packs" => Self::map_number_of_rare_packs(PlusPercentage(total)),
            "bow_attack_speed" => Self::bow_attack_speed(PlusPercentage(total)),
            "melee_attack_speed" => Self::melee_attack_speed(PlusPercentage(total)),
            "summon_totem_cast_speed" => Self::summon_totem_cast_speed(PlusPercentage(total)),
            "damage_if_triggered_skill_recently" => Self::damage_if_triggered_skill_recently(PlusPercentage(total)),
            "attack_damage_for_4_seconds_on_cast" => Self::attack_damage_for_4_seconds_on_cast(PlusPercentage(total)),
            "attack_speed_while_dual_wielding" => Self::attack_speed_while_dual_wielding(PlusPercentage(total)),
            "damage_vs_enemies_on_full_life" => Self::damage_vs_enemies_on_full_life(PlusPercentage(total)),
            "stun_threshold" => Self::stun_threshold(PlusPercentage(total)),
            "map_pinnacle_boss_item_dropped_rarity_final" => Self::map_pinnacle_boss_item_dropped_rarity_final(PlusPercentage(total)),
            "chill_duration" => Self::chill_duration(PlusPercentage(total)),
            "spell_critical_strike_chance_while_wielding_staff" => Self::spell_critical_strike_chance_while_wielding_staff(PlusPercentage(total)),
            "pathfinder_poison_duration_final" => Self::pathfinder_poison_duration_final(PlusPercentage(total)),
            "map_boss_experience_final" => Self::map_boss_experience_final(PlusPercentage(total)),
            "melee_critical_strike_chance" => Self::melee_critical_strike_chance(PlusPercentage(total)),
            "herald_skills_mana_reservation" => Self::herald_skills_mana_reservation(PlusPercentage(total)),
            "damage_while_wielding_wand" => Self::damage_while_wielding_wand(PlusPercentage(total)),
            "damage_vs_enemies_affected_by_status_ailments" => Self::damage_vs_enemies_affected_by_status_ailments(PlusPercentage(total)),
            "mark_skill_duration" => Self::mark_skill_duration(PlusPercentage(total)),
            "map_delirium_daemon_damage" => Self::map_delirium_daemon_damage(PlusPercentage(total)),
            "thorns_damage_if_blocked_recently" => Self::thorns_damage_if_blocked_recently(PlusPercentage(total)),
            "minion_attack_and_cast_speed" => Self::minion_attack_and_cast_speed(PlusPercentage(total)),
            "blind_effect" => Self::blind_effect(PlusPercentage(total)),
            "hit_damage_stun_multiplier" => Self::hit_damage_stun_multiplier(PlusPercentage(total)),
            "map_delirium_boss_splinter_amount" => Self::map_delirium_boss_splinter_amount(PlusPercentage(total)),
            "flask_charges_gained" => Self::flask_charges_gained(PlusPercentage(total)),
            "melee_damage_when_on_full_life" => Self::melee_damage_when_on_full_life(PlusPercentage(total)),
            "armour_if_consumed_endurance_charge_recently" => Self::armour_if_consumed_endurance_charge_recently(PlusPercentage(total)),
            "armour_per_rage" => Self::armour_per_rage(PlusPercentage(total)),
            "flask_mana_charges_used" => Self::flask_mana_charges_used(PlusPercentage(total)),
            "endurance_charge_duration" => Self::endurance_charge_duration(PlusPercentage(total)),
            "damage_with_one_handed_weapons" => Self::damage_with_one_handed_weapons(PlusPercentage(total)),
            "flask_life_and_mana_recovery_while_using_charm" => Self::flask_life_and_mana_recovery_while_using_charm(PlusPercentage(total)),
            "hit_damage_stun_multiplier_vs_enemies_at_close_range" => Self::hit_damage_stun_multiplier_vs_enemies_at_close_range(PlusPercentage(total)),
            "curse_delay" => Self::curse_delay(PlusPercentage(total)),
            "evasion_rating_while_surrounded" => Self::evasion_rating_while_surrounded(PlusPercentage(total)),
            "critical_strike_chance_vs_enemies_further_than_6m_distance" => Self::critical_strike_chance_vs_enemies_further_than_6m_distance(PlusPercentage(total)),
            "totems_spells_cast_speed_per_active_totem" => Self::totems_spells_cast_speed_per_active_totem(PlusPercentage(total)),
            "map_item_drop_rarity" => Self::map_item_drop_rarity(PlusPercentage(total)),
            "trap_critical_strike_chance" => Self::trap_critical_strike_chance(PlusPercentage(total)),
            "warcry_damage" => Self::warcry_damage(PlusPercentage(total)),
            "map_jewel_drop_chance_in_forest_biome" => Self::map_jewel_drop_chance_in_forest_biome(PlusPercentage(total)),
            "map_sanctum_and_ultimatum_key_drop_chance_in_desert_biome" => Self::map_sanctum_and_ultimatum_key_drop_chance_in_desert_biome(PlusPercentage(total)),
            "life_recovery_from_flasks_while_on_low_life" => Self::life_recovery_from_flasks_while_on_low_life(PlusPercentage(total)),
            "flask_effect" => Self::flask_effect(PlusPercentage(total)),
            "offering_duration" => Self::offering_duration(PlusPercentage(total)),
            "base_life_leech_amount" => Self::base_life_leech_amount(PlusPercentage(total)),
            "map_tower_augment_quantity" => Self::map_tower_augment_quantity(PlusPercentage(total)),
            "flask_mana_to_recover" => Self::flask_mana_to_recover(PlusPercentage(total)),
            "mana_regeneration_rate" => Self::mana_regeneration_rate(PlusPercentage(total)),
            "base_cooldown_speed" => Self::base_cooldown_speed(PlusPercentage(total)),
            "attack_damage" => Self::attack_damage(PlusPercentage(total)),
            "accuracy_rating_while_dual_wielding" => Self::accuracy_rating_while_dual_wielding(PlusPercentage(total)),
            "one_handed_attack_ailment_chance" => Self::one_handed_attack_ailment_chance(PlusPercentage(total)),
            "slam_skill_area_of_effect" => Self::slam_skill_area_of_effect(PlusPercentage(total)),
            "accuracy_rating" => Self::accuracy_rating(PlusPercentage(total)),
            "dexterity" => Self::dexterity(PlusPercentage(total)),
            "flail_damage" => Self::flail_damage(PlusPercentage(total)),
            "minion_skill_area_of_effect" => Self::minion_skill_area_of_effect(PlusPercentage(total)),
            "empowered_attack_hit_damage_stun_multiplier" => Self::empowered_attack_hit_damage_stun_multiplier(PlusPercentage(total)),
            "critical_strike_chance_vs_shocked_enemies" => Self::critical_strike_chance_vs_shocked_enemies(PlusPercentage(total)),
            "hit_damage_stun_multiplier_with_crits" => Self::hit_damage_stun_multiplier_with_crits(PlusPercentage(total)),
            "spell_damage_per_100_maximum_mana_up_to_60" => Self::spell_damage_per_100_maximum_mana_up_to_60(PlusPercentage(total)),
            "cast_speed_while_holding_staff" => Self::cast_speed_while_holding_staff(PlusPercentage(total)),
            "movement_speed_for_4_seconds_on_block" => Self::movement_speed_for_4_seconds_on_block(PlusPercentage(total)),
            "warcry_cooldown_speed" => Self::warcry_cooldown_speed(PlusPercentage(total)),
            "attack_speed_if_enemy_killed_recently" => Self::attack_speed_if_enemy_killed_recently(PlusPercentage(total)),
            "claw_damage" => Self::claw_damage(PlusPercentage(total)),
            "mark_skill_cast_speed" => Self::mark_skill_cast_speed(PlusPercentage(total)),
            "non_damaging_ailment_effect_with_critical_strikes" => Self::non_damaging_ailment_effect_with_critical_strikes(PlusPercentage(total)),
            "grenade_skill_cooldown_speed" => Self::grenade_skill_cooldown_speed(PlusPercentage(total)),
            "grenade_skill_area_of_effect" => Self::grenade_skill_area_of_effect(PlusPercentage(total)),
            "map_ritual_rare_monsters" => Self::map_ritual_rare_monsters(PlusPercentage(total)),
            "crossbow_attack_speed" => Self::crossbow_attack_speed(PlusPercentage(total)),
            "elemental_damage_if_have_crit_recently" => Self::elemental_damage_if_have_crit_recently(PlusPercentage(total)),
            "stun_threshold_when_on_full_life" => Self::stun_threshold_when_on_full_life(PlusPercentage(total)),
            "quarterstaff_hit_damage_freeze_multiplier" => Self::quarterstaff_hit_damage_freeze_multiplier(PlusPercentage(total)),
            _ => unreachable!(),
        })
    }
}

impl Add for StatType {
    type Output = Option<Self>;

    fn add(self, other: Self) -> Option<Self> {
        match (self, other) {
            (Self::map_pinnacle_boss_difficulty(Plus(a)), Self::map_pinnacle_boss_difficulty(Plus(b))) => Some(Self::map_pinnacle_boss_difficulty(Plus(a + b))),
            (Self::attack_critical_strike_multiplier(Plus(a)), Self::attack_critical_strike_multiplier(Plus(b))) => Some(Self::attack_critical_strike_multiplier(Plus(a + b))),
            (Self::all_skill_gem_level(Plus(a)), Self::all_skill_gem_level(Plus(b))) => Some(Self::all_skill_gem_level(Plus(a + b))),
            (Self::maps_with_bosses_additional_strongbox(Plus(a)), Self::maps_with_bosses_additional_strongbox(Plus(b))) => Some(Self::maps_with_bosses_additional_strongbox(Plus(a + b))),
            (Self::bow_critical_strike_multiplier(Plus(a)), Self::bow_critical_strike_multiplier(Plus(b))) => Some(Self::bow_critical_strike_multiplier(Plus(a + b))),
            (Self::base_thorns_critical_strike_multiplier(Plus(a)), Self::base_thorns_critical_strike_multiplier(Plus(b))) => Some(Self::base_thorns_critical_strike_multiplier(Plus(a + b))),
            (Self::all_skill_gem_quality(Plus(a)), Self::all_skill_gem_quality(Plus(b))) => Some(Self::all_skill_gem_quality(Plus(a + b))),
            (Self::map_logbook_difficulty(Plus(a)), Self::map_logbook_difficulty(Plus(b))) => Some(Self::map_logbook_difficulty(Plus(a + b))),
            (Self::spell_skill_gem_level(Plus(a)), Self::spell_skill_gem_level(Plus(b))) => Some(Self::spell_skill_gem_level(Plus(a + b))),
            (Self::melee_range(Plus(a)), Self::melee_range(Plus(b))) => Some(Self::melee_range(Plus(a + b))),
            (Self::base_spell_critical_strike_multiplier(Plus(a)), Self::base_spell_critical_strike_multiplier(Plus(b))) => Some(Self::base_spell_critical_strike_multiplier(Plus(a + b))),
            (Self::minion_critical_strike_multiplier(Plus(a)), Self::minion_critical_strike_multiplier(Plus(b))) => Some(Self::minion_critical_strike_multiplier(Plus(a + b))),
            (Self::critical_strike_multiplier_with_dagger(Plus(a)), Self::critical_strike_multiplier_with_dagger(Plus(b))) => Some(Self::critical_strike_multiplier_with_dagger(Plus(a + b))),
            (Self::base_critical_strike_multiplier(Plus(a)), Self::base_critical_strike_multiplier(Plus(b))) => Some(Self::base_critical_strike_multiplier(Plus(a + b))),
            (Self::quarterstaff_critical_strike_multiplier(Plus(a)), Self::quarterstaff_critical_strike_multiplier(Plus(b))) => Some(Self::quarterstaff_critical_strike_multiplier(Plus(a + b))),
            (Self::map_breach_domain_difficulty(Plus(a)), Self::map_breach_domain_difficulty(Plus(b))) => Some(Self::map_breach_domain_difficulty(Plus(a + b))),
            (Self::grenade_skill_cooldown_count(Plus(a)), Self::grenade_skill_cooldown_count(Plus(b))) => Some(Self::grenade_skill_cooldown_count(Plus(a + b))),
            (Self::map_expedition_chest_marker_count(Plus(a)), Self::map_expedition_chest_marker_count(Plus(b))) => Some(Self::map_expedition_chest_marker_count(Plus(a + b))),
            (Self::map_simulacrum_difficulty(Plus(a)), Self::map_simulacrum_difficulty(Plus(b))) => Some(Self::map_simulacrum_difficulty(Plus(a + b))),
            (Self::one_handed_melee_critical_strike_multiplier(Plus(a)), Self::one_handed_melee_critical_strike_multiplier(Plus(b))) => Some(Self::one_handed_melee_critical_strike_multiplier(Plus(a + b))),
            (Self::flail_critical_strike_multiplier(Plus(a)), Self::flail_critical_strike_multiplier(Plus(b))) => Some(Self::flail_critical_strike_multiplier(Plus(a + b))),
            (Self::maps_with_bosses_additional_essence(Plus(a)), Self::maps_with_bosses_additional_essence(Plus(b))) => Some(Self::maps_with_bosses_additional_essence(Plus(a + b))),
            (Self::critical_strike_multiplier_vs_enemies_on_full_life(Plus(a)), Self::critical_strike_multiplier_vs_enemies_on_full_life(Plus(b))) => Some(Self::critical_strike_multiplier_vs_enemies_on_full_life(Plus(a + b))),
            (Self::crossbow_critical_strike_multiplier(Plus(a)), Self::crossbow_critical_strike_multiplier(Plus(b))) => Some(Self::crossbow_critical_strike_multiplier(Plus(a + b))),
            (Self::maps_with_bosses_additional_shrine(Plus(a)), Self::maps_with_bosses_additional_shrine(Plus(b))) => Some(Self::maps_with_bosses_additional_shrine(Plus(a + b))),
            (Self::gain__maximum_energy_shield_as_freeze_threshold(Plus(a)), Self::gain__maximum_energy_shield_as_freeze_threshold(Plus(b))) => Some(Self::gain__maximum_energy_shield_as_freeze_threshold(Plus(a + b))),
            (Self::support_gem_limit(Plus(a)), Self::support_gem_limit(Plus(b))) => Some(Self::support_gem_limit(Plus(a + b))),
            (Self::cold_skill_gem_level(Plus(a)), Self::cold_skill_gem_level(Plus(b))) => Some(Self::cold_skill_gem_level(Plus(a + b))),
            (Self::ignites_apply_fire_resistance(Plus(a)), Self::ignites_apply_fire_resistance(Plus(b))) => Some(Self::ignites_apply_fire_resistance(Plus(a + b))),
            (Self::map_bossing_difficulty(Plus(a)), Self::map_bossing_difficulty(Plus(b))) => Some(Self::map_bossing_difficulty(Plus(a + b))),
            (Self::chaos_skill_gem_level(Plus(a)), Self::chaos_skill_gem_level(Plus(b))) => Some(Self::chaos_skill_gem_level(Plus(a + b))),
            (Self::map_voodoo_king_difficulty(Plus(a)), Self::map_voodoo_king_difficulty(Plus(b))) => Some(Self::map_voodoo_king_difficulty(Plus(a + b))),
            (Self::energy_shield_delay_when_not_on_full_life(MinusPercentage(a)), Self::energy_shield_delay_when_not_on_full_life(MinusPercentage(b))) => Some(Self::energy_shield_delay_when_not_on_full_life(MinusPercentage(a + b))),
            (Self::base_self_critical_strike_multiplier(MinusPercentage(a)), Self::base_self_critical_strike_multiplier(MinusPercentage(b))) => Some(Self::base_self_critical_strike_multiplier(MinusPercentage(a + b))),
            (Self::base_self_ignite_duration(MinusPercentage(a)), Self::base_self_ignite_duration(MinusPercentage(b))) => Some(Self::base_self_ignite_duration(MinusPercentage(a + b))),
            (Self::energy_shield_delay(MinusPercentage(a)), Self::energy_shield_delay(MinusPercentage(b))) => Some(Self::energy_shield_delay(MinusPercentage(a + b))),
            (Self::base_mana_cost(MinusPercentage(a)), Self::base_mana_cost(MinusPercentage(b))) => Some(Self::base_mana_cost(MinusPercentage(a + b))),
            (Self::base_self_shock_duration(MinusPercentage(a)), Self::base_self_shock_duration(MinusPercentage(b))) => Some(Self::base_self_shock_duration(MinusPercentage(a + b))),
            (Self::base_self_freeze_duration(MinusPercentage(a)), Self::base_self_freeze_duration(MinusPercentage(b))) => Some(Self::base_self_freeze_duration(MinusPercentage(a + b))),
            (Self::energy_shield_delay_if_stunned_recently(MinusPercentage(a)), Self::energy_shield_delay_if_stunned_recently(MinusPercentage(b))) => Some(Self::energy_shield_delay_if_stunned_recently(MinusPercentage(a + b))),
            (Self::evasion_rating_if_have_not_been_hit_recently(PlusPercentage(a)), Self::evasion_rating_if_have_not_been_hit_recently(PlusPercentage(b))) => Some(Self::evasion_rating_if_have_not_been_hit_recently(PlusPercentage(a + b))),
            (Self::shock_effect(PlusPercentage(a)), Self::shock_effect(PlusPercentage(b))) => Some(Self::shock_effect(PlusPercentage(a + b))),
            (Self::map_magic_chest_amount(PlusPercentage(a)), Self::map_magic_chest_amount(PlusPercentage(b))) => Some(Self::map_magic_chest_amount(PlusPercentage(a + b))),
            (Self::base_curse_duration(PlusPercentage(a)), Self::base_curse_duration(PlusPercentage(b))) => Some(Self::base_curse_duration(PlusPercentage(a + b))),
            (Self::damage_with_daggers_against_full_life_enemies(PlusPercentage(a)), Self::damage_with_daggers_against_full_life_enemies(PlusPercentage(b))) => Some(Self::damage_with_daggers_against_full_life_enemies(PlusPercentage(a + b))),
            (Self::mana_regeneration_rate_while_moving(PlusPercentage(a)), Self::mana_regeneration_rate_while_moving(PlusPercentage(b))) => Some(Self::mana_regeneration_rate_while_moving(PlusPercentage(a + b))),
            (Self::titan_maximum_life_final(PlusPercentage(a)), Self::titan_maximum_life_final(PlusPercentage(b))) => Some(Self::titan_maximum_life_final(PlusPercentage(a + b))),
            (Self::charm_duration(PlusPercentage(a)), Self::charm_duration(PlusPercentage(b))) => Some(Self::charm_duration(PlusPercentage(a + b))),
            (Self::bow_damage(PlusPercentage(a)), Self::bow_damage(PlusPercentage(b))) => Some(Self::bow_damage(PlusPercentage(a + b))),
            (Self::sorcery_ward_strength(PlusPercentage(a)), Self::sorcery_ward_strength(PlusPercentage(b))) => Some(Self::sorcery_ward_strength(PlusPercentage(a + b))),
            (Self::intelligence(PlusPercentage(a)), Self::intelligence(PlusPercentage(b))) => Some(Self::intelligence(PlusPercentage(a + b))),
            (Self::chill_effect(PlusPercentage(a)), Self::chill_effect(PlusPercentage(b))) => Some(Self::chill_effect(PlusPercentage(a + b))),
            (Self::critical_hit_ignite_effect(PlusPercentage(a)), Self::critical_hit_ignite_effect(PlusPercentage(b))) => Some(Self::critical_hit_ignite_effect(PlusPercentage(a + b))),
            (Self::life_flask_charges_gained(PlusPercentage(a)), Self::life_flask_charges_gained(PlusPercentage(b))) => Some(Self::life_flask_charges_gained(PlusPercentage(a + b))),
            (Self::attack_damage_vs_bleeding_enemies(PlusPercentage(a)), Self::attack_damage_vs_bleeding_enemies(PlusPercentage(b))) => Some(Self::attack_damage_vs_bleeding_enemies(PlusPercentage(a + b))),
            (Self::base_projectile_speed(PlusPercentage(a)), Self::base_projectile_speed(PlusPercentage(b))) => Some(Self::base_projectile_speed(PlusPercentage(a + b))),
            (Self::damage_per_different_warcry_used_recently(PlusPercentage(a)), Self::damage_per_different_warcry_used_recently(PlusPercentage(b))) => Some(Self::damage_per_different_warcry_used_recently(PlusPercentage(a + b))),
            (Self::damage_vs_hindered_enemies(PlusPercentage(a)), Self::damage_vs_hindered_enemies(PlusPercentage(b))) => Some(Self::damage_vs_hindered_enemies(PlusPercentage(a + b))),
            (Self::grenade_fuse_duration(PlusPercentage(a)), Self::grenade_fuse_duration(PlusPercentage(b))) => Some(Self::grenade_fuse_duration(PlusPercentage(a + b))),
            (Self::map_boss_maximum_life(PlusPercentage(a)), Self::map_boss_maximum_life(PlusPercentage(b))) => Some(Self::map_boss_maximum_life(PlusPercentage(a + b))),
            (Self::ailment_chance(PlusPercentage(a)), Self::ailment_chance(PlusPercentage(b))) => Some(Self::ailment_chance(PlusPercentage(a + b))),
            (Self::physical_damage_reduction_rating(PlusPercentage(a)), Self::physical_damage_reduction_rating(PlusPercentage(b))) => Some(Self::physical_damage_reduction_rating(PlusPercentage(a + b))),
            (Self::grenade_skill_damage(PlusPercentage(a)), Self::grenade_skill_damage(PlusPercentage(b))) => Some(Self::grenade_skill_damage(PlusPercentage(a + b))),
            (Self::map_breach_monster_splinter_quantity(PlusPercentage(a)), Self::map_breach_monster_splinter_quantity(PlusPercentage(b))) => Some(Self::map_breach_monster_splinter_quantity(PlusPercentage(a + b))),
            (Self::evasion_rating_if_consumed_frenzy_charge_recently(PlusPercentage(a)), Self::evasion_rating_if_consumed_frenzy_charge_recently(PlusPercentage(b))) => Some(Self::evasion_rating_if_consumed_frenzy_charge_recently(PlusPercentage(a + b))),
            (Self::light_radius(PlusPercentage(a)), Self::light_radius(PlusPercentage(b))) => Some(Self::light_radius(PlusPercentage(a + b))),
            (Self::damaging_ailments_deal_damage_faster(PlusPercentage(a)), Self::damaging_ailments_deal_damage_faster(PlusPercentage(b))) => Some(Self::damaging_ailments_deal_damage_faster(PlusPercentage(a + b))),
            (Self::aura_effect(PlusPercentage(a)), Self::aura_effect(PlusPercentage(b))) => Some(Self::aura_effect(PlusPercentage(a + b))),
            (Self::darkness_refresh_rate(PlusPercentage(a)), Self::darkness_refresh_rate(PlusPercentage(b))) => Some(Self::darkness_refresh_rate(PlusPercentage(a + b))),
            (Self::minion_cooldown_recovery(PlusPercentage(a)), Self::minion_cooldown_recovery(PlusPercentage(b))) => Some(Self::minion_cooldown_recovery(PlusPercentage(a + b))),
            (Self::crossbow_damage(PlusPercentage(a)), Self::crossbow_damage(PlusPercentage(b))) => Some(Self::crossbow_damage(PlusPercentage(a + b))),
            (Self::projectile_hit_damage_stun_multiplier(PlusPercentage(a)), Self::projectile_hit_damage_stun_multiplier(PlusPercentage(b))) => Some(Self::projectile_hit_damage_stun_multiplier(PlusPercentage(a + b))),
            (Self::block_chance_if_blocked_with_active_block_recently(PlusPercentage(a)), Self::block_chance_if_blocked_with_active_block_recently(PlusPercentage(b))) => Some(Self::block_chance_if_blocked_with_active_block_recently(PlusPercentage(a + b))),
            (Self::mastery_chance_to_evade_melee_attacks_final(PlusPercentage(a)), Self::mastery_chance_to_evade_melee_attacks_final(PlusPercentage(b))) => Some(Self::mastery_chance_to_evade_melee_attacks_final(PlusPercentage(a + b))),
            (Self::damage_per_1_block_chance(PlusPercentage(a)), Self::damage_per_1_block_chance(PlusPercentage(b))) => Some(Self::damage_per_1_block_chance(PlusPercentage(a + b))),
            (Self::life_regeneration_rate_while_stationary(PlusPercentage(a)), Self::life_regeneration_rate_while_stationary(PlusPercentage(b))) => Some(Self::life_regeneration_rate_while_stationary(PlusPercentage(a + b))),
            (Self::damage_while_unarmed(PlusPercentage(a)), Self::damage_while_unarmed(PlusPercentage(b))) => Some(Self::damage_while_unarmed(PlusPercentage(a + b))),
            (Self::spell_area_of_effect(PlusPercentage(a)), Self::spell_area_of_effect(PlusPercentage(b))) => Some(Self::spell_area_of_effect(PlusPercentage(a + b))),
            (Self::accuracy_rating_vs_enemies_in_close_range(PlusPercentage(a)), Self::accuracy_rating_vs_enemies_in_close_range(PlusPercentage(b))) => Some(Self::accuracy_rating_vs_enemies_in_close_range(PlusPercentage(a + b))),
            (Self::damage_while_totem_active(PlusPercentage(a)), Self::damage_while_totem_active(PlusPercentage(b))) => Some(Self::damage_while_totem_active(PlusPercentage(a + b))),
            (Self::block_chance(PlusPercentage(a)), Self::block_chance(PlusPercentage(b))) => Some(Self::block_chance(PlusPercentage(a + b))),
            (Self::link_skill_duration(PlusPercentage(a)), Self::link_skill_duration(PlusPercentage(b))) => Some(Self::link_skill_duration(PlusPercentage(a + b))),
            (Self::quarterstaff_attack_speed(PlusPercentage(a)), Self::quarterstaff_attack_speed(PlusPercentage(b))) => Some(Self::quarterstaff_attack_speed(PlusPercentage(a + b))),
            (Self::hit_damage_vs_ignited_enemies(PlusPercentage(a)), Self::hit_damage_vs_ignited_enemies(PlusPercentage(b))) => Some(Self::hit_damage_vs_ignited_enemies(PlusPercentage(a + b))),
            (Self::melee_critical_strike_chance_when_on_full_life(PlusPercentage(a)), Self::melee_critical_strike_chance_when_on_full_life(PlusPercentage(b))) => Some(Self::melee_critical_strike_chance_when_on_full_life(PlusPercentage(a + b))),
            (Self::attack_speed_per_200_accuracy_rating(PlusPercentage(a)), Self::attack_speed_per_200_accuracy_rating(PlusPercentage(b))) => Some(Self::attack_speed_per_200_accuracy_rating(PlusPercentage(a + b))),
            (Self::map_ritual_rewards_reroll_cost_final(PlusPercentage(a)), Self::map_ritual_rewards_reroll_cost_final(PlusPercentage(b))) => Some(Self::map_ritual_rewards_reroll_cost_final(PlusPercentage(a + b))),
            (Self::global_defences(PlusPercentage(a)), Self::global_defences(PlusPercentage(b))) => Some(Self::global_defences(PlusPercentage(a + b))),
            (Self::attack_speed_if_have_been_hit_recently(PlusPercentage(a)), Self::attack_speed_if_have_been_hit_recently(PlusPercentage(b))) => Some(Self::attack_speed_if_have_been_hit_recently(PlusPercentage(a + b))),
            (Self::map_delirium_doodads_final(PlusPercentage(a)), Self::map_delirium_doodads_final(PlusPercentage(b))) => Some(Self::map_delirium_doodads_final(PlusPercentage(a + b))),
            (Self::spell_damage_while_wielding_melee_weapon(PlusPercentage(a)), Self::spell_damage_while_wielding_melee_weapon(PlusPercentage(b))) => Some(Self::spell_damage_while_wielding_melee_weapon(PlusPercentage(a + b))),
            (Self::area_of_effect_if_enemy_stunned_with_two_handed_melee_weapon_recently(PlusPercentage(a)), Self::area_of_effect_if_enemy_stunned_with_two_handed_melee_weapon_recently(PlusPercentage(b))) => Some(Self::area_of_effect_if_enemy_stunned_with_two_handed_melee_weapon_recently(PlusPercentage(a + b))),
            (Self::cast_speed_for_4_seconds_on_attack(PlusPercentage(a)), Self::cast_speed_for_4_seconds_on_attack(PlusPercentage(b))) => Some(Self::cast_speed_for_4_seconds_on_attack(PlusPercentage(a + b))),
            (Self::map_mod_effect_per_tower_affecting_area(PlusPercentage(a)), Self::map_mod_effect_per_tower_affecting_area(PlusPercentage(b))) => Some(Self::map_mod_effect_per_tower_affecting_area(PlusPercentage(a + b))),
            (Self::attack_speed_if_rare_or_unique_enemy_nearby(PlusPercentage(a)), Self::attack_speed_if_rare_or_unique_enemy_nearby(PlusPercentage(b))) => Some(Self::attack_speed_if_rare_or_unique_enemy_nearby(PlusPercentage(a + b))),
            (Self::armour_break_duration(PlusPercentage(a)), Self::armour_break_duration(PlusPercentage(b))) => Some(Self::armour_break_duration(PlusPercentage(a + b))),
            (Self::flask_charges_used(PlusPercentage(a)), Self::flask_charges_used(PlusPercentage(b))) => Some(Self::flask_charges_used(PlusPercentage(a + b))),
            (Self::distance_scaled_accuracy_rating_penalty(PlusPercentage(a)), Self::distance_scaled_accuracy_rating_penalty(PlusPercentage(b))) => Some(Self::distance_scaled_accuracy_rating_penalty(PlusPercentage(a + b))),
            (Self::mana_regeneration_rate_if_enemy_shocked_recently(PlusPercentage(a)), Self::mana_regeneration_rate_if_enemy_shocked_recently(PlusPercentage(b))) => Some(Self::mana_regeneration_rate_if_enemy_shocked_recently(PlusPercentage(a + b))),
            (Self::quarterstaff_accuracy_rating(PlusPercentage(a)), Self::quarterstaff_accuracy_rating(PlusPercentage(b))) => Some(Self::quarterstaff_accuracy_rating(PlusPercentage(a + b))),
            (Self::guard_flask_effect(PlusPercentage(a)), Self::guard_flask_effect(PlusPercentage(b))) => Some(Self::guard_flask_effect(PlusPercentage(a + b))),
            (Self::evasion_rating_if_you_have_hit_an_enemy_recently(PlusPercentage(a)), Self::evasion_rating_if_you_have_hit_an_enemy_recently(PlusPercentage(b))) => Some(Self::evasion_rating_if_you_have_hit_an_enemy_recently(PlusPercentage(a + b))),
            (Self::base_bleed_duration(PlusPercentage(a)), Self::base_bleed_duration(PlusPercentage(b))) => Some(Self::base_bleed_duration(PlusPercentage(a + b))),
            (Self::map_affliction_encounter_boss_chance(PlusPercentage(a)), Self::map_affliction_encounter_boss_chance(PlusPercentage(b))) => Some(Self::map_affliction_encounter_boss_chance(PlusPercentage(a + b))),
            (Self::energy_shield_from_focus(PlusPercentage(a)), Self::energy_shield_from_focus(PlusPercentage(b))) => Some(Self::energy_shield_from_focus(PlusPercentage(a + b))),
            (Self::shock_chance_vs_electrocuted_enemies(PlusPercentage(a)), Self::shock_chance_vs_electrocuted_enemies(PlusPercentage(b))) => Some(Self::shock_chance_vs_electrocuted_enemies(PlusPercentage(a + b))),
            (Self::attack_damage_while_ally_in_presence(PlusPercentage(a)), Self::attack_damage_while_ally_in_presence(PlusPercentage(b))) => Some(Self::attack_damage_while_ally_in_presence(PlusPercentage(a + b))),
            (Self::trap_damage(PlusPercentage(a)), Self::trap_damage(PlusPercentage(b))) => Some(Self::trap_damage(PlusPercentage(a + b))),
            (Self::armour_break_amount_vs_enemies_affected_by_ailments(PlusPercentage(a)), Self::armour_break_amount_vs_enemies_affected_by_ailments(PlusPercentage(b))) => Some(Self::armour_break_amount_vs_enemies_affected_by_ailments(PlusPercentage(a + b))),
            (Self::map_player_shrine_buff_effect_on_self(PlusPercentage(a)), Self::map_player_shrine_buff_effect_on_self(PlusPercentage(b))) => Some(Self::map_player_shrine_buff_effect_on_self(PlusPercentage(a + b))),
            (Self::ignite_duration(PlusPercentage(a)), Self::ignite_duration(PlusPercentage(b))) => Some(Self::ignite_duration(PlusPercentage(a + b))),
            (Self::charm_charges_gained(PlusPercentage(a)), Self::charm_charges_gained(PlusPercentage(b))) => Some(Self::charm_charges_gained(PlusPercentage(a + b))),
            (Self::melee_damage_vs_immobilised_enemies(PlusPercentage(a)), Self::melee_damage_vs_immobilised_enemies(PlusPercentage(b))) => Some(Self::melee_damage_vs_immobilised_enemies(PlusPercentage(a + b))),
            (Self::map_basic_currency_drop_chance_in_swamp_and_water_biome(PlusPercentage(a)), Self::map_basic_currency_drop_chance_in_swamp_and_water_biome(PlusPercentage(b))) => Some(Self::map_basic_currency_drop_chance_in_swamp_and_water_biome(PlusPercentage(a + b))),
            (Self::ignite_shock_chill_duration(PlusPercentage(a)), Self::ignite_shock_chill_duration(PlusPercentage(b))) => Some(Self::ignite_shock_chill_duration(PlusPercentage(a + b))),
            (Self::critical_strike_chance_vs_enemies_without_elemental_status_ailments(PlusPercentage(a)), Self::critical_strike_chance_vs_enemies_without_elemental_status_ailments(PlusPercentage(b))) => Some(Self::critical_strike_chance_vs_enemies_without_elemental_status_ailments(PlusPercentage(a + b))),
            (Self::deadeye_movement_speed_penalty_final_while_performing_action(PlusPercentage(a)), Self::deadeye_movement_speed_penalty_final_while_performing_action(PlusPercentage(b))) => Some(Self::deadeye_movement_speed_penalty_final_while_performing_action(PlusPercentage(a + b))),
            (Self::allies_in_presence_attack_speed(PlusPercentage(a)), Self::allies_in_presence_attack_speed(PlusPercentage(b))) => Some(Self::allies_in_presence_attack_speed(PlusPercentage(a + b))),
            (Self::lightning_damage(PlusPercentage(a)), Self::lightning_damage(PlusPercentage(b))) => Some(Self::lightning_damage(PlusPercentage(a + b))),
            (Self::armour_evasion_while_leeching(PlusPercentage(a)), Self::armour_evasion_while_leeching(PlusPercentage(b))) => Some(Self::armour_evasion_while_leeching(PlusPercentage(a + b))),
            (Self::totem_life(PlusPercentage(a)), Self::totem_life(PlusPercentage(b))) => Some(Self::totem_life(PlusPercentage(a + b))),
            (Self::movement_speed_while_dual_wielding(PlusPercentage(a)), Self::movement_speed_while_dual_wielding(PlusPercentage(b))) => Some(Self::movement_speed_while_dual_wielding(PlusPercentage(a + b))),
            (Self::spell_damage(PlusPercentage(a)), Self::spell_damage(PlusPercentage(b))) => Some(Self::spell_damage(PlusPercentage(a + b))),
            (Self::spell_area_damage(PlusPercentage(a)), Self::spell_area_damage(PlusPercentage(b))) => Some(Self::spell_area_damage(PlusPercentage(a + b))),
            (Self::flask_life_to_recover(PlusPercentage(a)), Self::flask_life_to_recover(PlusPercentage(b))) => Some(Self::flask_life_to_recover(PlusPercentage(a + b))),
            (Self::attack_damage_when_on_full_life(PlusPercentage(a)), Self::attack_damage_when_on_full_life(PlusPercentage(b))) => Some(Self::attack_damage_when_on_full_life(PlusPercentage(a + b))),
            (Self::enemies_cursed_by_you_have_life_regeneration_rate(PlusPercentage(a)), Self::enemies_cursed_by_you_have_life_regeneration_rate(PlusPercentage(b))) => Some(Self::enemies_cursed_by_you_have_life_regeneration_rate(PlusPercentage(a + b))),
            (Self::elemental_storm_cooldown_recovery_speed_final(PlusPercentage(a)), Self::elemental_storm_cooldown_recovery_speed_final(PlusPercentage(b))) => Some(Self::elemental_storm_cooldown_recovery_speed_final(PlusPercentage(a + b))),
            (Self::hit_damage_electrocute_multiplier(PlusPercentage(a)), Self::hit_damage_electrocute_multiplier(PlusPercentage(b))) => Some(Self::hit_damage_electrocute_multiplier(PlusPercentage(a + b))),
            (Self::maximum_fire_damage_resistance_per_40_uncapped_fire_damage_resistance(PlusPercentage(a)), Self::maximum_fire_damage_resistance_per_40_uncapped_fire_damage_resistance(PlusPercentage(b))) => Some(Self::maximum_fire_damage_resistance_per_40_uncapped_fire_damage_resistance(PlusPercentage(a + b))),
            (Self::life_recovery_rate(PlusPercentage(a)), Self::life_recovery_rate(PlusPercentage(b))) => Some(Self::life_recovery_rate(PlusPercentage(a + b))),
            (Self::damage_with_herald_skills(PlusPercentage(a)), Self::damage_with_herald_skills(PlusPercentage(b))) => Some(Self::damage_with_herald_skills(PlusPercentage(a + b))),
            (Self::one_handed_melee_accuracy_rating(PlusPercentage(a)), Self::one_handed_melee_accuracy_rating(PlusPercentage(b))) => Some(Self::one_handed_melee_accuracy_rating(PlusPercentage(a + b))),
            (Self::deadeye_projectile_damage_final_max_as_distance_travelled_decreases(PlusPercentage(a)), Self::deadeye_projectile_damage_final_max_as_distance_travelled_decreases(PlusPercentage(b))) => Some(Self::deadeye_projectile_damage_final_max_as_distance_travelled_decreases(PlusPercentage(a + b))),
            (Self::cast_speed_for_cold_skills(PlusPercentage(a)), Self::cast_speed_for_cold_skills(PlusPercentage(b))) => Some(Self::cast_speed_for_cold_skills(PlusPercentage(a + b))),
            (Self::area_damage(PlusPercentage(a)), Self::area_damage(PlusPercentage(b))) => Some(Self::area_damage(PlusPercentage(a + b))),
            (Self::damage_for_4_seconds_on_crit(PlusPercentage(a)), Self::damage_for_4_seconds_on_crit(PlusPercentage(b))) => Some(Self::damage_for_4_seconds_on_crit(PlusPercentage(a + b))),
            (Self::map_strongbox_mod_effect(PlusPercentage(a)), Self::map_strongbox_mod_effect(PlusPercentage(b))) => Some(Self::map_strongbox_mod_effect(PlusPercentage(a + b))),
            (Self::armour_and_evasion_on_low_life(PlusPercentage(a)), Self::armour_and_evasion_on_low_life(PlusPercentage(b))) => Some(Self::armour_and_evasion_on_low_life(PlusPercentage(a + b))),
            (Self::body_armour(PlusPercentage(a)), Self::body_armour(PlusPercentage(b))) => Some(Self::body_armour(PlusPercentage(a + b))),
            (Self::cold_exposure_effect(PlusPercentage(a)), Self::cold_exposure_effect(PlusPercentage(b))) => Some(Self::cold_exposure_effect(PlusPercentage(a + b))),
            (Self::electrocuted_enemy_damage_taken(PlusPercentage(a)), Self::electrocuted_enemy_damage_taken(PlusPercentage(b))) => Some(Self::electrocuted_enemy_damage_taken(PlusPercentage(a + b))),
            (Self::damage_against_enemies_with_fully_broken_armour(PlusPercentage(a)), Self::damage_against_enemies_with_fully_broken_armour(PlusPercentage(b))) => Some(Self::damage_against_enemies_with_fully_broken_armour(PlusPercentage(a + b))),
            (Self::map_socket_currency_drop_chance_in_grass_biome(PlusPercentage(a)), Self::map_socket_currency_drop_chance_in_grass_biome(PlusPercentage(b))) => Some(Self::map_socket_currency_drop_chance_in_grass_biome(PlusPercentage(a + b))),
            (Self::minion_accuracy_rating(PlusPercentage(a)), Self::minion_accuracy_rating(PlusPercentage(b))) => Some(Self::minion_accuracy_rating(PlusPercentage(a + b))),
            (Self::spear_attack_speed(PlusPercentage(a)), Self::spear_attack_speed(PlusPercentage(b))) => Some(Self::spear_attack_speed(PlusPercentage(a + b))),
            (Self::map_breach_time_passed(PlusPercentage(a)), Self::map_breach_time_passed(PlusPercentage(b))) => Some(Self::map_breach_time_passed(PlusPercentage(a + b))),
            (Self::spirit(PlusPercentage(a)), Self::spirit(PlusPercentage(b))) => Some(Self::spirit(PlusPercentage(a + b))),
            (Self::critical_strike_chance_if_enemy_killed_recently(PlusPercentage(a)), Self::critical_strike_chance_if_enemy_killed_recently(PlusPercentage(b))) => Some(Self::critical_strike_chance_if_enemy_killed_recently(PlusPercentage(a + b))),
            (Self::armour_if_you_havent_been_hit_recently(PlusPercentage(a)), Self::armour_if_you_havent_been_hit_recently(PlusPercentage(b))) => Some(Self::armour_if_you_havent_been_hit_recently(PlusPercentage(a + b))),
            (Self::map_magic_pack_size(PlusPercentage(a)), Self::map_magic_pack_size(PlusPercentage(b))) => Some(Self::map_magic_pack_size(PlusPercentage(a + b))),
            (Self::map_expedition_rare_monsters(PlusPercentage(a)), Self::map_expedition_rare_monsters(PlusPercentage(b))) => Some(Self::map_expedition_rare_monsters(PlusPercentage(a + b))),
            (Self::cast_speed_when_on_low_life(PlusPercentage(a)), Self::cast_speed_when_on_low_life(PlusPercentage(b))) => Some(Self::cast_speed_when_on_low_life(PlusPercentage(a + b))),
            (Self::knockback_distance(PlusPercentage(a)), Self::knockback_distance(PlusPercentage(b))) => Some(Self::knockback_distance(PlusPercentage(a + b))),
            (Self::notable_knockback_distance_final_for_blocked_hits(PlusPercentage(a)), Self::notable_knockback_distance_final_for_blocked_hits(PlusPercentage(b))) => Some(Self::notable_knockback_distance_final_for_blocked_hits(PlusPercentage(a + b))),
            (Self::attack_speed_per_15_dex(PlusPercentage(a)), Self::attack_speed_per_15_dex(PlusPercentage(b))) => Some(Self::attack_speed_per_15_dex(PlusPercentage(a + b))),
            (Self::maximum_life(PlusPercentage(a)), Self::maximum_life(PlusPercentage(b))) => Some(Self::maximum_life(PlusPercentage(a + b))),
            (Self::maximum_life_mana_and_energy_shield(PlusPercentage(a)), Self::maximum_life_mana_and_energy_shield(PlusPercentage(b))) => Some(Self::maximum_life_mana_and_energy_shield(PlusPercentage(a + b))),
            (Self::chill_effectiveness_on_self(PlusPercentage(a)), Self::chill_effectiveness_on_self(PlusPercentage(b))) => Some(Self::chill_effectiveness_on_self(PlusPercentage(a + b))),
            (Self::skill_area_of_effect_when_unarmed(PlusPercentage(a)), Self::skill_area_of_effect_when_unarmed(PlusPercentage(b))) => Some(Self::skill_area_of_effect_when_unarmed(PlusPercentage(a + b))),
            (Self::expedition_monsters_logbook_chance(PlusPercentage(a)), Self::expedition_monsters_logbook_chance(PlusPercentage(b))) => Some(Self::expedition_monsters_logbook_chance(PlusPercentage(a + b))),
            (Self::trap_throwing_speed(PlusPercentage(a)), Self::trap_throwing_speed(PlusPercentage(b))) => Some(Self::trap_throwing_speed(PlusPercentage(a + b))),
            (Self::map_monster_tre(PlusPercentage(a)), Self::map_monster_tre(PlusPercentage(b))) => Some(Self::map_monster_tre(PlusPercentage(a + b))),
            (Self::offering_life(PlusPercentage(a)), Self::offering_life(PlusPercentage(b))) => Some(Self::offering_life(PlusPercentage(a + b))),
            (Self::energy_shield_if_consumed_power_charge_recently(PlusPercentage(a)), Self::energy_shield_if_consumed_power_charge_recently(PlusPercentage(b))) => Some(Self::energy_shield_if_consumed_power_charge_recently(PlusPercentage(a + b))),
            (Self::charm_effect(PlusPercentage(a)), Self::charm_effect(PlusPercentage(b))) => Some(Self::charm_effect(PlusPercentage(a + b))),
            (Self::map_dropped_maps_rarity(PlusPercentage(a)), Self::map_dropped_maps_rarity(PlusPercentage(b))) => Some(Self::map_dropped_maps_rarity(PlusPercentage(a + b))),
            (Self::minion_damage_while_you_have_at_least_two_different_active_offerings(PlusPercentage(a)), Self::minion_damage_while_you_have_at_least_two_different_active_offerings(PlusPercentage(b))) => Some(Self::minion_damage_while_you_have_at_least_two_different_active_offerings(PlusPercentage(a + b))),
            (Self::minion_resummon_speed(PlusPercentage(a)), Self::minion_resummon_speed(PlusPercentage(b))) => Some(Self::minion_resummon_speed(PlusPercentage(a + b))),
            (Self::totem_duration(PlusPercentage(a)), Self::totem_duration(PlusPercentage(b))) => Some(Self::totem_duration(PlusPercentage(a + b))),
            (Self::quarterstaff_daze_build_up(PlusPercentage(a)), Self::quarterstaff_daze_build_up(PlusPercentage(b))) => Some(Self::quarterstaff_daze_build_up(PlusPercentage(a + b))),
            (Self::accuracy_rating_equal_to__attack_critical_strike_chance(PlusPercentage(a)), Self::accuracy_rating_equal_to__attack_critical_strike_chance(PlusPercentage(b))) => Some(Self::accuracy_rating_equal_to__attack_critical_strike_chance(PlusPercentage(a + b))),
            (Self::recoup_speed(PlusPercentage(a)), Self::recoup_speed(PlusPercentage(b))) => Some(Self::recoup_speed(PlusPercentage(a + b))),
            (Self::warcry_skill_area_of_effect(PlusPercentage(a)), Self::warcry_skill_area_of_effect(PlusPercentage(b))) => Some(Self::warcry_skill_area_of_effect(PlusPercentage(a + b))),
            (Self::jagged_ground_effect(PlusPercentage(a)), Self::jagged_ground_effect(PlusPercentage(b))) => Some(Self::jagged_ground_effect(PlusPercentage(a + b))),
            (Self::unarmed_attack_speed(PlusPercentage(a)), Self::unarmed_attack_speed(PlusPercentage(b))) => Some(Self::unarmed_attack_speed(PlusPercentage(a + b))),
            (Self::mana_regeneration_rate_while_stationary(PlusPercentage(a)), Self::mana_regeneration_rate_while_stationary(PlusPercentage(b))) => Some(Self::mana_regeneration_rate_while_stationary(PlusPercentage(a + b))),
            (Self::crossbow_critical_strike_chance(PlusPercentage(a)), Self::crossbow_critical_strike_chance(PlusPercentage(b))) => Some(Self::crossbow_critical_strike_chance(PlusPercentage(a + b))),
            (Self::map_ritual_voodoo_king_key_chance(PlusPercentage(a)), Self::map_ritual_voodoo_king_key_chance(PlusPercentage(b))) => Some(Self::map_ritual_voodoo_king_key_chance(PlusPercentage(a + b))),
            (Self::projectile_ailment_chance(PlusPercentage(a)), Self::projectile_ailment_chance(PlusPercentage(b))) => Some(Self::projectile_ailment_chance(PlusPercentage(a + b))),
            (Self::maximum_mana(PlusPercentage(a)), Self::maximum_mana(PlusPercentage(b))) => Some(Self::maximum_mana(PlusPercentage(a + b))),
            (Self::poison_effect_vs_non_poisoned_enemies(PlusPercentage(a)), Self::poison_effect_vs_non_poisoned_enemies(PlusPercentage(b))) => Some(Self::poison_effect_vs_non_poisoned_enemies(PlusPercentage(a + b))),
            (Self::chronomancer_every_8_seconds_final_cast_speed_for_4_seconds(PlusPercentage(a)), Self::chronomancer_every_8_seconds_final_cast_speed_for_4_seconds(PlusPercentage(b))) => Some(Self::chronomancer_every_8_seconds_final_cast_speed_for_4_seconds(PlusPercentage(a + b))),
            (Self::shock_duration(PlusPercentage(a)), Self::shock_duration(PlusPercentage(b))) => Some(Self::shock_duration(PlusPercentage(a + b))),
            (Self::crossbow_damage_per_ammo_type_fired_in_past_10_seconds(PlusPercentage(a)), Self::crossbow_damage_per_ammo_type_fired_in_past_10_seconds(PlusPercentage(b))) => Some(Self::crossbow_damage_per_ammo_type_fired_in_past_10_seconds(PlusPercentage(a + b))),
            (Self::movement_speed_if_pinned_enemy_recently(PlusPercentage(a)), Self::movement_speed_if_pinned_enemy_recently(PlusPercentage(b))) => Some(Self::movement_speed_if_pinned_enemy_recently(PlusPercentage(a + b))),
            (Self::base_damaging_ailment_effect(PlusPercentage(a)), Self::base_damaging_ailment_effect(PlusPercentage(b))) => Some(Self::base_damaging_ailment_effect(PlusPercentage(a + b))),
            (Self::map_ritual_monster_damage_for_each_time_revived(PlusPercentage(a)), Self::map_ritual_monster_damage_for_each_time_revived(PlusPercentage(b))) => Some(Self::map_ritual_monster_damage_for_each_time_revived(PlusPercentage(a + b))),
            (Self::passive_tree_mace_damage_final_vs_heavy_stunned_enemies(PlusPercentage(a)), Self::passive_tree_mace_damage_final_vs_heavy_stunned_enemies(PlusPercentage(b))) => Some(Self::passive_tree_mace_damage_final_vs_heavy_stunned_enemies(PlusPercentage(a + b))),
            (Self::physical_attack_damage(PlusPercentage(a)), Self::physical_attack_damage(PlusPercentage(b))) => Some(Self::physical_attack_damage(PlusPercentage(a + b))),
            (Self::map_expedition_vendor_reroll_currency_quantity(PlusPercentage(a)), Self::map_expedition_vendor_reroll_currency_quantity(PlusPercentage(b))) => Some(Self::map_expedition_vendor_reroll_currency_quantity(PlusPercentage(a + b))),
            (Self::support_anticipation_charge_gain_frequency(PlusPercentage(a)), Self::support_anticipation_charge_gain_frequency(PlusPercentage(b))) => Some(Self::support_anticipation_charge_gain_frequency(PlusPercentage(a + b))),
            (Self::poison_duration_per_poison_applied_recently(PlusPercentage(a)), Self::poison_duration_per_poison_applied_recently(PlusPercentage(b))) => Some(Self::poison_duration_per_poison_applied_recently(PlusPercentage(a + b))),
            (Self::damage_while_dual_wielding(PlusPercentage(a)), Self::damage_while_dual_wielding(PlusPercentage(b))) => Some(Self::damage_while_dual_wielding(PlusPercentage(a + b))),
            (Self::attack_skills_damage_while_holding_shield(PlusPercentage(a)), Self::attack_skills_damage_while_holding_shield(PlusPercentage(b))) => Some(Self::attack_skills_damage_while_holding_shield(PlusPercentage(a + b))),
            (Self::ignite_chance(PlusPercentage(a)), Self::ignite_chance(PlusPercentage(b))) => Some(Self::ignite_chance(PlusPercentage(a + b))),
            (Self::energy_shield_recharge_rate(PlusPercentage(a)), Self::energy_shield_recharge_rate(PlusPercentage(b))) => Some(Self::energy_shield_recharge_rate(PlusPercentage(a + b))),
            (Self::base_bleeding_effect(PlusPercentage(a)), Self::base_bleeding_effect(PlusPercentage(b))) => Some(Self::base_bleeding_effect(PlusPercentage(a + b))),
            (Self::quarterstaff_damage(PlusPercentage(a)), Self::quarterstaff_damage(PlusPercentage(b))) => Some(Self::quarterstaff_damage(PlusPercentage(a + b))),
            (Self::daze_build_up(PlusPercentage(a)), Self::daze_build_up(PlusPercentage(b))) => Some(Self::daze_build_up(PlusPercentage(a + b))),
            (Self::attack_and_cast_speed_on_placing_totem(PlusPercentage(a)), Self::attack_and_cast_speed_on_placing_totem(PlusPercentage(b))) => Some(Self::attack_and_cast_speed_on_placing_totem(PlusPercentage(a + b))),
            (Self::minion_evasion_rating(PlusPercentage(a)), Self::minion_evasion_rating(PlusPercentage(b))) => Some(Self::minion_evasion_rating(PlusPercentage(a + b))),
            (Self::atlas_keystone_prefix_or_suffix_mod_effect_final(PlusPercentage(a)), Self::atlas_keystone_prefix_or_suffix_mod_effect_final(PlusPercentage(b))) => Some(Self::atlas_keystone_prefix_or_suffix_mod_effect_final(PlusPercentage(a + b))),
            (Self::map_ritual_monster_spawning_speed(PlusPercentage(a)), Self::map_ritual_monster_spawning_speed(PlusPercentage(b))) => Some(Self::map_ritual_monster_spawning_speed(PlusPercentage(a + b))),
            (Self::map_gold_drop_chance_in_mountain_biome(PlusPercentage(a)), Self::map_gold_drop_chance_in_mountain_biome(PlusPercentage(b))) => Some(Self::map_gold_drop_chance_in_mountain_biome(PlusPercentage(a + b))),
            (Self::reload_speed(PlusPercentage(a)), Self::reload_speed(PlusPercentage(b))) => Some(Self::reload_speed(PlusPercentage(a + b))),
            (Self::one_handed_attack_speed(PlusPercentage(a)), Self::one_handed_attack_speed(PlusPercentage(b))) => Some(Self::one_handed_attack_speed(PlusPercentage(a + b))),
            (Self::elemental_damage(PlusPercentage(a)), Self::elemental_damage(PlusPercentage(b))) => Some(Self::elemental_damage(PlusPercentage(a + b))),
            (Self::life_regeneration_rate_while_using_life_flask(PlusPercentage(a)), Self::life_regeneration_rate_while_using_life_flask(PlusPercentage(b))) => Some(Self::life_regeneration_rate_while_using_life_flask(PlusPercentage(a + b))),
            (Self::critical_hit_damage_bonus_if_consumed_power_charge_recently(PlusPercentage(a)), Self::critical_hit_damage_bonus_if_consumed_power_charge_recently(PlusPercentage(b))) => Some(Self::critical_hit_damage_bonus_if_consumed_power_charge_recently(PlusPercentage(a + b))),
            (Self::hit_damage_electrocute_multiplier_vs_shocked_enemies(PlusPercentage(a)), Self::hit_damage_electrocute_multiplier_vs_shocked_enemies(PlusPercentage(b))) => Some(Self::hit_damage_electrocute_multiplier_vs_shocked_enemies(PlusPercentage(a + b))),
            (Self::attack_and_cast_speed_with_elemental_skills(PlusPercentage(a)), Self::attack_and_cast_speed_with_elemental_skills(PlusPercentage(b))) => Some(Self::attack_and_cast_speed_with_elemental_skills(PlusPercentage(a + b))),
            (Self::ailment_effect(PlusPercentage(a)), Self::ailment_effect(PlusPercentage(b))) => Some(Self::ailment_effect(PlusPercentage(a + b))),
            (Self::map_rare_chest_amount(PlusPercentage(a)), Self::map_rare_chest_amount(PlusPercentage(b))) => Some(Self::map_rare_chest_amount(PlusPercentage(a + b))),
            (Self::critical_strike_chance_vs_enemies_with_lightning_exposure(PlusPercentage(a)), Self::critical_strike_chance_vs_enemies_with_lightning_exposure(PlusPercentage(b))) => Some(Self::critical_strike_chance_vs_enemies_with_lightning_exposure(PlusPercentage(a + b))),
            (Self::map_ritual_magic_monsters(PlusPercentage(a)), Self::map_ritual_magic_monsters(PlusPercentage(b))) => Some(Self::map_ritual_magic_monsters(PlusPercentage(a + b))),
            (Self::base_poison_duration(PlusPercentage(a)), Self::base_poison_duration(PlusPercentage(b))) => Some(Self::base_poison_duration(PlusPercentage(a + b))),
            (Self::one_handed_melee_attack_speed(PlusPercentage(a)), Self::one_handed_melee_attack_speed(PlusPercentage(b))) => Some(Self::one_handed_melee_attack_speed(PlusPercentage(a + b))),
            (Self::lightning_damage_while_affected_by_herald_of_thunder(PlusPercentage(a)), Self::lightning_damage_while_affected_by_herald_of_thunder(PlusPercentage(b))) => Some(Self::lightning_damage_while_affected_by_herald_of_thunder(PlusPercentage(a + b))),
            (Self::tablet_effect_when_opening_a_map(PlusPercentage(a)), Self::tablet_effect_when_opening_a_map(PlusPercentage(b))) => Some(Self::tablet_effect_when_opening_a_map(PlusPercentage(a + b))),
            (Self::flask_life_recovery_rate(PlusPercentage(a)), Self::flask_life_recovery_rate(PlusPercentage(b))) => Some(Self::flask_life_recovery_rate(PlusPercentage(a + b))),
            (Self::warcry_speed(PlusPercentage(a)), Self::warcry_speed(PlusPercentage(b))) => Some(Self::warcry_speed(PlusPercentage(a + b))),
            (Self::freeze_threshold(PlusPercentage(a)), Self::freeze_threshold(PlusPercentage(b))) => Some(Self::freeze_threshold(PlusPercentage(a + b))),
            (Self::map_expedition_elite_marker_count(PlusPercentage(a)), Self::map_expedition_elite_marker_count(PlusPercentage(b))) => Some(Self::map_expedition_elite_marker_count(PlusPercentage(a + b))),
            (Self::hit_damage_vs_chilled_enemies(PlusPercentage(a)), Self::hit_damage_vs_chilled_enemies(PlusPercentage(b))) => Some(Self::hit_damage_vs_chilled_enemies(PlusPercentage(a + b))),
            (Self::map_affliction_reward_progress_on_kill(PlusPercentage(a)), Self::map_affliction_reward_progress_on_kill(PlusPercentage(b))) => Some(Self::map_affliction_reward_progress_on_kill(PlusPercentage(a + b))),
            (Self::map_item_drop_quantity(PlusPercentage(a)), Self::map_item_drop_quantity(PlusPercentage(b))) => Some(Self::map_item_drop_quantity(PlusPercentage(a + b))),
            (Self::deadeye_projectile_damage_final_max_as_distance_travelled_increases(PlusPercentage(a)), Self::deadeye_projectile_damage_final_max_as_distance_travelled_increases(PlusPercentage(b))) => Some(Self::deadeye_projectile_damage_final_max_as_distance_travelled_increases(PlusPercentage(a + b))),
            (Self::elemental_damage_if_enemy_ignited_recently(PlusPercentage(a)), Self::elemental_damage_if_enemy_ignited_recently(PlusPercentage(b))) => Some(Self::elemental_damage_if_enemy_ignited_recently(PlusPercentage(a + b))),
            (Self::spell_skill_projectile_speed(PlusPercentage(a)), Self::spell_skill_projectile_speed(PlusPercentage(b))) => Some(Self::spell_skill_projectile_speed(PlusPercentage(a + b))),
            (Self::maximum_energy_shield_from_body_armour(PlusPercentage(a)), Self::maximum_energy_shield_from_body_armour(PlusPercentage(b))) => Some(Self::maximum_energy_shield_from_body_armour(PlusPercentage(a + b))),
            (Self::map_boss_item_rarity(PlusPercentage(a)), Self::map_boss_item_rarity(PlusPercentage(b))) => Some(Self::map_boss_item_rarity(PlusPercentage(a + b))),
            (Self::withered_effect(PlusPercentage(a)), Self::withered_effect(PlusPercentage(b))) => Some(Self::withered_effect(PlusPercentage(a + b))),
            (Self::placing_traps_cooldown_recovery(PlusPercentage(a)), Self::placing_traps_cooldown_recovery(PlusPercentage(b))) => Some(Self::placing_traps_cooldown_recovery(PlusPercentage(a + b))),
            (Self::curse_effect(PlusPercentage(a)), Self::curse_effect(PlusPercentage(b))) => Some(Self::curse_effect(PlusPercentage(a + b))),
            (Self::triggered_spell_spell_damage(PlusPercentage(a)), Self::triggered_spell_spell_damage(PlusPercentage(b))) => Some(Self::triggered_spell_spell_damage(PlusPercentage(a + b))),
            (Self::empowered_attack_damage(PlusPercentage(a)), Self::empowered_attack_damage(PlusPercentage(b))) => Some(Self::empowered_attack_damage(PlusPercentage(a + b))),
            (Self::maximum_energy_shield(PlusPercentage(a)), Self::maximum_energy_shield(PlusPercentage(b))) => Some(Self::maximum_energy_shield(PlusPercentage(a + b))),
            (Self::damage_while_using_charm(PlusPercentage(a)), Self::damage_while_using_charm(PlusPercentage(b))) => Some(Self::damage_while_using_charm(PlusPercentage(a + b))),
            (Self::damage_vs_enemies_on_low_life(PlusPercentage(a)), Self::damage_vs_enemies_on_low_life(PlusPercentage(b))) => Some(Self::damage_vs_enemies_on_low_life(PlusPercentage(a + b))),
            (Self::elemental_damage_if_enemy_chilled_recently(PlusPercentage(a)), Self::elemental_damage_if_enemy_chilled_recently(PlusPercentage(b))) => Some(Self::elemental_damage_if_enemy_chilled_recently(PlusPercentage(a + b))),
            (Self::map_delirium_boss_life(PlusPercentage(a)), Self::map_delirium_boss_life(PlusPercentage(b))) => Some(Self::map_delirium_boss_life(PlusPercentage(a + b))),
            (Self::armour_while_surrounded(PlusPercentage(a)), Self::armour_while_surrounded(PlusPercentage(b))) => Some(Self::armour_while_surrounded(PlusPercentage(a + b))),
            (Self::curse_effect_on_self(PlusPercentage(a)), Self::curse_effect_on_self(PlusPercentage(b))) => Some(Self::curse_effect_on_self(PlusPercentage(a + b))),
            (Self::damage_to_rare_and_unique_enemies(PlusPercentage(a)), Self::damage_to_rare_and_unique_enemies(PlusPercentage(b))) => Some(Self::damage_to_rare_and_unique_enemies(PlusPercentage(a + b))),
            (Self::link_skill_buff_effect(PlusPercentage(a)), Self::link_skill_buff_effect(PlusPercentage(b))) => Some(Self::link_skill_buff_effect(PlusPercentage(a + b))),
            (Self::stun_threshold_during_empowered_attacks(PlusPercentage(a)), Self::stun_threshold_during_empowered_attacks(PlusPercentage(b))) => Some(Self::stun_threshold_during_empowered_attacks(PlusPercentage(a + b))),
            (Self::map_mod_effect_per_mod(PlusPercentage(a)), Self::map_mod_effect_per_mod(PlusPercentage(b))) => Some(Self::map_mod_effect_per_mod(PlusPercentage(a + b))),
            (Self::damage_per_5_of_your_lowest_attribute(PlusPercentage(a)), Self::damage_per_5_of_your_lowest_attribute(PlusPercentage(b))) => Some(Self::damage_per_5_of_your_lowest_attribute(PlusPercentage(a + b))),
            (Self::attack_area_of_effect(PlusPercentage(a)), Self::attack_area_of_effect(PlusPercentage(b))) => Some(Self::attack_area_of_effect(PlusPercentage(a + b))),
            (Self::area_of_effect_if_have_stunned_an_enemy_recently(PlusPercentage(a)), Self::area_of_effect_if_have_stunned_an_enemy_recently(PlusPercentage(b))) => Some(Self::area_of_effect_if_have_stunned_an_enemy_recently(PlusPercentage(a + b))),
            (Self::quarterstaff_critical_strike_chance(PlusPercentage(a)), Self::quarterstaff_critical_strike_chance(PlusPercentage(b))) => Some(Self::quarterstaff_critical_strike_chance(PlusPercentage(a + b))),
            (Self::claw_accuracy_rating(PlusPercentage(a)), Self::claw_accuracy_rating(PlusPercentage(b))) => Some(Self::claw_accuracy_rating(PlusPercentage(a + b))),
            (Self::cold_damage_while_affected_by_herald_of_ice(PlusPercentage(a)), Self::cold_damage_while_affected_by_herald_of_ice(PlusPercentage(b))) => Some(Self::cold_damage_while_affected_by_herald_of_ice(PlusPercentage(a + b))),
            (Self::map_boss_damage(PlusPercentage(a)), Self::map_boss_damage(PlusPercentage(b))) => Some(Self::map_boss_damage(PlusPercentage(a + b))),
            (Self::armour_if_have_been_hit_recently(PlusPercentage(a)), Self::armour_if_have_been_hit_recently(PlusPercentage(b))) => Some(Self::armour_if_have_been_hit_recently(PlusPercentage(a + b))),
            (Self::evasion_rating_if_you_dodge_rolled_recently(PlusPercentage(a)), Self::evasion_rating_if_you_dodge_rolled_recently(PlusPercentage(b))) => Some(Self::evasion_rating_if_you_dodge_rolled_recently(PlusPercentage(a + b))),
            (Self::fire_damage_while_affected_by_herald_of_ash(PlusPercentage(a)), Self::fire_damage_while_affected_by_herald_of_ash(PlusPercentage(b))) => Some(Self::fire_damage_while_affected_by_herald_of_ash(PlusPercentage(a + b))),
            (Self::hinder_duration(PlusPercentage(a)), Self::hinder_duration(PlusPercentage(b))) => Some(Self::hinder_duration(PlusPercentage(a + b))),
            (Self::base_poison_effect(PlusPercentage(a)), Self::base_poison_effect(PlusPercentage(b))) => Some(Self::base_poison_effect(PlusPercentage(a + b))),
            (Self::mana_recovery_rate(PlusPercentage(a)), Self::mana_recovery_rate(PlusPercentage(b))) => Some(Self::mana_recovery_rate(PlusPercentage(a + b))),
            (Self::staff_attack_area_of_effect(PlusPercentage(a)), Self::staff_attack_area_of_effect(PlusPercentage(b))) => Some(Self::staff_attack_area_of_effect(PlusPercentage(a + b))),
            (Self::marked_enemy_accuracy_rating(PlusPercentage(a)), Self::marked_enemy_accuracy_rating(PlusPercentage(b))) => Some(Self::marked_enemy_accuracy_rating(PlusPercentage(a + b))),
            (Self::melee_damage_vs_heavy_stunned_enemies(PlusPercentage(a)), Self::melee_damage_vs_heavy_stunned_enemies(PlusPercentage(b))) => Some(Self::melee_damage_vs_heavy_stunned_enemies(PlusPercentage(a + b))),
            (Self::damage_if_you_have_consumed_a_corpse_recently(PlusPercentage(a)), Self::damage_if_you_have_consumed_a_corpse_recently(PlusPercentage(b))) => Some(Self::damage_if_you_have_consumed_a_corpse_recently(PlusPercentage(a + b))),
            (Self::map_boss_dropped_item_quantity(PlusPercentage(a)), Self::map_boss_dropped_item_quantity(PlusPercentage(b))) => Some(Self::map_boss_dropped_item_quantity(PlusPercentage(a + b))),
            (Self::projectile_damage_vs_enemies_within_2m_distance(PlusPercentage(a)), Self::projectile_damage_vs_enemies_within_2m_distance(PlusPercentage(b))) => Some(Self::projectile_damage_vs_enemies_within_2m_distance(PlusPercentage(a + b))),
            (Self::critical_strike_chance_against_enemies_on_full_life(PlusPercentage(a)), Self::critical_strike_chance_against_enemies_on_full_life(PlusPercentage(b))) => Some(Self::critical_strike_chance_against_enemies_on_full_life(PlusPercentage(a + b))),
            (Self::critical_strike_chance_vs_bleeding_enemies(PlusPercentage(a)), Self::critical_strike_chance_vs_bleeding_enemies(PlusPercentage(b))) => Some(Self::critical_strike_chance_vs_bleeding_enemies(PlusPercentage(a + b))),
            (Self::base_movement_velocity(PlusPercentage(a)), Self::base_movement_velocity(PlusPercentage(b))) => Some(Self::base_movement_velocity(PlusPercentage(a + b))),
            (Self::fire_damage(PlusPercentage(a)), Self::fire_damage(PlusPercentage(b))) => Some(Self::fire_damage(PlusPercentage(a + b))),
            (Self::jagged_ground_enemy_damage_taken(PlusPercentage(a)), Self::jagged_ground_enemy_damage_taken(PlusPercentage(b))) => Some(Self::jagged_ground_enemy_damage_taken(PlusPercentage(a + b))),
            (Self::base_ignite_effect(PlusPercentage(a)), Self::base_ignite_effect(PlusPercentage(b))) => Some(Self::base_ignite_effect(PlusPercentage(a + b))),
            (Self::attack_and_cast_speed(PlusPercentage(a)), Self::attack_and_cast_speed(PlusPercentage(b))) => Some(Self::attack_and_cast_speed(PlusPercentage(a + b))),
            (Self::spear_damage(PlusPercentage(a)), Self::spear_damage(PlusPercentage(b))) => Some(Self::spear_damage(PlusPercentage(a + b))),
            (Self::minion_movement_speed(PlusPercentage(a)), Self::minion_movement_speed(PlusPercentage(b))) => Some(Self::minion_movement_speed(PlusPercentage(a + b))),
            (Self::map_pack_size(PlusPercentage(a)), Self::map_pack_size(PlusPercentage(b))) => Some(Self::map_pack_size(PlusPercentage(a + b))),
            (Self::totem_placement_range(PlusPercentage(a)), Self::totem_placement_range(PlusPercentage(b))) => Some(Self::totem_placement_range(PlusPercentage(a + b))),
            (Self::final_repeat_of_spells_area_of_effect(PlusPercentage(a)), Self::final_repeat_of_spells_area_of_effect(PlusPercentage(b))) => Some(Self::final_repeat_of_spells_area_of_effect(PlusPercentage(a + b))),
            (Self::map_expedition_relic_mod_effect(PlusPercentage(a)), Self::map_expedition_relic_mod_effect(PlusPercentage(b))) => Some(Self::map_expedition_relic_mod_effect(PlusPercentage(a + b))),
            (Self::rage_decay_speed(PlusPercentage(a)), Self::rage_decay_speed(PlusPercentage(b))) => Some(Self::rage_decay_speed(PlusPercentage(a + b))),
            (Self::heavy_stun_poise_decay_rate(PlusPercentage(a)), Self::heavy_stun_poise_decay_rate(PlusPercentage(b))) => Some(Self::heavy_stun_poise_decay_rate(PlusPercentage(a + b))),
            (Self::base_skill_area_of_effect(PlusPercentage(a)), Self::base_skill_area_of_effect(PlusPercentage(b))) => Some(Self::base_skill_area_of_effect(PlusPercentage(a + b))),
            (Self::quiver_mod_effect(PlusPercentage(a)), Self::quiver_mod_effect(PlusPercentage(b))) => Some(Self::quiver_mod_effect(PlusPercentage(a + b))),
            (Self::map_expedition_fuse_burn_time(PlusPercentage(a)), Self::map_expedition_fuse_burn_time(PlusPercentage(b))) => Some(Self::map_expedition_fuse_burn_time(PlusPercentage(a + b))),
            (Self::chill_and_freeze_duration(PlusPercentage(a)), Self::chill_and_freeze_duration(PlusPercentage(b))) => Some(Self::chill_and_freeze_duration(PlusPercentage(a + b))),
            (Self::movement_speed_while_using_charm(PlusPercentage(a)), Self::movement_speed_while_using_charm(PlusPercentage(b))) => Some(Self::movement_speed_while_using_charm(PlusPercentage(a + b))),
            (Self::stun_threshold_per_number_of_times_stunned_recently(PlusPercentage(a)), Self::stun_threshold_per_number_of_times_stunned_recently(PlusPercentage(b))) => Some(Self::stun_threshold_per_number_of_times_stunned_recently(PlusPercentage(a + b))),
            (Self::totem_damage(PlusPercentage(a)), Self::totem_damage(PlusPercentage(b))) => Some(Self::totem_damage(PlusPercentage(a + b))),
            (Self::charges_gained(PlusPercentage(a)), Self::charges_gained(PlusPercentage(b))) => Some(Self::charges_gained(PlusPercentage(a + b))),
            (Self::life_regeneration_rate_while_on_low_life(PlusPercentage(a)), Self::life_regeneration_rate_while_on_low_life(PlusPercentage(b))) => Some(Self::life_regeneration_rate_while_on_low_life(PlusPercentage(a + b))),
            (Self::base_cost(PlusPercentage(a)), Self::base_cost(PlusPercentage(b))) => Some(Self::base_cost(PlusPercentage(a + b))),
            (Self::melee_hit_damage_stun_multiplier(PlusPercentage(a)), Self::melee_hit_damage_stun_multiplier(PlusPercentage(b))) => Some(Self::melee_hit_damage_stun_multiplier(PlusPercentage(a + b))),
            (Self::freeze_duration(PlusPercentage(a)), Self::freeze_duration(PlusPercentage(b))) => Some(Self::freeze_duration(PlusPercentage(a + b))),
            (Self::critical_strike_chance_while_dual_wielding(PlusPercentage(a)), Self::critical_strike_chance_while_dual_wielding(PlusPercentage(b))) => Some(Self::critical_strike_chance_while_dual_wielding(PlusPercentage(a + b))),
            (Self::stormweaver_shock_duration_final(PlusPercentage(a)), Self::stormweaver_shock_duration_final(PlusPercentage(b))) => Some(Self::stormweaver_shock_duration_final(PlusPercentage(a + b))),
            (Self::global_gem_attribute_requirements_final_from_gemling(PlusPercentage(a)), Self::global_gem_attribute_requirements_final_from_gemling(PlusPercentage(b))) => Some(Self::global_gem_attribute_requirements_final_from_gemling(PlusPercentage(a + b))),
            (Self::map_expedition_artifact_quantity(PlusPercentage(a)), Self::map_expedition_artifact_quantity(PlusPercentage(b))) => Some(Self::map_expedition_artifact_quantity(PlusPercentage(a + b))),
            (Self::mana_recovery_rate_while_affected_by_a_mana_flask(PlusPercentage(a)), Self::mana_recovery_rate_while_affected_by_a_mana_flask(PlusPercentage(b))) => Some(Self::mana_recovery_rate_while_affected_by_a_mana_flask(PlusPercentage(a + b))),
            (Self::sword_attack_speed(PlusPercentage(a)), Self::sword_attack_speed(PlusPercentage(b))) => Some(Self::sword_attack_speed(PlusPercentage(a + b))),
            (Self::map_ritual_defer_reward_tribute_cost(PlusPercentage(a)), Self::map_ritual_defer_reward_tribute_cost(PlusPercentage(b))) => Some(Self::map_ritual_defer_reward_tribute_cost(PlusPercentage(a + b))),
            (Self::accuracy_rating_vs_rare_or_unique_enemy(PlusPercentage(a)), Self::accuracy_rating_vs_rare_or_unique_enemy(PlusPercentage(b))) => Some(Self::accuracy_rating_vs_rare_or_unique_enemy(PlusPercentage(a + b))),
            (Self::spell_staff_damage(PlusPercentage(a)), Self::spell_staff_damage(PlusPercentage(b))) => Some(Self::spell_staff_damage(PlusPercentage(a + b))),
            (Self::thorns_damage(PlusPercentage(a)), Self::thorns_damage(PlusPercentage(b))) => Some(Self::thorns_damage(PlusPercentage(a + b))),
            (Self::damage_while_affected_by_a_herald(PlusPercentage(a)), Self::damage_while_affected_by_a_herald(PlusPercentage(b))) => Some(Self::damage_while_affected_by_a_herald(PlusPercentage(a + b))),
            (Self::mark_effect(PlusPercentage(a)), Self::mark_effect(PlusPercentage(b))) => Some(Self::mark_effect(PlusPercentage(a + b))),
            (Self::quarterstaff_hit_damage_stun_multiplier(PlusPercentage(a)), Self::quarterstaff_hit_damage_stun_multiplier(PlusPercentage(b))) => Some(Self::quarterstaff_hit_damage_stun_multiplier(PlusPercentage(a + b))),
            (Self::flask_life_and_mana_to_recover(PlusPercentage(a)), Self::flask_life_and_mana_to_recover(PlusPercentage(b))) => Some(Self::flask_life_and_mana_to_recover(PlusPercentage(a + b))),
            (Self::evasion_rating_when_on_full_life(PlusPercentage(a)), Self::evasion_rating_when_on_full_life(PlusPercentage(b))) => Some(Self::evasion_rating_when_on_full_life(PlusPercentage(a + b))),
            (Self::attack_damage_when_on_low_life(PlusPercentage(a)), Self::attack_damage_when_on_low_life(PlusPercentage(b))) => Some(Self::attack_damage_when_on_low_life(PlusPercentage(a + b))),
            (Self::ice_crystal_maximum_life(PlusPercentage(a)), Self::ice_crystal_maximum_life(PlusPercentage(b))) => Some(Self::ice_crystal_maximum_life(PlusPercentage(a + b))),
            (Self::lightning_damage_per_10_intelligence(PlusPercentage(a)), Self::lightning_damage_per_10_intelligence(PlusPercentage(b))) => Some(Self::lightning_damage_per_10_intelligence(PlusPercentage(a + b))),
            (Self::dagger_attack_speed(PlusPercentage(a)), Self::dagger_attack_speed(PlusPercentage(b))) => Some(Self::dagger_attack_speed(PlusPercentage(a + b))),
            (Self::damaging_ailment_duration(PlusPercentage(a)), Self::damaging_ailment_duration(PlusPercentage(b))) => Some(Self::damaging_ailment_duration(PlusPercentage(a + b))),
            (Self::two_handed_melee_accuracy_rating(PlusPercentage(a)), Self::two_handed_melee_accuracy_rating(PlusPercentage(b))) => Some(Self::two_handed_melee_accuracy_rating(PlusPercentage(a + b))),
            (Self::armour_break_amount(PlusPercentage(a)), Self::armour_break_amount(PlusPercentage(b))) => Some(Self::armour_break_amount(PlusPercentage(a + b))),
            (Self::elemental_damage_if_enemy_shocked_recently(PlusPercentage(a)), Self::elemental_damage_if_enemy_shocked_recently(PlusPercentage(b))) => Some(Self::elemental_damage_if_enemy_shocked_recently(PlusPercentage(a + b))),
            (Self::claw_critical_strike_chance(PlusPercentage(a)), Self::claw_critical_strike_chance(PlusPercentage(b))) => Some(Self::claw_critical_strike_chance(PlusPercentage(a + b))),
            (Self::armour_if_hit_enemy_with_melee_attack_recently(PlusPercentage(a)), Self::armour_if_hit_enemy_with_melee_attack_recently(PlusPercentage(b))) => Some(Self::armour_if_hit_enemy_with_melee_attack_recently(PlusPercentage(a + b))),
            (Self::ascendancy_energy_generated_final(PlusPercentage(a)), Self::ascendancy_energy_generated_final(PlusPercentage(b))) => Some(Self::ascendancy_energy_generated_final(PlusPercentage(a + b))),
            (Self::attack_speed_while_surrounded(PlusPercentage(a)), Self::attack_speed_while_surrounded(PlusPercentage(b))) => Some(Self::attack_speed_while_surrounded(PlusPercentage(a + b))),
            (Self::non_damaging_ailment_effect(PlusPercentage(a)), Self::non_damaging_ailment_effect(PlusPercentage(b))) => Some(Self::non_damaging_ailment_effect(PlusPercentage(a + b))),
            (Self::cast_speed_if_have_crit_recently(PlusPercentage(a)), Self::cast_speed_if_have_crit_recently(PlusPercentage(b))) => Some(Self::cast_speed_if_have_crit_recently(PlusPercentage(a + b))),
            (Self::one_handed_melee_critical_strike_chance(PlusPercentage(a)), Self::one_handed_melee_critical_strike_chance(PlusPercentage(b))) => Some(Self::one_handed_melee_critical_strike_chance(PlusPercentage(a + b))),
            (Self::chaos_damage(PlusPercentage(a)), Self::chaos_damage(PlusPercentage(b))) => Some(Self::chaos_damage(PlusPercentage(a + b))),
            (Self::critical_hit_bleeding_effect(PlusPercentage(a)), Self::critical_hit_bleeding_effect(PlusPercentage(b))) => Some(Self::critical_hit_bleeding_effect(PlusPercentage(a + b))),
            (Self::attack_and_cast_speed_while_affected_by_a_mana_flask(PlusPercentage(a)), Self::attack_and_cast_speed_while_affected_by_a_mana_flask(PlusPercentage(b))) => Some(Self::attack_and_cast_speed_while_affected_by_a_mana_flask(PlusPercentage(a + b))),
            (Self::life_regeneration_rate_while_moving(PlusPercentage(a)), Self::life_regeneration_rate_while_moving(PlusPercentage(b))) => Some(Self::life_regeneration_rate_while_moving(PlusPercentage(a + b))),
            (Self::elemental_damage_with_attack_skills(PlusPercentage(a)), Self::elemental_damage_with_attack_skills(PlusPercentage(b))) => Some(Self::elemental_damage_with_attack_skills(PlusPercentage(a + b))),
            (Self::arrow_critical_strike_chance_max_as_distance_travelled_increases(PlusPercentage(a)), Self::arrow_critical_strike_chance_max_as_distance_travelled_increases(PlusPercentage(b))) => Some(Self::arrow_critical_strike_chance_max_as_distance_travelled_increases(PlusPercentage(a + b))),
            (Self::hit_damage_pin_multiplier(PlusPercentage(a)), Self::hit_damage_pin_multiplier(PlusPercentage(b))) => Some(Self::hit_damage_pin_multiplier(PlusPercentage(a + b))),
            (Self::all_attributes(PlusPercentage(a)), Self::all_attributes(PlusPercentage(b))) => Some(Self::all_attributes(PlusPercentage(a + b))),
            (Self::totem_skill_cast_speed(PlusPercentage(a)), Self::totem_skill_cast_speed(PlusPercentage(b))) => Some(Self::totem_skill_cast_speed(PlusPercentage(a + b))),
            (Self::base_enemy_critical_strike_chance_against_self(PlusPercentage(a)), Self::base_enemy_critical_strike_chance_against_self(PlusPercentage(b))) => Some(Self::base_enemy_critical_strike_chance_against_self(PlusPercentage(a + b))),
            (Self::ailment_chance_vs_rare_or_unique_enemy(PlusPercentage(a)), Self::ailment_chance_vs_rare_or_unique_enemy(PlusPercentage(b))) => Some(Self::ailment_chance_vs_rare_or_unique_enemy(PlusPercentage(a + b))),
            (Self::hit_damage_freeze_multiplier(PlusPercentage(a)), Self::hit_damage_freeze_multiplier(PlusPercentage(b))) => Some(Self::hit_damage_freeze_multiplier(PlusPercentage(a + b))),
            (Self::skill_speed(PlusPercentage(a)), Self::skill_speed(PlusPercentage(b))) => Some(Self::skill_speed(PlusPercentage(a + b))),
            (Self::minion_reservation(PlusPercentage(a)), Self::minion_reservation(PlusPercentage(b))) => Some(Self::minion_reservation(PlusPercentage(a + b))),
            (Self::damage_per_enemy_elemental_ailment(PlusPercentage(a)), Self::damage_per_enemy_elemental_ailment(PlusPercentage(b))) => Some(Self::damage_per_enemy_elemental_ailment(PlusPercentage(a + b))),
            (Self::evasion_rating_while_you_have_energy_shield(PlusPercentage(a)), Self::evasion_rating_while_you_have_energy_shield(PlusPercentage(b))) => Some(Self::evasion_rating_while_you_have_energy_shield(PlusPercentage(a + b))),
            (Self::mace_damage(PlusPercentage(a)), Self::mace_damage(PlusPercentage(b))) => Some(Self::mace_damage(PlusPercentage(a + b))),
            (Self::critical_strike_chance_vs_dazed_enemies(PlusPercentage(a)), Self::critical_strike_chance_vs_dazed_enemies(PlusPercentage(b))) => Some(Self::critical_strike_chance_vs_dazed_enemies(PlusPercentage(a + b))),
            (Self::melee_damage(PlusPercentage(a)), Self::melee_damage(PlusPercentage(b))) => Some(Self::melee_damage(PlusPercentage(a + b))),
            (Self::attack_damage_vs_rare_or_unique_enemy(PlusPercentage(a)), Self::attack_damage_vs_rare_or_unique_enemy(PlusPercentage(b))) => Some(Self::attack_damage_vs_rare_or_unique_enemy(PlusPercentage(a + b))),
            (Self::axe_damage(PlusPercentage(a)), Self::axe_damage(PlusPercentage(b))) => Some(Self::axe_damage(PlusPercentage(a + b))),
            (Self::buff_time_passed_only_buff_category(PlusPercentage(a)), Self::buff_time_passed_only_buff_category(PlusPercentage(b))) => Some(Self::buff_time_passed_only_buff_category(PlusPercentage(a + b))),
            (Self::attack_mana_cost(PlusPercentage(a)), Self::attack_mana_cost(PlusPercentage(b))) => Some(Self::attack_mana_cost(PlusPercentage(a + b))),
            (Self::base_all_ailment_duration_on_self(PlusPercentage(a)), Self::base_all_ailment_duration_on_self(PlusPercentage(b))) => Some(Self::base_all_ailment_duration_on_self(PlusPercentage(a + b))),
            (Self::damage_if_have_crit_in_past_8_seconds(PlusPercentage(a)), Self::damage_if_have_crit_in_past_8_seconds(PlusPercentage(b))) => Some(Self::damage_if_have_crit_in_past_8_seconds(PlusPercentage(a + b))),
            (Self::spear_critical_strike_chance(PlusPercentage(a)), Self::spear_critical_strike_chance(PlusPercentage(b))) => Some(Self::spear_critical_strike_chance(PlusPercentage(a + b))),
            (Self::totem_skill_attack_speed(PlusPercentage(a)), Self::totem_skill_attack_speed(PlusPercentage(b))) => Some(Self::totem_skill_attack_speed(PlusPercentage(a + b))),
            (Self::ailment_threshold(PlusPercentage(a)), Self::ailment_threshold(PlusPercentage(b))) => Some(Self::ailment_threshold(PlusPercentage(a + b))),
            (Self::stormweaver_chill_effect_final(PlusPercentage(a)), Self::stormweaver_chill_effect_final(PlusPercentage(b))) => Some(Self::stormweaver_chill_effect_final(PlusPercentage(a + b))),
            (Self::power_charge_duration(PlusPercentage(a)), Self::power_charge_duration(PlusPercentage(b))) => Some(Self::power_charge_duration(PlusPercentage(a + b))),
            (Self::attack_speed_while_holding_shield(PlusPercentage(a)), Self::attack_speed_while_holding_shield(PlusPercentage(b))) => Some(Self::attack_speed_while_holding_shield(PlusPercentage(a + b))),
            (Self::melee_damage_at_close_range(PlusPercentage(a)), Self::melee_damage_at_close_range(PlusPercentage(b))) => Some(Self::melee_damage_at_close_range(PlusPercentage(a + b))),
            (Self::while_curse_is_50_expired_curse_effect(PlusPercentage(a)), Self::while_curse_is_50_expired_curse_effect(PlusPercentage(b))) => Some(Self::while_curse_is_50_expired_curse_effect(PlusPercentage(a + b))),
            (Self::lightning_exposure_effect(PlusPercentage(a)), Self::lightning_exposure_effect(PlusPercentage(b))) => Some(Self::lightning_exposure_effect(PlusPercentage(a + b))),
            (Self::energy_shield_recovery_rate(PlusPercentage(a)), Self::energy_shield_recovery_rate(PlusPercentage(b))) => Some(Self::energy_shield_recovery_rate(PlusPercentage(a + b))),
            (Self::mace_hit_damage_stun_multiplier(PlusPercentage(a)), Self::mace_hit_damage_stun_multiplier(PlusPercentage(b))) => Some(Self::mace_hit_damage_stun_multiplier(PlusPercentage(a + b))),
            (Self::unarmed_attack_skill_melee_dash_range(PlusPercentage(a)), Self::unarmed_attack_skill_melee_dash_range(PlusPercentage(b))) => Some(Self::unarmed_attack_skill_melee_dash_range(PlusPercentage(a + b))),
            (Self::critical_strike_chance(PlusPercentage(a)), Self::critical_strike_chance(PlusPercentage(b))) => Some(Self::critical_strike_chance(PlusPercentage(a + b))),
            (Self::dagger_critical_strike_chance(PlusPercentage(a)), Self::dagger_critical_strike_chance(PlusPercentage(b))) => Some(Self::dagger_critical_strike_chance(PlusPercentage(a + b))),
            (Self::claw_attack_speed(PlusPercentage(a)), Self::claw_attack_speed(PlusPercentage(b))) => Some(Self::claw_attack_speed(PlusPercentage(a + b))),
            (Self::attack_critical_strike_chance(PlusPercentage(a)), Self::attack_critical_strike_chance(PlusPercentage(b))) => Some(Self::attack_critical_strike_chance(PlusPercentage(a + b))),
            (Self::minion_life_recovery_rate(PlusPercentage(a)), Self::minion_life_recovery_rate(PlusPercentage(b))) => Some(Self::minion_life_recovery_rate(PlusPercentage(a + b))),
            (Self::mark_skill_mana_cost(PlusPercentage(a)), Self::mark_skill_mana_cost(PlusPercentage(b))) => Some(Self::mark_skill_mana_cost(PlusPercentage(a + b))),
            (Self::map_ritual_deferred_rewards_are_offered_again_sooner(PlusPercentage(a)), Self::map_ritual_deferred_rewards_are_offered_again_sooner(PlusPercentage(b))) => Some(Self::map_ritual_deferred_rewards_are_offered_again_sooner(PlusPercentage(a + b))),
            (Self::flail_critical_strike_chance(PlusPercentage(a)), Self::flail_critical_strike_chance(PlusPercentage(b))) => Some(Self::flail_critical_strike_chance(PlusPercentage(a + b))),
            (Self::daze_duration(PlusPercentage(a)), Self::daze_duration(PlusPercentage(b))) => Some(Self::daze_duration(PlusPercentage(a + b))),
            (Self::damage_taken_on_low_life(PlusPercentage(a)), Self::damage_taken_on_low_life(PlusPercentage(b))) => Some(Self::damage_taken_on_low_life(PlusPercentage(a + b))),
            (Self::base_mana_leech_amount(PlusPercentage(a)), Self::base_mana_leech_amount(PlusPercentage(b))) => Some(Self::base_mana_leech_amount(PlusPercentage(a + b))),
            (Self::link_skill_cast_speed(PlusPercentage(a)), Self::link_skill_cast_speed(PlusPercentage(b))) => Some(Self::link_skill_cast_speed(PlusPercentage(a + b))),
            (Self::skill_effect_duration(PlusPercentage(a)), Self::skill_effect_duration(PlusPercentage(b))) => Some(Self::skill_effect_duration(PlusPercentage(a + b))),
            (Self::damage_vs_frozen_enemies(PlusPercentage(a)), Self::damage_vs_frozen_enemies(PlusPercentage(b))) => Some(Self::damage_vs_frozen_enemies(PlusPercentage(a + b))),
            (Self::witch_passive_maximum_lightning_damage_final(PlusPercentage(a)), Self::witch_passive_maximum_lightning_damage_final(PlusPercentage(b))) => Some(Self::witch_passive_maximum_lightning_damage_final(PlusPercentage(a + b))),
            (Self::aftershock_area_of_effect(PlusPercentage(a)), Self::aftershock_area_of_effect(PlusPercentage(b))) => Some(Self::aftershock_area_of_effect(PlusPercentage(a + b))),
            (Self::spell_critical_strike_chance(PlusPercentage(a)), Self::spell_critical_strike_chance(PlusPercentage(b))) => Some(Self::spell_critical_strike_chance(PlusPercentage(a + b))),
            (Self::hit_damage_vs_enemies_affected_by_ailments(PlusPercentage(a)), Self::hit_damage_vs_enemies_affected_by_ailments(PlusPercentage(b))) => Some(Self::hit_damage_vs_enemies_affected_by_ailments(PlusPercentage(a + b))),
            (Self::debuff_time_passed(PlusPercentage(a)), Self::debuff_time_passed(PlusPercentage(b))) => Some(Self::debuff_time_passed(PlusPercentage(a + b))),
            (Self::movement_speed_if_enemy_killed_recently(PlusPercentage(a)), Self::movement_speed_if_enemy_killed_recently(PlusPercentage(b))) => Some(Self::movement_speed_if_enemy_killed_recently(PlusPercentage(a + b))),
            (Self::map_ritual_daemon_damage(PlusPercentage(a)), Self::map_ritual_daemon_damage(PlusPercentage(b))) => Some(Self::map_ritual_daemon_damage(PlusPercentage(a + b))),
            (Self::map_map_item_drop_chance(PlusPercentage(a)), Self::map_map_item_drop_chance(PlusPercentage(b))) => Some(Self::map_map_item_drop_chance(PlusPercentage(a + b))),
            (Self::maximum_darkness(PlusPercentage(a)), Self::maximum_darkness(PlusPercentage(b))) => Some(Self::maximum_darkness(PlusPercentage(a + b))),
            (Self::base_debuff_slow_magnitude(PlusPercentage(a)), Self::base_debuff_slow_magnitude(PlusPercentage(b))) => Some(Self::base_debuff_slow_magnitude(PlusPercentage(a + b))),
            (Self::damage(PlusPercentage(a)), Self::damage(PlusPercentage(b))) => Some(Self::damage(PlusPercentage(a + b))),
            (Self::cast_speed_when_on_full_life(PlusPercentage(a)), Self::cast_speed_when_on_full_life(PlusPercentage(b))) => Some(Self::cast_speed_when_on_full_life(PlusPercentage(a + b))),
            (Self::ascendancy_titan_damage_reduction_rating_from_body_armour_final(PlusPercentage(a)), Self::ascendancy_titan_damage_reduction_rating_from_body_armour_final(PlusPercentage(b))) => Some(Self::ascendancy_titan_damage_reduction_rating_from_body_armour_final(PlusPercentage(a + b))),
            (Self::culling_strike_threshold(PlusPercentage(a)), Self::culling_strike_threshold(PlusPercentage(b))) => Some(Self::culling_strike_threshold(PlusPercentage(a + b))),
            (Self::gemling_skill_cost_final(PlusPercentage(a)), Self::gemling_skill_cost_final(PlusPercentage(b))) => Some(Self::gemling_skill_cost_final(PlusPercentage(a + b))),
            (Self::arcane_surge_effect_on_self(PlusPercentage(a)), Self::arcane_surge_effect_on_self(PlusPercentage(b))) => Some(Self::arcane_surge_effect_on_self(PlusPercentage(a + b))),
            (Self::strength(PlusPercentage(a)), Self::strength(PlusPercentage(b))) => Some(Self::strength(PlusPercentage(a + b))),
            (Self::evasion_rating_if_energy_shield_recharge_started_in_past_2_seconds(PlusPercentage(a)), Self::evasion_rating_if_energy_shield_recharge_started_in_past_2_seconds(PlusPercentage(b))) => Some(Self::evasion_rating_if_energy_shield_recharge_started_in_past_2_seconds(PlusPercentage(a + b))),
            (Self::block_recovery(PlusPercentage(a)), Self::block_recovery(PlusPercentage(b))) => Some(Self::block_recovery(PlusPercentage(a + b))),
            (Self::ascendancy_pathfinder_flask_charges_gained_final(PlusPercentage(a)), Self::ascendancy_pathfinder_flask_charges_gained_final(PlusPercentage(b))) => Some(Self::ascendancy_pathfinder_flask_charges_gained_final(PlusPercentage(a + b))),
            (Self::weapon_swap_speed(PlusPercentage(a)), Self::weapon_swap_speed(PlusPercentage(b))) => Some(Self::weapon_swap_speed(PlusPercentage(a + b))),
            (Self::damage_per_warcry_used_recently(PlusPercentage(a)), Self::damage_per_warcry_used_recently(PlusPercentage(b))) => Some(Self::damage_per_warcry_used_recently(PlusPercentage(a + b))),
            (Self::base_life_leech_rate(PlusPercentage(a)), Self::base_life_leech_rate(PlusPercentage(b))) => Some(Self::base_life_leech_rate(PlusPercentage(a + b))),
            (Self::flail_attack_speed(PlusPercentage(a)), Self::flail_attack_speed(PlusPercentage(b))) => Some(Self::flail_attack_speed(PlusPercentage(a + b))),
            (Self::critical_hit_damage_bonus_vs_enemies_within_2m_distance(PlusPercentage(a)), Self::critical_hit_damage_bonus_vs_enemies_within_2m_distance(PlusPercentage(b))) => Some(Self::critical_hit_damage_bonus_vs_enemies_within_2m_distance(PlusPercentage(a + b))),
            (Self::dagger_damage(PlusPercentage(a)), Self::dagger_damage(PlusPercentage(b))) => Some(Self::dagger_damage(PlusPercentage(a + b))),
            (Self::damage_vs_burning_enemies(PlusPercentage(a)), Self::damage_vs_burning_enemies(PlusPercentage(b))) => Some(Self::damage_vs_burning_enemies(PlusPercentage(a + b))),
            (Self::curse_area_of_effect(PlusPercentage(a)), Self::curse_area_of_effect(PlusPercentage(b))) => Some(Self::curse_area_of_effect(PlusPercentage(a + b))),
            (Self::map_breach_monster_quantity(PlusPercentage(a)), Self::map_breach_monster_quantity(PlusPercentage(b))) => Some(Self::map_breach_monster_quantity(PlusPercentage(a + b))),
            (Self::stun_threshold_when_not_stunned_recently(PlusPercentage(a)), Self::stun_threshold_when_not_stunned_recently(PlusPercentage(b))) => Some(Self::stun_threshold_when_not_stunned_recently(PlusPercentage(a + b))),
            (Self::mana_regeneration_rate_while_not_on_low_mana(PlusPercentage(a)), Self::mana_regeneration_rate_while_not_on_low_mana(PlusPercentage(b))) => Some(Self::mana_regeneration_rate_while_not_on_low_mana(PlusPercentage(a + b))),
            (Self::spell_damage_if_have_crit_recently(PlusPercentage(a)), Self::spell_damage_if_have_crit_recently(PlusPercentage(b))) => Some(Self::spell_damage_if_have_crit_recently(PlusPercentage(a + b))),
            (Self::life_regeneration_rate(PlusPercentage(a)), Self::life_regeneration_rate(PlusPercentage(b))) => Some(Self::life_regeneration_rate(PlusPercentage(a + b))),
            (Self::attack_damage_per_75_armour_or_evasion_on_shield(PlusPercentage(a)), Self::attack_damage_per_75_armour_or_evasion_on_shield(PlusPercentage(b))) => Some(Self::attack_damage_per_75_armour_or_evasion_on_shield(PlusPercentage(a + b))),
            (Self::totems_attack_speed_per_active_totem(PlusPercentage(a)), Self::totems_attack_speed_per_active_totem(PlusPercentage(b))) => Some(Self::totems_attack_speed_per_active_totem(PlusPercentage(a + b))),
            (Self::offering_area_of_effect(PlusPercentage(a)), Self::offering_area_of_effect(PlusPercentage(b))) => Some(Self::offering_area_of_effect(PlusPercentage(a + b))),
            (Self::energy_generated(PlusPercentage(a)), Self::energy_generated(PlusPercentage(b))) => Some(Self::energy_generated(PlusPercentage(a + b))),
            (Self::attack_area_damage(PlusPercentage(a)), Self::attack_area_damage(PlusPercentage(b))) => Some(Self::attack_area_damage(PlusPercentage(a + b))),
            (Self::titan_damage_final_against_heavy_stunned_enemies(PlusPercentage(a)), Self::titan_damage_final_against_heavy_stunned_enemies(PlusPercentage(b))) => Some(Self::titan_damage_final_against_heavy_stunned_enemies(PlusPercentage(a + b))),
            (Self::area_of_effect_with_herald_skills(PlusPercentage(a)), Self::area_of_effect_with_herald_skills(PlusPercentage(b))) => Some(Self::area_of_effect_with_herald_skills(PlusPercentage(a + b))),
            (Self::cast_speed_per_num_unique_spells_cast_recently(PlusPercentage(a)), Self::cast_speed_per_num_unique_spells_cast_recently(PlusPercentage(b))) => Some(Self::cast_speed_per_num_unique_spells_cast_recently(PlusPercentage(a + b))),
            (Self::sword_damage(PlusPercentage(a)), Self::sword_damage(PlusPercentage(b))) => Some(Self::sword_damage(PlusPercentage(a + b))),
            (Self::attack_speed_during_flask_effect(PlusPercentage(a)), Self::attack_speed_during_flask_effect(PlusPercentage(b))) => Some(Self::attack_speed_during_flask_effect(PlusPercentage(a + b))),
            (Self::map_number_of_magic_packs(PlusPercentage(a)), Self::map_number_of_magic_packs(PlusPercentage(b))) => Some(Self::map_number_of_magic_packs(PlusPercentage(a + b))),
            (Self::mana_cost_while_not_low_mana(PlusPercentage(a)), Self::mana_cost_while_not_low_mana(PlusPercentage(b))) => Some(Self::mana_cost_while_not_low_mana(PlusPercentage(a + b))),
            (Self::map_player_damage_taken_vs_breach_monsters(PlusPercentage(a)), Self::map_player_damage_taken_vs_breach_monsters(PlusPercentage(b))) => Some(Self::map_player_damage_taken_vs_breach_monsters(PlusPercentage(a + b))),
            (Self::attack_speed(PlusPercentage(a)), Self::attack_speed(PlusPercentage(b))) => Some(Self::attack_speed(PlusPercentage(a + b))),
            (Self::evasion_if_hit_recently(PlusPercentage(a)), Self::evasion_if_hit_recently(PlusPercentage(b))) => Some(Self::evasion_if_hit_recently(PlusPercentage(a + b))),
            (Self::critical_strike_chance_if_have_not_crit_recently(PlusPercentage(a)), Self::critical_strike_chance_if_have_not_crit_recently(PlusPercentage(b))) => Some(Self::critical_strike_chance_if_have_not_crit_recently(PlusPercentage(a + b))),
            (Self::shield_evasion_rating(PlusPercentage(a)), Self::shield_evasion_rating(PlusPercentage(b))) => Some(Self::shield_evasion_rating(PlusPercentage(a + b))),
            (Self::attack_speed_if_you_have_not_attacked_recently(PlusPercentage(a)), Self::attack_speed_if_you_have_not_attacked_recently(PlusPercentage(b))) => Some(Self::attack_speed_if_you_have_not_attacked_recently(PlusPercentage(a + b))),
            (Self::infernalist_critical_strike_multiplier_final(PlusPercentage(a)), Self::infernalist_critical_strike_multiplier_final(PlusPercentage(b))) => Some(Self::infernalist_critical_strike_multiplier_final(PlusPercentage(a + b))),
            (Self::stun_threshold_per_rage(PlusPercentage(a)), Self::stun_threshold_per_rage(PlusPercentage(b))) => Some(Self::stun_threshold_per_rage(PlusPercentage(a + b))),
            (Self::projectile_damage_vs_enemies_further_than_6m_distance(PlusPercentage(a)), Self::projectile_damage_vs_enemies_further_than_6m_distance(PlusPercentage(b))) => Some(Self::projectile_damage_vs_enemies_further_than_6m_distance(PlusPercentage(a + b))),
            (Self::jagged_ground_duration(PlusPercentage(a)), Self::jagged_ground_duration(PlusPercentage(b))) => Some(Self::jagged_ground_duration(PlusPercentage(a + b))),
            (Self::witchhunter_up_to_damage_final_against_targets_with_missing_focus(PlusPercentage(a)), Self::witchhunter_up_to_damage_final_against_targets_with_missing_focus(PlusPercentage(b))) => Some(Self::witchhunter_up_to_damage_final_against_targets_with_missing_focus(PlusPercentage(a + b))),
            (Self::evasion_rating(PlusPercentage(a)), Self::evasion_rating(PlusPercentage(b))) => Some(Self::evasion_rating(PlusPercentage(a + b))),
            (Self::master_of_elements_evasion_rating_final(PlusPercentage(a)), Self::master_of_elements_evasion_rating_final(PlusPercentage(b))) => Some(Self::master_of_elements_evasion_rating_final(PlusPercentage(a + b))),
            (Self::skill_area_of_effect_if_enemy_killed_recently(PlusPercentage(a)), Self::skill_area_of_effect_if_enemy_killed_recently(PlusPercentage(b))) => Some(Self::skill_area_of_effect_if_enemy_killed_recently(PlusPercentage(a + b))),
            (Self::evasion_and_physical_damage_reduction_rating(PlusPercentage(a)), Self::evasion_and_physical_damage_reduction_rating(PlusPercentage(b))) => Some(Self::evasion_and_physical_damage_reduction_rating(PlusPercentage(a + b))),
            (Self::base_cast_speed(PlusPercentage(a)), Self::base_cast_speed(PlusPercentage(b))) => Some(Self::base_cast_speed(PlusPercentage(a + b))),
            (Self::base_stun_recovery(PlusPercentage(a)), Self::base_stun_recovery(PlusPercentage(b))) => Some(Self::base_stun_recovery(PlusPercentage(a + b))),
            (Self::attack_and_cast_speed_with_lightning_skills(PlusPercentage(a)), Self::attack_and_cast_speed_with_lightning_skills(PlusPercentage(b))) => Some(Self::attack_and_cast_speed_with_lightning_skills(PlusPercentage(a + b))),
            (Self::map_non_unique_delirium_monsters_splinter_amount(PlusPercentage(a)), Self::map_non_unique_delirium_monsters_splinter_amount(PlusPercentage(b))) => Some(Self::map_non_unique_delirium_monsters_splinter_amount(PlusPercentage(a + b))),
            (Self::charm_charges_used(PlusPercentage(a)), Self::charm_charges_used(PlusPercentage(b))) => Some(Self::charm_charges_used(PlusPercentage(a + b))),
            (Self::map_ritual_monster_tankiness_for_each_time_revived(PlusPercentage(a)), Self::map_ritual_monster_tankiness_for_each_time_revived(PlusPercentage(b))) => Some(Self::map_ritual_monster_tankiness_for_each_time_revived(PlusPercentage(a + b))),
            (Self::small_passives_effect(PlusPercentage(a)), Self::small_passives_effect(PlusPercentage(b))) => Some(Self::small_passives_effect(PlusPercentage(a + b))),
            (Self::damage_vs_shocked_enemies(PlusPercentage(a)), Self::damage_vs_shocked_enemies(PlusPercentage(b))) => Some(Self::damage_vs_shocked_enemies(PlusPercentage(a + b))),
            (Self::base_slow_potency(PlusPercentage(a)), Self::base_slow_potency(PlusPercentage(b))) => Some(Self::base_slow_potency(PlusPercentage(a + b))),
            (Self::physical_damage(PlusPercentage(a)), Self::physical_damage(PlusPercentage(b))) => Some(Self::physical_damage(PlusPercentage(a + b))),
            (Self::fire_exposure_effect(PlusPercentage(a)), Self::fire_exposure_effect(PlusPercentage(b))) => Some(Self::fire_exposure_effect(PlusPercentage(a + b))),
            (Self::movement_speed_while_you_have_energy_shield(PlusPercentage(a)), Self::movement_speed_while_you_have_energy_shield(PlusPercentage(b))) => Some(Self::movement_speed_while_you_have_energy_shield(PlusPercentage(a + b))),
            (Self::attack_damage_while_surrounded(PlusPercentage(a)), Self::attack_damage_while_surrounded(PlusPercentage(b))) => Some(Self::attack_damage_while_surrounded(PlusPercentage(a + b))),
            (Self::damage_with_two_handed_weapons(PlusPercentage(a)), Self::damage_with_two_handed_weapons(PlusPercentage(b))) => Some(Self::damage_with_two_handed_weapons(PlusPercentage(a + b))),
            (Self::map_mod_effect(PlusPercentage(a)), Self::map_mod_effect(PlusPercentage(b))) => Some(Self::map_mod_effect(PlusPercentage(a + b))),
            (Self::damage_taken_final_per_tailwind(PlusPercentage(a)), Self::damage_taken_final_per_tailwind(PlusPercentage(b))) => Some(Self::damage_taken_final_per_tailwind(PlusPercentage(a + b))),
            (Self::shock_effect_with_critical_strikes(PlusPercentage(a)), Self::shock_effect_with_critical_strikes(PlusPercentage(b))) => Some(Self::shock_effect_with_critical_strikes(PlusPercentage(a + b))),
            (Self::base_elemental_status_ailment_duration(PlusPercentage(a)), Self::base_elemental_status_ailment_duration(PlusPercentage(b))) => Some(Self::base_elemental_status_ailment_duration(PlusPercentage(a + b))),
            (Self::energy_shield_from_helmet(PlusPercentage(a)), Self::energy_shield_from_helmet(PlusPercentage(b))) => Some(Self::energy_shield_from_helmet(PlusPercentage(a + b))),
            (Self::damage_per_15_strength(PlusPercentage(a)), Self::damage_per_15_strength(PlusPercentage(b))) => Some(Self::damage_per_15_strength(PlusPercentage(a + b))),
            (Self::projectile_damage(PlusPercentage(a)), Self::projectile_damage(PlusPercentage(b))) => Some(Self::projectile_damage(PlusPercentage(a + b))),
            (Self::mana_flask_charges_gained(PlusPercentage(a)), Self::mana_flask_charges_gained(PlusPercentage(b))) => Some(Self::mana_flask_charges_gained(PlusPercentage(a + b))),
            (Self::axe_attack_speed(PlusPercentage(a)), Self::axe_attack_speed(PlusPercentage(b))) => Some(Self::axe_attack_speed(PlusPercentage(a + b))),
            (Self::critical_hit_damaging_ailment_effect(PlusPercentage(a)), Self::critical_hit_damaging_ailment_effect(PlusPercentage(b))) => Some(Self::critical_hit_damaging_ailment_effect(PlusPercentage(a + b))),
            (Self::minion_damage(PlusPercentage(a)), Self::minion_damage(PlusPercentage(b))) => Some(Self::minion_damage(PlusPercentage(a + b))),
            (Self::enemies_in_presence_cooldown_recovery(PlusPercentage(a)), Self::enemies_in_presence_cooldown_recovery(PlusPercentage(b))) => Some(Self::enemies_in_presence_cooldown_recovery(PlusPercentage(a + b))),
            (Self::movement_speed_during_flask_effect(PlusPercentage(a)), Self::movement_speed_during_flask_effect(PlusPercentage(b))) => Some(Self::movement_speed_during_flask_effect(PlusPercentage(a + b))),
            (Self::marked_enemy_damage_taken(PlusPercentage(a)), Self::marked_enemy_damage_taken(PlusPercentage(b))) => Some(Self::marked_enemy_damage_taken(PlusPercentage(a + b))),
            (Self::map_affliction_secondary_wave_acceleration(PlusPercentage(a)), Self::map_affliction_secondary_wave_acceleration(PlusPercentage(b))) => Some(Self::map_affliction_secondary_wave_acceleration(PlusPercentage(a + b))),
            (Self::shock_chance(PlusPercentage(a)), Self::shock_chance(PlusPercentage(b))) => Some(Self::shock_chance(PlusPercentage(a + b))),
            (Self::movement_speed_if_cast_a_mark_spell_recently(PlusPercentage(a)), Self::movement_speed_if_cast_a_mark_spell_recently(PlusPercentage(b))) => Some(Self::movement_speed_if_cast_a_mark_spell_recently(PlusPercentage(a + b))),
            (Self::energy_shield_recovery_rate_if_not_hit_recently(PlusPercentage(a)), Self::energy_shield_recovery_rate_if_not_hit_recently(PlusPercentage(b))) => Some(Self::energy_shield_recovery_rate_if_not_hit_recently(PlusPercentage(a + b))),
            (Self::base_frenzy_charge_duration(PlusPercentage(a)), Self::base_frenzy_charge_duration(PlusPercentage(b))) => Some(Self::base_frenzy_charge_duration(PlusPercentage(a + b))),
            (Self::global_item_attribute_requirements(PlusPercentage(a)), Self::global_item_attribute_requirements(PlusPercentage(b))) => Some(Self::global_item_attribute_requirements(PlusPercentage(a + b))),
            (Self::damage_per_active_curse_on_self(PlusPercentage(a)), Self::damage_per_active_curse_on_self(PlusPercentage(b))) => Some(Self::damage_per_active_curse_on_self(PlusPercentage(a + b))),
            (Self::bow_accuracy_rating(PlusPercentage(a)), Self::bow_accuracy_rating(PlusPercentage(b))) => Some(Self::bow_accuracy_rating(PlusPercentage(a + b))),
            (Self::hit_damage_stun_multiplier_vs_enemies_on_low_life(PlusPercentage(a)), Self::hit_damage_stun_multiplier_vs_enemies_on_low_life(PlusPercentage(b))) => Some(Self::hit_damage_stun_multiplier_vs_enemies_on_low_life(PlusPercentage(a + b))),
            (Self::cold_damage(PlusPercentage(a)), Self::cold_damage(PlusPercentage(b))) => Some(Self::cold_damage(PlusPercentage(a + b))),
            (Self::minion_critical_strike_chance(PlusPercentage(a)), Self::minion_critical_strike_chance(PlusPercentage(b))) => Some(Self::minion_critical_strike_chance(PlusPercentage(a + b))),
            (Self::body_armour_evasion_rating(PlusPercentage(a)), Self::body_armour_evasion_rating(PlusPercentage(b))) => Some(Self::body_armour_evasion_rating(PlusPercentage(a + b))),
            (Self::shield_armour(PlusPercentage(a)), Self::shield_armour(PlusPercentage(b))) => Some(Self::shield_armour(PlusPercentage(a + b))),
            (Self::ascendancy_warbringer_block_chance_final(PlusPercentage(a)), Self::ascendancy_warbringer_block_chance_final(PlusPercentage(b))) => Some(Self::ascendancy_warbringer_block_chance_final(PlusPercentage(a + b))),
            (Self::map_player_shrine_effect_duration(PlusPercentage(a)), Self::map_player_shrine_effect_duration(PlusPercentage(b))) => Some(Self::map_player_shrine_effect_duration(PlusPercentage(a + b))),
            (Self::map_ritual_omen_chance(PlusPercentage(a)), Self::map_ritual_omen_chance(PlusPercentage(b))) => Some(Self::map_ritual_omen_chance(PlusPercentage(a + b))),
            (Self::ignite_effect_on_self(PlusPercentage(a)), Self::ignite_effect_on_self(PlusPercentage(b))) => Some(Self::ignite_effect_on_self(PlusPercentage(a + b))),
            (Self::flask_duration(PlusPercentage(a)), Self::flask_duration(PlusPercentage(b))) => Some(Self::flask_duration(PlusPercentage(a + b))),
            (Self::minion_maximum_life(PlusPercentage(a)), Self::minion_maximum_life(PlusPercentage(b))) => Some(Self::minion_maximum_life(PlusPercentage(a + b))),
            (Self::defences_while_wielding_staff(PlusPercentage(a)), Self::defences_while_wielding_staff(PlusPercentage(b))) => Some(Self::defences_while_wielding_staff(PlusPercentage(a + b))),
            (Self::witchhunter_armour_evasion_final(PlusPercentage(a)), Self::witchhunter_armour_evasion_final(PlusPercentage(b))) => Some(Self::witchhunter_armour_evasion_final(PlusPercentage(a + b))),
            (Self::map_breach_chests_final(PlusPercentage(a)), Self::map_breach_chests_final(PlusPercentage(b))) => Some(Self::map_breach_chests_final(PlusPercentage(a + b))),
            (Self::damage_vs_dazed_enemies(PlusPercentage(a)), Self::damage_vs_dazed_enemies(PlusPercentage(b))) => Some(Self::damage_vs_dazed_enemies(PlusPercentage(a + b))),
            (Self::elemental_damage_with_attack_skills_while_using_flask(PlusPercentage(a)), Self::elemental_damage_with_attack_skills_while_using_flask(PlusPercentage(b))) => Some(Self::elemental_damage_with_attack_skills_while_using_flask(PlusPercentage(a + b))),
            (Self::spell_damage_while_es_full(PlusPercentage(a)), Self::spell_damage_while_es_full(PlusPercentage(b))) => Some(Self::spell_damage_while_es_full(PlusPercentage(a + b))),
            (Self::map_number_of_rare_packs(PlusPercentage(a)), Self::map_number_of_rare_packs(PlusPercentage(b))) => Some(Self::map_number_of_rare_packs(PlusPercentage(a + b))),
            (Self::bow_attack_speed(PlusPercentage(a)), Self::bow_attack_speed(PlusPercentage(b))) => Some(Self::bow_attack_speed(PlusPercentage(a + b))),
            (Self::melee_attack_speed(PlusPercentage(a)), Self::melee_attack_speed(PlusPercentage(b))) => Some(Self::melee_attack_speed(PlusPercentage(a + b))),
            (Self::summon_totem_cast_speed(PlusPercentage(a)), Self::summon_totem_cast_speed(PlusPercentage(b))) => Some(Self::summon_totem_cast_speed(PlusPercentage(a + b))),
            (Self::damage_if_triggered_skill_recently(PlusPercentage(a)), Self::damage_if_triggered_skill_recently(PlusPercentage(b))) => Some(Self::damage_if_triggered_skill_recently(PlusPercentage(a + b))),
            (Self::attack_damage_for_4_seconds_on_cast(PlusPercentage(a)), Self::attack_damage_for_4_seconds_on_cast(PlusPercentage(b))) => Some(Self::attack_damage_for_4_seconds_on_cast(PlusPercentage(a + b))),
            (Self::attack_speed_while_dual_wielding(PlusPercentage(a)), Self::attack_speed_while_dual_wielding(PlusPercentage(b))) => Some(Self::attack_speed_while_dual_wielding(PlusPercentage(a + b))),
            (Self::damage_vs_enemies_on_full_life(PlusPercentage(a)), Self::damage_vs_enemies_on_full_life(PlusPercentage(b))) => Some(Self::damage_vs_enemies_on_full_life(PlusPercentage(a + b))),
            (Self::stun_threshold(PlusPercentage(a)), Self::stun_threshold(PlusPercentage(b))) => Some(Self::stun_threshold(PlusPercentage(a + b))),
            (Self::map_pinnacle_boss_item_dropped_rarity_final(PlusPercentage(a)), Self::map_pinnacle_boss_item_dropped_rarity_final(PlusPercentage(b))) => Some(Self::map_pinnacle_boss_item_dropped_rarity_final(PlusPercentage(a + b))),
            (Self::chill_duration(PlusPercentage(a)), Self::chill_duration(PlusPercentage(b))) => Some(Self::chill_duration(PlusPercentage(a + b))),
            (Self::spell_critical_strike_chance_while_wielding_staff(PlusPercentage(a)), Self::spell_critical_strike_chance_while_wielding_staff(PlusPercentage(b))) => Some(Self::spell_critical_strike_chance_while_wielding_staff(PlusPercentage(a + b))),
            (Self::pathfinder_poison_duration_final(PlusPercentage(a)), Self::pathfinder_poison_duration_final(PlusPercentage(b))) => Some(Self::pathfinder_poison_duration_final(PlusPercentage(a + b))),
            (Self::map_boss_experience_final(PlusPercentage(a)), Self::map_boss_experience_final(PlusPercentage(b))) => Some(Self::map_boss_experience_final(PlusPercentage(a + b))),
            (Self::melee_critical_strike_chance(PlusPercentage(a)), Self::melee_critical_strike_chance(PlusPercentage(b))) => Some(Self::melee_critical_strike_chance(PlusPercentage(a + b))),
            (Self::herald_skills_mana_reservation(PlusPercentage(a)), Self::herald_skills_mana_reservation(PlusPercentage(b))) => Some(Self::herald_skills_mana_reservation(PlusPercentage(a + b))),
            (Self::damage_while_wielding_wand(PlusPercentage(a)), Self::damage_while_wielding_wand(PlusPercentage(b))) => Some(Self::damage_while_wielding_wand(PlusPercentage(a + b))),
            (Self::damage_vs_enemies_affected_by_status_ailments(PlusPercentage(a)), Self::damage_vs_enemies_affected_by_status_ailments(PlusPercentage(b))) => Some(Self::damage_vs_enemies_affected_by_status_ailments(PlusPercentage(a + b))),
            (Self::mark_skill_duration(PlusPercentage(a)), Self::mark_skill_duration(PlusPercentage(b))) => Some(Self::mark_skill_duration(PlusPercentage(a + b))),
            (Self::map_delirium_daemon_damage(PlusPercentage(a)), Self::map_delirium_daemon_damage(PlusPercentage(b))) => Some(Self::map_delirium_daemon_damage(PlusPercentage(a + b))),
            (Self::thorns_damage_if_blocked_recently(PlusPercentage(a)), Self::thorns_damage_if_blocked_recently(PlusPercentage(b))) => Some(Self::thorns_damage_if_blocked_recently(PlusPercentage(a + b))),
            (Self::minion_attack_and_cast_speed(PlusPercentage(a)), Self::minion_attack_and_cast_speed(PlusPercentage(b))) => Some(Self::minion_attack_and_cast_speed(PlusPercentage(a + b))),
            (Self::blind_effect(PlusPercentage(a)), Self::blind_effect(PlusPercentage(b))) => Some(Self::blind_effect(PlusPercentage(a + b))),
            (Self::hit_damage_stun_multiplier(PlusPercentage(a)), Self::hit_damage_stun_multiplier(PlusPercentage(b))) => Some(Self::hit_damage_stun_multiplier(PlusPercentage(a + b))),
            (Self::map_delirium_boss_splinter_amount(PlusPercentage(a)), Self::map_delirium_boss_splinter_amount(PlusPercentage(b))) => Some(Self::map_delirium_boss_splinter_amount(PlusPercentage(a + b))),
            (Self::flask_charges_gained(PlusPercentage(a)), Self::flask_charges_gained(PlusPercentage(b))) => Some(Self::flask_charges_gained(PlusPercentage(a + b))),
            (Self::melee_damage_when_on_full_life(PlusPercentage(a)), Self::melee_damage_when_on_full_life(PlusPercentage(b))) => Some(Self::melee_damage_when_on_full_life(PlusPercentage(a + b))),
            (Self::armour_if_consumed_endurance_charge_recently(PlusPercentage(a)), Self::armour_if_consumed_endurance_charge_recently(PlusPercentage(b))) => Some(Self::armour_if_consumed_endurance_charge_recently(PlusPercentage(a + b))),
            (Self::armour_per_rage(PlusPercentage(a)), Self::armour_per_rage(PlusPercentage(b))) => Some(Self::armour_per_rage(PlusPercentage(a + b))),
            (Self::flask_mana_charges_used(PlusPercentage(a)), Self::flask_mana_charges_used(PlusPercentage(b))) => Some(Self::flask_mana_charges_used(PlusPercentage(a + b))),
            (Self::endurance_charge_duration(PlusPercentage(a)), Self::endurance_charge_duration(PlusPercentage(b))) => Some(Self::endurance_charge_duration(PlusPercentage(a + b))),
            (Self::damage_with_one_handed_weapons(PlusPercentage(a)), Self::damage_with_one_handed_weapons(PlusPercentage(b))) => Some(Self::damage_with_one_handed_weapons(PlusPercentage(a + b))),
            (Self::flask_life_and_mana_recovery_while_using_charm(PlusPercentage(a)), Self::flask_life_and_mana_recovery_while_using_charm(PlusPercentage(b))) => Some(Self::flask_life_and_mana_recovery_while_using_charm(PlusPercentage(a + b))),
            (Self::hit_damage_stun_multiplier_vs_enemies_at_close_range(PlusPercentage(a)), Self::hit_damage_stun_multiplier_vs_enemies_at_close_range(PlusPercentage(b))) => Some(Self::hit_damage_stun_multiplier_vs_enemies_at_close_range(PlusPercentage(a + b))),
            (Self::curse_delay(PlusPercentage(a)), Self::curse_delay(PlusPercentage(b))) => Some(Self::curse_delay(PlusPercentage(a + b))),
            (Self::evasion_rating_while_surrounded(PlusPercentage(a)), Self::evasion_rating_while_surrounded(PlusPercentage(b))) => Some(Self::evasion_rating_while_surrounded(PlusPercentage(a + b))),
            (Self::critical_strike_chance_vs_enemies_further_than_6m_distance(PlusPercentage(a)), Self::critical_strike_chance_vs_enemies_further_than_6m_distance(PlusPercentage(b))) => Some(Self::critical_strike_chance_vs_enemies_further_than_6m_distance(PlusPercentage(a + b))),
            (Self::totems_spells_cast_speed_per_active_totem(PlusPercentage(a)), Self::totems_spells_cast_speed_per_active_totem(PlusPercentage(b))) => Some(Self::totems_spells_cast_speed_per_active_totem(PlusPercentage(a + b))),
            (Self::map_item_drop_rarity(PlusPercentage(a)), Self::map_item_drop_rarity(PlusPercentage(b))) => Some(Self::map_item_drop_rarity(PlusPercentage(a + b))),
            (Self::trap_critical_strike_chance(PlusPercentage(a)), Self::trap_critical_strike_chance(PlusPercentage(b))) => Some(Self::trap_critical_strike_chance(PlusPercentage(a + b))),
            (Self::warcry_damage(PlusPercentage(a)), Self::warcry_damage(PlusPercentage(b))) => Some(Self::warcry_damage(PlusPercentage(a + b))),
            (Self::map_jewel_drop_chance_in_forest_biome(PlusPercentage(a)), Self::map_jewel_drop_chance_in_forest_biome(PlusPercentage(b))) => Some(Self::map_jewel_drop_chance_in_forest_biome(PlusPercentage(a + b))),
            (Self::map_sanctum_and_ultimatum_key_drop_chance_in_desert_biome(PlusPercentage(a)), Self::map_sanctum_and_ultimatum_key_drop_chance_in_desert_biome(PlusPercentage(b))) => Some(Self::map_sanctum_and_ultimatum_key_drop_chance_in_desert_biome(PlusPercentage(a + b))),
            (Self::life_recovery_from_flasks_while_on_low_life(PlusPercentage(a)), Self::life_recovery_from_flasks_while_on_low_life(PlusPercentage(b))) => Some(Self::life_recovery_from_flasks_while_on_low_life(PlusPercentage(a + b))),
            (Self::flask_effect(PlusPercentage(a)), Self::flask_effect(PlusPercentage(b))) => Some(Self::flask_effect(PlusPercentage(a + b))),
            (Self::offering_duration(PlusPercentage(a)), Self::offering_duration(PlusPercentage(b))) => Some(Self::offering_duration(PlusPercentage(a + b))),
            (Self::base_life_leech_amount(PlusPercentage(a)), Self::base_life_leech_amount(PlusPercentage(b))) => Some(Self::base_life_leech_amount(PlusPercentage(a + b))),
            (Self::map_tower_augment_quantity(PlusPercentage(a)), Self::map_tower_augment_quantity(PlusPercentage(b))) => Some(Self::map_tower_augment_quantity(PlusPercentage(a + b))),
            (Self::flask_mana_to_recover(PlusPercentage(a)), Self::flask_mana_to_recover(PlusPercentage(b))) => Some(Self::flask_mana_to_recover(PlusPercentage(a + b))),
            (Self::mana_regeneration_rate(PlusPercentage(a)), Self::mana_regeneration_rate(PlusPercentage(b))) => Some(Self::mana_regeneration_rate(PlusPercentage(a + b))),
            (Self::base_cooldown_speed(PlusPercentage(a)), Self::base_cooldown_speed(PlusPercentage(b))) => Some(Self::base_cooldown_speed(PlusPercentage(a + b))),
            (Self::attack_damage(PlusPercentage(a)), Self::attack_damage(PlusPercentage(b))) => Some(Self::attack_damage(PlusPercentage(a + b))),
            (Self::accuracy_rating_while_dual_wielding(PlusPercentage(a)), Self::accuracy_rating_while_dual_wielding(PlusPercentage(b))) => Some(Self::accuracy_rating_while_dual_wielding(PlusPercentage(a + b))),
            (Self::one_handed_attack_ailment_chance(PlusPercentage(a)), Self::one_handed_attack_ailment_chance(PlusPercentage(b))) => Some(Self::one_handed_attack_ailment_chance(PlusPercentage(a + b))),
            (Self::slam_skill_area_of_effect(PlusPercentage(a)), Self::slam_skill_area_of_effect(PlusPercentage(b))) => Some(Self::slam_skill_area_of_effect(PlusPercentage(a + b))),
            (Self::accuracy_rating(PlusPercentage(a)), Self::accuracy_rating(PlusPercentage(b))) => Some(Self::accuracy_rating(PlusPercentage(a + b))),
            (Self::dexterity(PlusPercentage(a)), Self::dexterity(PlusPercentage(b))) => Some(Self::dexterity(PlusPercentage(a + b))),
            (Self::flail_damage(PlusPercentage(a)), Self::flail_damage(PlusPercentage(b))) => Some(Self::flail_damage(PlusPercentage(a + b))),
            (Self::minion_skill_area_of_effect(PlusPercentage(a)), Self::minion_skill_area_of_effect(PlusPercentage(b))) => Some(Self::minion_skill_area_of_effect(PlusPercentage(a + b))),
            (Self::empowered_attack_hit_damage_stun_multiplier(PlusPercentage(a)), Self::empowered_attack_hit_damage_stun_multiplier(PlusPercentage(b))) => Some(Self::empowered_attack_hit_damage_stun_multiplier(PlusPercentage(a + b))),
            (Self::critical_strike_chance_vs_shocked_enemies(PlusPercentage(a)), Self::critical_strike_chance_vs_shocked_enemies(PlusPercentage(b))) => Some(Self::critical_strike_chance_vs_shocked_enemies(PlusPercentage(a + b))),
            (Self::hit_damage_stun_multiplier_with_crits(PlusPercentage(a)), Self::hit_damage_stun_multiplier_with_crits(PlusPercentage(b))) => Some(Self::hit_damage_stun_multiplier_with_crits(PlusPercentage(a + b))),
            (Self::spell_damage_per_100_maximum_mana_up_to_60(PlusPercentage(a)), Self::spell_damage_per_100_maximum_mana_up_to_60(PlusPercentage(b))) => Some(Self::spell_damage_per_100_maximum_mana_up_to_60(PlusPercentage(a + b))),
            (Self::cast_speed_while_holding_staff(PlusPercentage(a)), Self::cast_speed_while_holding_staff(PlusPercentage(b))) => Some(Self::cast_speed_while_holding_staff(PlusPercentage(a + b))),
            (Self::movement_speed_for_4_seconds_on_block(PlusPercentage(a)), Self::movement_speed_for_4_seconds_on_block(PlusPercentage(b))) => Some(Self::movement_speed_for_4_seconds_on_block(PlusPercentage(a + b))),
            (Self::warcry_cooldown_speed(PlusPercentage(a)), Self::warcry_cooldown_speed(PlusPercentage(b))) => Some(Self::warcry_cooldown_speed(PlusPercentage(a + b))),
            (Self::attack_speed_if_enemy_killed_recently(PlusPercentage(a)), Self::attack_speed_if_enemy_killed_recently(PlusPercentage(b))) => Some(Self::attack_speed_if_enemy_killed_recently(PlusPercentage(a + b))),
            (Self::claw_damage(PlusPercentage(a)), Self::claw_damage(PlusPercentage(b))) => Some(Self::claw_damage(PlusPercentage(a + b))),
            (Self::mark_skill_cast_speed(PlusPercentage(a)), Self::mark_skill_cast_speed(PlusPercentage(b))) => Some(Self::mark_skill_cast_speed(PlusPercentage(a + b))),
            (Self::non_damaging_ailment_effect_with_critical_strikes(PlusPercentage(a)), Self::non_damaging_ailment_effect_with_critical_strikes(PlusPercentage(b))) => Some(Self::non_damaging_ailment_effect_with_critical_strikes(PlusPercentage(a + b))),
            (Self::grenade_skill_cooldown_speed(PlusPercentage(a)), Self::grenade_skill_cooldown_speed(PlusPercentage(b))) => Some(Self::grenade_skill_cooldown_speed(PlusPercentage(a + b))),
            (Self::grenade_skill_area_of_effect(PlusPercentage(a)), Self::grenade_skill_area_of_effect(PlusPercentage(b))) => Some(Self::grenade_skill_area_of_effect(PlusPercentage(a + b))),
            (Self::map_ritual_rare_monsters(PlusPercentage(a)), Self::map_ritual_rare_monsters(PlusPercentage(b))) => Some(Self::map_ritual_rare_monsters(PlusPercentage(a + b))),
            (Self::crossbow_attack_speed(PlusPercentage(a)), Self::crossbow_attack_speed(PlusPercentage(b))) => Some(Self::crossbow_attack_speed(PlusPercentage(a + b))),
            (Self::elemental_damage_if_have_crit_recently(PlusPercentage(a)), Self::elemental_damage_if_have_crit_recently(PlusPercentage(b))) => Some(Self::elemental_damage_if_have_crit_recently(PlusPercentage(a + b))),
            (Self::stun_threshold_when_on_full_life(PlusPercentage(a)), Self::stun_threshold_when_on_full_life(PlusPercentage(b))) => Some(Self::stun_threshold_when_on_full_life(PlusPercentage(a + b))),
            (Self::quarterstaff_hit_damage_freeze_multiplier(PlusPercentage(a)), Self::quarterstaff_hit_damage_freeze_multiplier(PlusPercentage(b))) => Some(Self::quarterstaff_hit_damage_freeze_multiplier(PlusPercentage(a + b))),
            _ => None, // Cannot add different types
        }
    }
}

impl AddAssign for StatType {
    fn add_assign(&mut self, other: Self) {
        if let Some(result) = self.clone() + other {
            *self = result;
        }
    }
}

macro_rules! impl_basic_maths_for {
    ($enum_name:ident) => {
        impl Add for $enum_name {
            type Output = Self;
            fn add(self, other: Self) -> Self {
                Self(self.0 + other.0)
            }
        }

        impl AddAssign for $enum_name {
            fn add_assign(&mut self, other: Self) {
                self.0 += other.0;
            }
        }
    };
}

#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Plus(pub f32);

#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Minus(pub f32);

#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Multiply(pub f32);

#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Divide(pub f32);

#[derive(Debug, Clone, Copy, PartialEq)]
pub struct PlusPercentage(pub f32);

#[derive(Debug, Clone, Copy, PartialEq)]
pub struct MinusPercentage(pub f32);

impl_basic_maths_for!(Plus);
impl_basic_maths_for!(Minus);
impl_basic_maths_for!(Multiply);
impl_basic_maths_for!(Divide);
impl_basic_maths_for!(PlusPercentage);
impl_basic_maths_for!(MinusPercentage);
