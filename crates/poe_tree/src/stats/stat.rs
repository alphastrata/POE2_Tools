// @generated by build.rs
use super::arithmetic::*;
use serde::{Deserialize, de::{Deserializer, Error}};
use std::collections::HashMap;

#[derive(Debug, Clone)]
pub enum Stat {
    AccuracyRating(PlusPercentage),
    AccuracyRatingEqualToAttackCriticalStrikeChance(Other),
    AccuracyRatingVsBleedingEnemies(Other),
    AccuracyRatingVsEnemiesInCloseRange(Other),
    AccuracyRatingVsRareOrUniqueEnemy(Other),
    AccuracyRatingWhileDualWielding(PlusPercentage),
    AdditionalAllAttributes(Other),
    AdditionalCriticalStrikeChancePermyriadWithHeraldSkills(Other),
    AdditionalMaximumAllElementalResistances(Other),
    AdditionalPhysicalDamageReductionPerJade(Other),
    AdditiveArmourModifiersApplyToEnergyShieldRechargeRateAtValue(Other),
    AftershockAreaOfEffect(PlusPercentage),
    AggravateBleedingOlderThanMsOnHit(Other),
    AggravateBleedingOnAttackCritChance(Other),
    AggravateBleedingOnExertedAttackHitChance(Other),
    AggravateBleedingWhenInflictedVsEnemiesOnJaggedGroundChance(Other),
    AilmentChance(PlusPercentage),
    AilmentChanceVsRareOrUniqueEnemy(Other),
    AilmentEffect(PlusPercentage),
    AilmentThreshold(PlusPercentage),
    AilmentThresholdFromLowestOfBaseBootsEvasionRatingAndArmour(Other),
    AilmentThresholdPerDexterity(Other),
    AllAttributes(PlusPercentage),
    AllDamageCanChill(Other),
    AllDamageCanShock(Other),
    AllSkillGemLevel(Plus),
    AllSkillGemQuality(Plus),
    AlliesInPresenceAccuracyRating(Other),
    AlliesInPresenceAttackSpeed(PlusPercentage),
    AlliesInPresenceLifeRegenerationRatePerMinuteEqualToYourMaximumLife(Other),
    AncestralSlamEveryOtherSlam(Other),
    ArcaneSurgeEffectOnSelf(PlusPercentage),
    AreaDamage(PlusPercentage),
    AreaOfEffectIfEnemyStunnedWithTwoHandedMeleeWeaponRecently(Other),
    AreaOfEffectIfHaveStunnedAnEnemyRecently(Other),
    AreaOfEffectWithHeraldSkills(Other),
    AreaSkillKnockbackChance(Other),
    ArmourAndEvasionOnLowLife(PlusPercentage),
    ArmourBreakAmount(PlusPercentage),
    ArmourBreakAmountVsEnemiesAffectedByAilments(Other),
    ArmourBreakDamageDealtAsArmourBreak(Other),
    ArmourBreakDuration(PlusPercentage),
    ArmourBreakEqualToPhysicalDamageDealtOnCriticalStrikeWithSpells(Other),
    ArmourBreakOfArmourOnHeavyStunning(Other),
    ArmourEvasionWhileLeeching(Other),
    ArmourFromStrengthRequirementsFromBootsGlovesHelmets(Other),
    ArmourIfConsumedEnduranceChargeRecently(Other),
    ArmourIfHaveBeenHitRecently(Other),
    ArmourIfHitEnemyWithMeleeAttackRecently(Other),
    ArmourIfYouHaventBeenHitRecently(Other),
    ArmourPerRage(Other),
    ArmourWhileSurrounded(Other),
    ArrowBaseNumberOfTargetsToPierce(Other),
    ArrowCriticalStrikeChanceMaxAsDistanceTravelledIncreases(Other),
    ArrowSpeedAdditiveModifiersAlsoApplyToBowDamage(Other),
    AscendancyBeidatsGazeManaPerXMaximumLife(Other),
    AscendancyBeidatsHandEnergyShieldPerXMaximumLife(Other),
    AscendancyBeidatsWillSpiritPerXMaximumLife(Other),
    AscendancyChronomancerApexOfTheMomentBaseSlowAuraValue(Other),
    AscendancyEnergyGeneratedFinal(Other),
    AscendancyPathfinderFlaskChargesGainedFinal(Other),
    AscendancyTitanDamageReductionRatingFromBodyArmourFinal(Other),
    AscendancyWarbringerBlockChanceFinal(Other),
    AtlasKeystoneCorruptionRoulette(Other),
    AtlasKeystoneExtremeArchaeology(Other),
    AtlasKeystonePrefixOrSuffixModEffectFinal(Other),
    AttackAdditionalCriticalStrikeChancePermyriad(Other),
    AttackAndCastSpeed(PlusPercentage),
    AttackAndCastSpeedOnPlacingTotem(Other),
    AttackAndCastSpeedWhileAffectedByAManaFlask(Other),
    AttackAndCastSpeedWithElementalSkills(Other),
    AttackAndCastSpeedWithLightningSkills(Other),
    AttackAreaDamage(PlusPercentage),
    AttackAreaOfEffect(PlusPercentage),
    AttackCriticalStrikeChance(PlusPercentage),
    AttackCriticalStrikeMultiplier(Plus),
    AttackDamage(PlusPercentage),
    AttackDamageVsBleedingEnemies(PlusPercentage),
    AttackDamageVsRareOrUniqueEnemy(Other),
    AttackDamageWhenOnFullLife(Other),
    AttackDamageWhenOnLowLife(Other),
    AttackDamageWhileAllyInPresence(Other),
    AttackDamageWhileSurrounded(Other),
    AttackManaCost(PlusPercentage),
    AttackSkillsAdditionalTotemsAllowed(Other),
    AttackSkillsDamageWhileHoldingShield(Other),
    AttackSpeed(PlusPercentage),
    AttackSpeedDuringFlaskEffect(Other),
    AttackSpeedIfEnemyKilledRecently(Other),
    AttackSpeedIfHaveBeenHitRecently(Other),
    AttackSpeedIfRareOrUniqueEnemyNearby(Other),
    AttackSpeedIfYouHaveNotAttackedRecently(Other),
    AttackSpeedWhileDualWielding(PlusPercentage),
    AttackSpeedWhileHoldingShield(Other),
    AttackSpeedWhileSurrounded(Other),
    AttacksChanceToBlindOnHit(Other),
    AuraEffect(PlusPercentage),
    AxeAttackSpeed(PlusPercentage),
    AxeDamage(PlusPercentage),
    BaseAggravateBleedingOnAttackHitChance(Other),
    BaseAllAilmentDurationOnSelf(PlusPercentage),
    BaseArmourAppliesToFireDamage(Other),
    BaseAttackDamagePenetratesElementalResist(Other),
    BaseBleedDuration(PlusPercentage),
    BaseBleedingEffect(PlusPercentage),
    BaseBlockDamageTaken(Other),
    BaseBodyArmourPermyriadToGainAsPhysicalThornsDamage(Other),
    BaseCastSpeed(PlusPercentage),
    BaseChanceToInflictBleeding(Other),
    BaseChanceToNotConsumeCorpse(Other),
    BaseChanceToPierce(Other),
    BaseChanceToPoisonOnHit(Other),
    BaseChanceToPoisonOnHitVsNonPoisonedEnemies(Other),
    BaseChaosDamageResistance(Other),
    BaseColdDamageResistance(Other),
    BaseCooldownSpeed(PlusPercentage),
    BaseCost(PlusPercentage),
    BaseCriticalStrikeMultiplier(Plus),
    BaseCurseDuration(PlusPercentage),
    BaseDamageRemovedFromManaBeforeLife(Other),
    BaseDamagingAilmentEffect(PlusPercentage),
    BaseDarkness(Other),
    BaseDarknessRefreshRateMs(Other),
    BaseDebuffSlowMagnitude(PlusPercentage),
    BaseDexterity(Other),
    BaseDexterityAndIntelligence(Other),
    BaseElementalStatusAilmentDuration(PlusPercentage),
    BaseEnemyCriticalStrikeChanceAgainstSelf(Other),
    BaseEvasionRating(Other),
    BaseFireDamageResistance(Other),
    BaseFrenzyChargeDuration(PlusPercentage),
    BaseIgniteEffect(PlusPercentage),
    BaseIntelligence(Other),
    BaseLifeGainedOnEnemyDeath(Other),
    BaseLifeLeechAmount(PlusPercentage),
    BaseLifeLeechDoesNotStopAtFullLife(Other),
    BaseLifeLeechFromAllSpellDamagePermyriad(Other),
    BaseLifeLeechRate(PlusPercentage),
    BaseManaCost(MinusPercentage),
    BaseManaLeechAmount(PlusPercentage),
    BaseManaLeechIsInstant(Other),
    BaseMaximumChaosDamageResistance(Other),
    BaseMaximumColdDamageResistance(Other),
    BaseMaximumEnergyShield(Other),
    BaseMaximumFireDamageResistance(Other),
    BaseMaximumLife(Other),
    BaseMaximumLightningDamageResistance(Other),
    BaseMaximumMana(Other),
    BaseMovementVelocity(PlusPercentage),
    BasePenetrateElementalResistances(Other),
    BasePhysicalDamageReductionRating(Other),
    BasePoisonDuration(PlusPercentage),
    BasePoisonEffect(PlusPercentage),
    BaseProjectileSpeed(PlusPercentage),
    BaseReduceEnemyColdResistance(Other),
    BaseReduceEnemyFireResistance(Other),
    BaseReduceEnemyLightningResistance(Other),
    BaseResistAllElements(Other),
    BaseSelfCriticalStrikeMultiplier(MinusPercentage),
    BaseSelfFreezeDuration(MinusPercentage),
    BaseSelfIgniteDuration(MinusPercentage),
    BaseSelfShockDuration(MinusPercentage),
    BaseShouldHaveArcaneSurgeFromStat(Other),
    BaseSkillAreaOfEffect(PlusPercentage),
    BaseSkillCostLifeInsteadOfMana(Other),
    BaseSlowPotency(PlusPercentage),
    BaseSpellCriticalStrikeChanceOverridePermyriad(Other),
    BaseSpellCriticalStrikeMultiplier(Plus),
    BaseStrength(Other),
    BaseStrengthAndDexterity(Other),
    BaseStrengthAndIntelligence(Other),
    BaseStunRecovery(PlusPercentage),
    BaseThornsCriticalStrikeChance(Other),
    BaseThornsCriticalStrikeMultiplier(Plus),
    BleedOnCrit(Other),
    BleedOnCritWithAttacks(Other),
    BlindEffect(PlusPercentage),
    BlindEnemiesWhenTheyStunYou(Other),
    BlockChance(PlusPercentage),
    BlockChanceFromEquippedShieldIs(Other),
    BlockChanceIfBlockedWithActiveBlockRecently(Other),
    BlockRecovery(PlusPercentage),
    BodyArmour(PlusPercentage),
    BodyArmourEvasionRating(PlusPercentage),
    BowAccuracyRating(PlusPercentage),
    BowAttackSpeed(PlusPercentage),
    BowCriticalStrikeMultiplier(Plus),
    BowDamage(PlusPercentage),
    BreachFlameEffectsDoubled(Other),
    BuffTimePassedOnlyBuffCategory(Other),
    BuildupJadeEveryXMs(Other),
    CanApplyAdditionalChill(Other),
    CanApplyAdditionalShock(Other),
    CanBlockAllHitsWhileShieldIsLowered(Other),
    CannotBeBlindedWhileOnFullLife(Other),
    CannotGainSpiritFromEquipment(Other),
    CannotRechargeEnergyShield(Other),
    CastSpeedForColdSkills(PlusPercentage),
    CastSpeedIfHaveCritRecently(Other),
    CastSpeedPerNumUniqueSpellsCastRecently(Other),
    CastSpeedWhenOnFullLife(Other),
    CastSpeedWhenOnLowLife(Other),
    CastSpeedWhileHoldingStaff(Other),
    ChanceForSkillsToAvoidCooldown(Other),
    ChanceToCreateShockingGroundOnShock(Other),
    ChanceToDoubleArmourEffectOnHit(Other),
    ChanceToDoubleEffectOfRemovingFrenzyCharges(Other),
    ChanceToForkExtraProjectile(Other),
    ChanceToGainOnslaughtOnKillWithAxes(Other),
    ChanceToPoisonOnCriticalStrikeWithDagger(Other),
    ChanceToSummonTwoTotems(Other),
    ChaosDamage(PlusPercentage),
    ChaosDamageResistanceIsDoubled(Other),
    ChaosSkillGemLevel(Plus),
    ChargesGained(PlusPercentage),
    CharmChargesGained(PlusPercentage),
    CharmChargesUsed(PlusPercentage),
    CharmDuration(PlusPercentage),
    CharmEffect(PlusPercentage),
    CharmsChanceOnUseToUseAnotherCharmWithoutConsumingCharges(Other),
    CharmsChanceToNotConsumeCharges(Other),
    ChillAndFreezeDuration(PlusPercentage),
    ChillDuration(PlusPercentage),
    ChillEffect(PlusPercentage),
    ChillEffectivenessOnSelf(PlusPercentage),
    ClawAccuracyRating(PlusPercentage),
    ClawAttackSpeed(PlusPercentage),
    ClawCriticalStrikeChance(PlusPercentage),
    ClawDamage(PlusPercentage),
    ColdDamage(PlusPercentage),
    ColdDamageWhileAffectedByHeraldOfIce(Other),
    ColdExposureEffect(PlusPercentage),
    ColdExposureYouInflictLowersColdResistanceByExtra(Other),
    ColdHitAndDotDamageTakenAsFire(Other),
    ColdSkillGemLevel(Plus),
    ConvertAllLifeLeechToEnergyShieldLeech(Other),
    CorpsesInYourPresenceExplodeDealingMaximumLifePhysicalDamageOnWarcry(Other),
    CreateChillingGroundOnFreeze(Other),
    CriticalHitBleedingEffect(PlusPercentage),
    CriticalHitDamageBonusIfConsumedPowerChargeRecently(Other),
    CriticalHitDamagingAilmentEffect(PlusPercentage),
    CriticalHitIgniteEffect(PlusPercentage),
    CriticalStrikeChance(PlusPercentage),
    CriticalStrikeChanceAgainstEnemiesOnFullLife(PlusPercentage),
    CriticalStrikeChanceIfEnemyKilledRecently(Other),
    CriticalStrikeChanceIfHaveNotCritRecently(Other),
    CriticalStrikeChanceVsBleedingEnemies(Other),
    CriticalStrikeChanceVsDazedEnemies(Other),
    CriticalStrikeChanceVsEnemiesWithLightningExposure(Other),
    CriticalStrikeChanceVsEnemiesWithoutElementalStatusAilments(Other),
    CriticalStrikeChanceVsShockedEnemies(Other),
    CriticalStrikeChanceWhileDualWielding(PlusPercentage),
    CriticalStrikeMultiplierDuringAnyFlaskEffect(Other),
    CriticalStrikeMultiplierIfGainedPowerChargeRecently(Other),
    CriticalStrikeMultiplierIfHaveDealtNonCritRecently(Other),
    CriticalStrikeMultiplierIfHaveNotDealtCriticalStrikeRecently(Other),
    CriticalStrikeMultiplierVsBurningEnemies(Other),
    CriticalStrikeMultiplierVsEnemiesOnFullLife(Plus),
    CriticalStrikeMultiplierVsStunnedEnemies(Other),
    CriticalStrikeMultiplierWithDagger(Plus),
    CriticalStrikesIgnorePositiveElementalResistances(Other),
    CrossbowAttackChanceToNotConsumeAmmo(Other),
    CrossbowAttackSpeed(PlusPercentage),
    CrossbowCriticalStrikeChance(PlusPercentage),
    CrossbowCriticalStrikeMultiplier(Plus),
    CrossbowDamage(PlusPercentage),
    CrushingBlow(Other),
    CullingStrikeThreshold(PlusPercentage),
    CullingStrikeVsMarkedEnemy(Other),
    CurseAreaOfEffect(PlusPercentage),
    CurseDelay(PlusPercentage),
    CurseEffect(PlusPercentage),
    CurseEffectOnSelf(PlusPercentage),
    CursesNeverExpire(Other),
    DaggerAttackSpeed(PlusPercentage),
    DaggerCriticalStrikeChance(PlusPercentage),
    DaggerDamage(PlusPercentage),
    Damage(PlusPercentage),
    DamageAgainstEnemiesWithFullyBrokenArmour(Other),
    DamageIfTriggeredSkillRecently(Other),
    DamageIfYouHaveConsumedACorpseRecently(Other),
    DamagePerActiveCurseOnSelf(Other),
    DamagePerDifferentWarcryUsedRecently(Other),
    DamagePerEnemyElementalAilment(Other),
    DamagePerWarcryUsedRecently(Other),
    DamageRemovedFromYourNearestTotemBeforeLifeOrEs(Other),
    DamageTakenFinalPerTailwind(Other),
    DamageTakenGoesToMana(Other),
    DamageTakenOnLowLife(Other),
    DamageToRareAndUniqueEnemies(Other),
    DamageVsBurningEnemies(Other),
    DamageVsDazedEnemies(Other),
    DamageVsEnemiesAffectedByStatusAilments(Other),
    DamageVsEnemiesOnFullLife(Other),
    DamageVsEnemiesOnLowLife(PlusPercentage),
    DamageVsFrozenEnemies(Other),
    DamageVsHinderedEnemies(Other),
    DamageVsShockedEnemies(PlusPercentage),
    DamageWhileAffectedByAHerald(Other),
    DamageWhileDualWielding(PlusPercentage),
    DamageWhileTotemActive(Other),
    DamageWhileUnarmed(Other),
    DamageWhileUsingCharm(Other),
    DamageWhileWieldingWand(Other),
    DamageWithDaggersAgainstFullLifeEnemies(Other),
    DamageWithHeraldSkills(Other),
    DamageWithHitsIsLuckyVsEnemiesOnLowLife(Other),
    DamageWithHitsIsLuckyVsHeavyStunnedEnemies(Other),
    DamageWithOneHandedWeapons(Other),
    DamageWithTwoHandedWeapons(Other),
    DamagingAilmentDuration(PlusPercentage),
    DamagingAilmentsDealDamageFaster(Other),
    DarknessPerLevel(Other),
    DarknessRefreshRate(PlusPercentage),
    DazeBuildUp(PlusPercentage),
    DazeDuration(PlusPercentage),
    DeadeyeAccuracyUnaffectedByRange(Other),
    DeadeyeMovementSpeedPenaltyFinalWhilePerformingAction(Other),
    DeadeyeProjectileDamageFinalMaxAsDistanceTravelledDecreases(Other),
    DeadeyeProjectileDamageFinalMaxAsDistanceTravelledIncreases(Other),
    DebuffTimePassed(PlusPercentage),
    DecimatingStrike(Other),
    DefencesWhileWieldingStaff(Other),
    DefendWithArmourAgainstCriticalStrikes(Other),
    DefendWithArmourAgainstRangedAttacks(Other),
    DefendWithOfArmourWhileNotOnLowEnergyShield(Other),
    Dexterity(PlusPercentage),
    DisplayPassiveAttributeText(Other),
    DistanceScaledAccuracyRatingPenalty(PlusPercentage),
    DoubleNumberOfPoisonYouCanInflict(Other),
    DoubleTabletEffectChanceWhenOpeningAMap(Other),
    DrainFocusOfDamageDealtOnHit(Other),
    DummyStatDisplayNothing(Other),
    ElectrocutedEnemyDamageTaken(PlusPercentage),
    ElementalDamage(PlusPercentage),
    ElementalDamageCanInflictBleeding(Other),
    ElementalDamageIfEnemyChilledRecently(Other),
    ElementalDamageIfEnemyIgnitedRecently(Other),
    ElementalDamageIfEnemyShockedRecently(Other),
    ElementalDamageIfHaveCritRecently(Other),
    ElementalDamageTakenRecoupedAsLife(Other),
    ElementalDamageWithAttackSkills(PlusPercentage),
    ElementalDamageWithAttackSkillsWhileUsingFlask(Other),
    ElementalStormCooldownRecoverySpeedFinal(Other),
    ElementalistChillMaximumMagnitudeOverride(Other),
    EmpoweredAttackDamage(PlusPercentage),
    EmpoweredAttackHitDamageStunMultiplier(PlusPercentage),
    EnduranceChargeDuration(PlusPercentage),
    EnemiesAreMaimedForXSecondsAfterBecomingUnpinned(Other),
    EnemiesChaosResistanceWhileCursed(Other),
    EnemiesCursedByYouHaveLifeRegenerationRate(PlusPercentage),
    EnemiesInPresenceCooldownRecovery(PlusPercentage),
    EnemiesNearMarkedEnemyAreBlinded(Other),
    EnemiesYouCurseCannotRechargeEnergyShield(Other),
    EnergyGenerated(PlusPercentage),
    EnergyShieldDelay(MinusPercentage),
    EnergyShieldDelayIfStunnedRecently(Other),
    EnergyShieldDelayWhenNotOnFullLife(Other),
    EnergyShieldFromFocus(PlusPercentage),
    EnergyShieldFromHelmet(PlusPercentage),
    EnergyShieldGainedOnBlock(Other),
    EnergyShieldIfConsumedPowerChargeRecently(Other),
    EnergyShieldRechargeRate(PlusPercentage),
    EnergyShieldRecoveryRate(PlusPercentage),
    EnergyShieldRecoveryRateIfNotHitRecently(Other),
    EvasionAndPhysicalDamageReductionRating(PlusPercentage),
    EvasionIfHitRecently(Other),
    EvasionRating(PlusPercentage),
    EvasionRatingAlsoReducesPhysicalDamage(Other),
    EvasionRatingIfConsumedFrenzyChargeRecently(Other),
    EvasionRatingIfHaveNotBeenHitRecently(Other),
    EvasionRatingIfYouDodgeRolledRecently(Other),
    EvasionRatingIfYouHaveHitAnEnemyRecently(Other),
    EvasionRatingToGainAsArmour(Other),
    EvasionRatingWhenOnFullLife(Other),
    EvasionRatingWhileSurrounded(Other),
    EvasionRatingWhileYouHaveEnergyShield(Other),
    ExpeditionMonstersLogbookChance(PlusPercentage),
    ExposureYouInflictLowersAffectedResistanceByExtra(Other),
    ExtraDamageRollsWithLightningDamageOnNonCriticalHits(Other),
    FasterBleed(Other),
    FasterBurn(Other),
    FinalRepeatOfSpellsAreaOfEffect(PlusPercentage),
    FireDamage(PlusPercentage),
    FireDamageWhileAffectedByHeraldOfAsh(Other),
    FireExposureEffect(PlusPercentage),
    FireExposureYouInflictLowersFireResistanceByExtra(Other),
    FlailAttackSpeed(PlusPercentage),
    FlailCriticalStrikeChance(PlusPercentage),
    FlailCriticalStrikeMultiplier(Plus),
    FlailDamage(PlusPercentage),
    FlaskChargesGained(PlusPercentage),
    FlaskChargesUsed(PlusPercentage),
    FlaskDuration(PlusPercentage),
    FlaskEffect(PlusPercentage),
    FlaskLifeAndManaRecoveryWhileUsingCharm(Other),
    FlaskLifeAndManaToRecover(PlusPercentage),
    FlaskLifeRecoveryRate(PlusPercentage),
    FlaskLifeToRecover(PlusPercentage),
    FlaskManaChargesUsed(PlusPercentage),
    FlaskManaToRecover(PlusPercentage),
    FlasksChanceToNotConsumeCharges(Other),
    FocusDecayDelayMs(Other),
    FocusDecayPerMinute(Other),
    FreezeDuration(PlusPercentage),
    FreezeThreshold(PlusPercentage),
    GainAccuracyRatingEqualToIntelligence(Other),
    GainAccuracyRatingEqualToStrength(Other),
    GainArcaneSurgeOnCritChance(Other),
    GainDamageAsChaosFromUnreservedDarkness(Other),
    GainEnduranceChargeOnHeavyStunningRareOrUniqueEnemy(Other),
    GainGuardFlaskChargeWhenHitByEnemyChance(Other),
    GainLifeFromBodyEs(Other),
    GainMaxRageOnRageGainFromHitChance(Other),
    GainMaximumEnduranceChargesOnEnduranceChargeGainedChance(Other),
    GainMaximumEnergyShieldAsFreezeThreshold(Plus),
    GainMaximumFrenzyChargesOnFrenzyChargeGainedChance(Other),
    GainMaximumPowerChargesOnPowerChargeGainedChance(Other),
    GainTailwindStackOnSkillUse(Other),
    GainUnboundAilmentStacks(Other),
    GainXRageOnHitWithAxes(Other),
    GainXRageOnMeleeHit(Other),
    GainXRageWhenHit(Other),
    GemRequirementsCanBeSatisfiedByHighestAttribute(Other),
    GemlingDoubleBasicAttributeBonuses(Other),
    GemlingSkillCostFinal(Other),
    GenerateXChargesForCharmsPerMinute(Other),
    GenerateXChargesForLifeFlasksPerMinute(Other),
    GenerateXChargesForManaFlasksPerMinute(Other),
    GlobalChanceToBlindOnHit(Other),
    GlobalDefences(PlusPercentage),
    GlobalGemAttributeRequirementsFinalFromGemling(Other),
    GlobalItemAttributeRequirements(PlusPercentage),
    GrenadeFuseDuration(PlusPercentage),
    GrenadeSkillAreaOfEffect(PlusPercentage),
    GrenadeSkillChanceToExplodeTwice(Other),
    GrenadeSkillCooldownCount(Plus),
    GrenadeSkillCooldownSpeed(PlusPercentage),
    GrenadeSkillDamage(PlusPercentage),
    GrenadeSkillNumberOfAdditionalProjectiles(Other),
    GuardFlaskEffect(PlusPercentage),
    HeavyStunPoiseDecayRate(PlusPercentage),
    HeavyStunsHaveCullingStrike(Other),
    HellhoundTakesDamageBeforeYou(Other),
    HeraldSkillsManaReservation(PlusPercentage),
    HinderDuration(PlusPercentage),
    HitDamageElectrocuteMultiplier(PlusPercentage),
    HitDamageElectrocuteMultiplierVsShockedEnemies(Other),
    HitDamageFreezeMultiplier(PlusPercentage),
    HitDamagePinMultiplier(PlusPercentage),
    HitDamageStunMultiplier(PlusPercentage),
    HitDamageStunMultiplierVsEnemiesAtCloseRange(Other),
    HitDamageStunMultiplierVsEnemiesOnLowLife(Other),
    HitDamageStunMultiplierWithCrits(Other),
    HitDamageVsChilledEnemies(Other),
    HitDamageVsEnemiesAffectedByAilments(Other),
    HitDamageVsIgnitedEnemies(Other),
    HitForMaxLifeEsOnMaxInfernalFlame(Other),
    HitsIgnoreElementalResistancesVsFrozenEnemies(Other),
    IceCrystalMaximumLife(PlusPercentage),
    IgniteChance(PlusPercentage),
    IgniteDuration(PlusPercentage),
    IgniteEffectOnSelf(PlusPercentage),
    IgniteShockChillDuration(PlusPercentage),
    IgnitesApplyFireResistance(Plus),
    InfernalFlameInsteadOfMana(Other),
    InfernalistBurnLifeAndEsPerSecondIfCritRecently(Other),
    InfernalistCriticalStrikeMultiplierFinal(Other),
    InflictFireExposureOnHitsThatHeavyStun(Other),
    InflictWitheredForXSecondsOnUnwitheredEnemiesWhenTheyEnterYourPresence(Other),
    Intelligence(PlusPercentage),
    JaggedGroundDuration(PlusPercentage),
    JaggedGroundEffect(PlusPercentage),
    JaggedGroundEnemyDamageTaken(PlusPercentage),
    KeystoneAcrobatics(Other),
    KeystoneAncestralBond(Other),
    KeystoneAvatarOfFire(Other),
    KeystoneBloodMagic(Other),
    KeystoneBulwark(Other),
    KeystoneChaosInoculation(Other),
    KeystoneChargeCycle(Other),
    KeystoneConduit(Other),
    KeystoneDanceWithDeath(Other),
    KeystoneEldritchBattery(Other),
    KeystoneElementalEquilibrium(Other),
    KeystoneEternalYouth(Other),
    KeystoneGiantsBlood(Other),
    KeystoneGlancingBlows(Other),
    KeystoneHeartstopper(Other),
    KeystoneHexMaster(Other),
    KeystoneIronReflexes(Other),
    KeystoneManaShield(Other),
    KeystoneOasis(Other),
    KeystonePainAttunement(Other),
    KeystoneUnwaveringStance(Other),
    KeystoneVaalPact(Other),
    KeystoneZealotsOath(Other),
    KnockbackChanceAtCloseRange(Other),
    KnockbackDistance(PlusPercentage),
    KnockbackOnCritWithQuarterstaff(Other),
    LeechIsInstant(Other),
    LifeFlaskChargesGained(PlusPercentage),
    LifeFlaskEffectsAreNotRemovedAtFullLife(Other),
    LifeGainedOnBlock(Other),
    LifeRecoveryFromFlasksWhileOnLowLife(Other),
    LifeRecoveryRate(PlusPercentage),
    LifeRegenerateRatePerSecondWhileTotemActive(Other),
    LifeRegenerationRate(PlusPercentage),
    LifeRegenerationRatePerMinute(Other),
    LifeRegenerationRatePerMinuteIfHaveBeenHitRecently(Other),
    LifeRegenerationRatePerMinuteWhenOnLowLife(Other),
    LifeRegenerationRatePerMinuteWhileAffectedByDamagingAilment(Other),
    LifeRegenerationRatePerMinuteWhileStationary(Other),
    LifeRegenerationRatePerMinuteWhileSurrounded(Other),
    LifeRegenerationRateWhileMoving(Other),
    LifeRegenerationRateWhileOnLowLife(Other),
    LifeRegenerationRateWhileStationary(Other),
    LifeRegenerationRateWhileUsingLifeFlask(Other),
    LifeRemnantsGainPerGlobe(Other),
    LifeReservedByStat(Other),
    LightRadius(PlusPercentage),
    LightningDamage(PlusPercentage),
    LightningDamageWhileAffectedByHeraldOfThunder(Other),
    LightningExposureEffect(PlusPercentage),
    LightningHitAndDotDamageTakenAsFire(Other),
    LightningPenetrationWhileOnLowMana(Other),
    LightningSkillAdditionalChainChance(Other),
    LinkSkillBuffEffect(PlusPercentage),
    LinkSkillCastSpeed(PlusPercentage),
    LinkSkillDuration(PlusPercentage),
    LinkSkillsCanTargetMinions(Other),
    LinkToXAdditionalRandomAllies(Other),
    LoseAllTailwindWhenHit(Other),
    LoseOfInfernalFlameOnReachingMax(Other),
    LoseOfLifeAndEnergyShieldWhenYouUseAChaosSkill(Other),
    LoseOfMaxInfernalFlamePerMinute(Other),
    MaceDamage(PlusPercentage),
    MaceHitDamageStunMultiplier(PlusPercentage),
    MaceSlamAftershockChance(Other),
    MaceStrikeAftershockChance(Other),
    MaimOnHit(Other),
    MaimOnHitVsPoisonedEnemies(Other),
    ManaCostWhileNotLowMana(Other),
    ManaFlaskChargesGained(PlusPercentage),
    ManaGainedOnBlock(Other),
    ManaLeechAppliesRecoveryToEnergyShieldAlso(Other),
    ManaRecoveryRate(PlusPercentage),
    ManaRecoveryRateWhileAffectedByAManaFlask(Other),
    ManaRegenerationRate(PlusPercentage),
    ManaRegenerationRateIfEnemyShockedRecently(Other),
    ManaRegenerationRateWhileMoving(Other),
    ManaRegenerationRateWhileNotOnLowMana(Other),
    ManaRegenerationRateWhileStationary(Other),
    MapAfflictionEncounterBossChance(PlusPercentage),
    MapAfflictionRewardProgressOnKill(PlusPercentage),
    MapAfflictionSecondaryWaveAcceleration(PlusPercentage),
    MapBasicCurrencyDropChanceInSwampAndWaterBiome(Other),
    MapBossAreaChanceToBeCorrupted(Other),
    MapBossDamage(PlusPercentage),
    MapBossDroppedItemQuantity(PlusPercentage),
    MapBossExperienceFinal(Other),
    MapBossItemRarity(PlusPercentage),
    MapBossMaximumLife(PlusPercentage),
    MapBossingDifficulty(Plus),
    MapBreachChanceToBeGuardedByMagicPack(Other),
    MapBreachChestsDropDoubleSplintersChance(Other),
    MapBreachChestsFinal(Other),
    MapBreachDomainDifficulty(Plus),
    MapBreachHandsInflictWakingNightmare(Other),
    MapBreachMonsterQuantity(PlusPercentage),
    MapBreachMonsterSplinterQuantity(PlusPercentage),
    MapBreachRaresCatalystFullStackChance(Other),
    MapBreachRaresHaveSoulEater(Other),
    MapBreachTimePassed(PlusPercentage),
    MapDeliriumAdditionalRewardTypeChance(Other),
    MapDeliriumBossLife(PlusPercentage),
    MapDeliriumBossSplinterAmount(PlusPercentage),
    MapDeliriumDaemonDamage(PlusPercentage),
    MapDeliriumDifficultyScalingFromMirrorIsDouble(Other),
    MapDeliriumDoodadsFinal(Other),
    MapDroppedMapsRarity(PlusPercentage),
    MapDuplicateXRareMonsters(Other),
    MapExpeditionArtifactQuantity(PlusPercentage),
    MapExpeditionChestMarkerCount(Plus),
    MapExpeditionChestsDespawnAfterXSeconds(Other),
    MapExpeditionEliteMarkerCount(PlusPercentage),
    MapExpeditionFuseBurnTime(PlusPercentage),
    MapExpeditionRareMonsters(PlusPercentage),
    MapExpeditionRelicModEffect(PlusPercentage),
    MapExpeditionVendorRerollCurrencyQuantity(PlusPercentage),
    MapExpeditionXExtraRelicPrefixes(Other),
    MapExpeditionXExtraRelicSuffixes(Other),
    MapFinalBossMapKeyOfAtLeastSameTierAsCurrentMapDropChance(Other),
    MapGoldDropChanceInMountainBiome(Other),
    MapItemDropQuantity(PlusPercentage),
    MapItemDropRarity(PlusPercentage),
    MapJewelDropChanceInForestBiome(Other),
    MapKillingRareMonstersPausesDeliriumMirrorTimerForXSeconds(Other),
    MapLogbookDifficulty(Plus),
    MapMagicChestAmount(PlusPercentage),
    MapMagicPackSize(PlusPercentage),
    MapMapItemDropChance(PlusPercentage),
    MapMapsDropWithDistilledEmotionsAppliedChance(Other),
    MapModEffect(PlusPercentage),
    MapModEffectPerMod(Other),
    MapModEffectPerTowerAffectingArea(Other),
    MapMonolithChance(Other),
    MapMonsterTre(PlusPercentage),
    MapNonUniqueDeliriumMonstersSplinterAmount(PlusPercentage),
    MapNumberOfMagicPacks(PlusPercentage),
    MapNumberOfRarePacks(PlusPercentage),
    MapPackSize(PlusPercentage),
    MapPinnacleBossAdditionalUniqueDropChance(Other),
    MapPinnacleBossDifficulty(Plus),
    MapPinnacleBossDropsXCorruptedRareTablets(Other),
    MapPinnacleBossDropsXWaystones(Other),
    MapPinnacleBossItemDroppedRarityFinal(Other),
    MapPinnacleBossRareSocketCurrencyChance(Other),
    MapPinnacleBossSpecialGemDropChance(Other),
    MapPlayerDamageTakenVsBreachMonsters(Other),
    MapPlayerShrineBuffEffectOnSelf(PlusPercentage),
    MapPlayerShrineEffectDuration(PlusPercentage),
    MapRareChestAmount(PlusPercentage),
    MapRitualAdditionalDaemon(Other),
    MapRitualAdditionalRewardRerolls(Other),
    MapRitualAdditionalWildwoodPacks(Other),
    MapRitualContainsWildwoodWisp(Other),
    MapRitualDaemonDamage(PlusPercentage),
    MapRitualDeferRewardTributeCost(PlusPercentage),
    MapRitualDeferredRewardsAreOfferedAgainSooner(Other),
    MapRitualEncounterCountIsFour(Other),
    MapRitualMagicMonsters(PlusPercentage),
    MapRitualMonsterDamageForEachTimeRevived(Other),
    MapRitualMonsterSpawningSpeed(PlusPercentage),
    MapRitualMonsterTankinessForEachTimeRevived(Other),
    MapRitualNoRevivePenalty(Other),
    MapRitualOmenChance(PlusPercentage),
    MapRitualRareMonsters(PlusPercentage),
    MapRitualRewardsRerollCostFinal(Other),
    MapRitualVoodooKingKeyChance(PlusPercentage),
    MapSanctumAndUltimatumKeyDropChanceInDesertBiome(Other),
    MapShrineChance(Other),
    MapSimulacrumDifficulty(Plus),
    MapSocketCurrencyDropChanceInGrassBiome(Other),
    MapStrongboxChance(Other),
    MapStrongboxModEffect(PlusPercentage),
    MapTierBonusPermillage(Other),
    MapTowerAugmentQuantity(PlusPercentage),
    MapVoodooKingDifficulty(Plus),
    MapsBossDropAdditionalBonusMapChance(Other),
    MapsWithBossesAdditionalEssence(Plus),
    MapsWithBossesAdditionalShrine(Plus),
    MapsWithBossesAdditionalStrongbox(Plus),
    MapsWithBossesAreIrradiated(Other),
    MarkEffect(PlusPercentage),
    MarkSkillCastSpeed(PlusPercentage),
    MarkSkillDuration(PlusPercentage),
    MarkSkillManaCost(PlusPercentage),
    MarkedEnemiesCannotDealCriticalStrikes(Other),
    MarkedEnemyAccuracyRating(PlusPercentage),
    MarkedEnemyDamageTaken(PlusPercentage),
    MasterOfElementsEvasionRatingFinal(Other),
    MasteryChanceToEvadeMeleeAttacksFinal(Other),
    MaxDemonFormStacks(Other),
    MaxEnduranceCharges(Other),
    MaxFrenzyCharges(Other),
    MaxJadeStacks(Other),
    MaxPowerCharges(Other),
    MaximumDarkness(PlusPercentage),
    MaximumEnergyShield(PlusPercentage),
    MaximumEnergyShieldFromBodyArmour(PlusPercentage),
    MaximumLife(PlusPercentage),
    MaximumLifeAsFocus(Other),
    MaximumLifeManaAndEnergyShield(PlusPercentage),
    MaximumLifeToGainAsMaximumEnergyShield(Other),
    MaximumMana(PlusPercentage),
    MaximumManaGainedOnKill(Other),
    MaximumRage(Other),
    MaximumRageWhileWieldingAxe(Other),
    MeleeAttackSpeed(PlusPercentage),
    MeleeCriticalStrikeChance(PlusPercentage),
    MeleeCriticalStrikeChanceWhenOnFullLife(Other),
    MeleeDamage(PlusPercentage),
    MeleeDamageAtCloseRange(Other),
    MeleeDamageVsHeavyStunnedEnemies(Other),
    MeleeDamageVsImmobilisedEnemies(Other),
    MeleeDamageWhenOnFullLife(Other),
    MeleeHitDamageStunMultiplier(PlusPercentage),
    MeleeRange(Plus),
    MinionAccuracyRating(Other),
    MinionAdditionalPhysicalDamageReduction(Other),
    MinionAttackAndCastSpeed(PlusPercentage),
    MinionChaosResistance(Other),
    MinionColdDamageResistance(Other),
    MinionCooldownRecovery(PlusPercentage),
    MinionCriticalStrikeChance(PlusPercentage),
    MinionCriticalStrikeMultiplier(Plus),
    MinionDamage(PlusPercentage),
    MinionDamageTakenRecoupedAsTheirLife(Other),
    MinionDamageWhileYouHaveAtLeastTwoDifferentActiveOfferings(Other),
    MinionElementalResistance(Other),
    MinionEvasionRating(PlusPercentage),
    MinionFireDamageResistance(Other),
    MinionLifeRecoveryRate(PlusPercentage),
    MinionLifeRegenerationRatePerMinute(Other),
    MinionLightningDamageResistance(Other),
    MinionMaximumAllElementalResistances(Other),
    MinionMaximumLife(PlusPercentage),
    MinionMaximumLifeToGainAsMaximumEnergyShield(Other),
    MinionMovementSpeed(PlusPercentage),
    MinionReservation(PlusPercentage),
    MinionResummonSpeed(PlusPercentage),
    MinionSkillAreaOfEffect(PlusPercentage),
    MinionsDealOfPhysicalDamageAsAdditionalChaosDamage(Other),
    MinionsGainYourDexterity(Other),
    MinionsGetAmuletStatsInsteadOfYou(Other),
    MinionsHaveChanceToInflictWitherOnHit(Other),
    MovementSpeedDuringFlaskEffect(Other),
    MovementSpeedIfCastAMarkSpellRecently(Other),
    MovementSpeedIfEnemyKilledRecently(Other),
    MovementSpeedIfPinnedEnemyRecently(Other),
    MovementSpeedWhileDualWielding(Other),
    MovementSpeedWhileUsingCharm(Other),
    MovementSpeedWhileYouHaveEnergyShield(Other),
    NonDamagingAilmentEffect(PlusPercentage),
    NonDamagingAilmentEffectWithCriticalStrikes(Other),
    NonSkillBaseAllDamageToGainAsChaos(Other),
    NonSkillBaseAllDamageToGainAsCold(Other),
    NonSkillBaseAllDamageToGainAsFire(Other),
    NonSkillBaseAllDamageToGainAsLightning(Other),
    NonSkillBaseAllDamageToGainAsPhysical(Other),
    NonSkillBaseLightningDamageToGainAsCold(Other),
    NonSkillBasePhysicalDamageToGainAsChaos(Other),
    NonSkillBasePhysicalDamageToGainAsFire(Other),
    NonSkillColdDamageToGainAsFireVsFrozenEnemies(Other),
    NotableKnockbackDistanceFinalForBlockedHits(Other),
    NumAdditionalSkillSlots(Other),
    NumCharmSlots(Other),
    NumberOfAdditionalMarksAllowed(Other),
    NumberOfAdditionalPoisonStacks(Other),
    NumberOfAdditionalProjectiles(Other),
    NumberOfInfernalFamiliarsAllowed(Other),
    OfferingAreaOfEffect(PlusPercentage),
    OfferingDuration(PlusPercentage),
    OfferingLife(PlusPercentage),
    OneHandedAttackAilmentChance(PlusPercentage),
    OneHandedAttackSpeed(PlusPercentage),
    OneHandedMeleeAccuracyRating(PlusPercentage),
    OneHandedMeleeAttackSpeed(PlusPercentage),
    OneHandedMeleeCriticalStrikeChance(PlusPercentage),
    OneHandedMeleeCriticalStrikeMultiplier(Plus),
    PassiveTreeMaceDamageFinalVsHeavyStunnedEnemies(Other),
    PathfinderAscendancyPoisonOnEnemiesYouKillSpreadToEnemiesWithinX(Other),
    PathfinderPoisonDurationFinal(Other),
    PhysicalAttackDamage(PlusPercentage),
    PhysicalDamage(PlusPercentage),
    PhysicalDamageFromHitsTakenAsRandomElement(Other),
    PhysicalDamagePreventedRecoupedAsLife(Other),
    PhysicalDamageReductionRating(PlusPercentage),
    PhysicalDamageTakenRecoupedAsLife(Other),
    PhysicalHitAndDotDamageTakenAsChaos(Other),
    PlacingTrapsCooldownRecovery(PlusPercentage),
    PoisonDurationPerPoisonAppliedRecently(Other),
    PoisonEffectVsNonPoisonedEnemies(Other),
    PowerChargeDuration(PlusPercentage),
    ProjectileAilmentChance(PlusPercentage),
    ProjectileDamage(PlusPercentage),
    ProjectileHitDamageStunMultiplier(PlusPercentage),
    QuarterstaffAccuracyRating(PlusPercentage),
    QuarterstaffAttackSpeed(PlusPercentage),
    QuarterstaffCriticalStrikeChance(PlusPercentage),
    QuarterstaffCriticalStrikeMultiplier(Plus),
    QuarterstaffDamage(PlusPercentage),
    QuarterstaffDazeBuildUp(PlusPercentage),
    QuarterstaffHitDamageFreezeMultiplier(PlusPercentage),
    QuarterstaffHitDamageStunMultiplier(PlusPercentage),
    QuarterstaffSkillsThatConsumePowerChargesCountAsConsumingXAdditionalPowerCharges(Other),
    QuiverModEffect(PlusPercentage),
    RageDecaySpeed(PlusPercentage),
    RageLossDelayMs(Other),
    ReapplyEnemyShockOnConsumingEnemyShockChance(Other),
    RecoupElementalDamageAsEnergyShield(Other),
    RecoupSpeed(PlusPercentage),
    RecoverLifeOnHeavyStunningRareOrUniqueEnemy(Other),
    RecoverLifePerEnduranceChargeConsumed(Other),
    RecoverLifeWhenYouCreateAnOffering(Other),
    RecoverLifeWhenYouUseALifeFlaskWhileOnLowLife(Other),
    RecoverManaWhenYouInvokeASpell(Other),
    RecoverMaximumLifeOnEnemyKilledChance(Other),
    RecoverMaximumLifeOnKill(Other),
    RecoverMaximumLifeOnKillingPoisonedEnemy(Other),
    RecoverMaximumLifeOnManaFlaskUse(Other),
    RecoverMaximumManaOnCharmUse(Other),
    RecoverMaximumManaOnKill(Other),
    RecoverXLifeOnBlock(Other),
    ReduceEnemyElementalResistance(Other),
    RefreshIgniteDurationOnCriticalStrikeChance(Other),
    ReloadSpeed(PlusPercentage),
    RemoveCurseOnManaFlaskUse(Other),
    ResoluteTechnique(Other),
    RestoreLifeAndManaOnWarcry(Other),
    ShieldArmour(PlusPercentage),
    ShieldEvasionRating(PlusPercentage),
    ShockChance(PlusPercentage),
    ShockChanceVsElectrocutedEnemies(Other),
    ShockDuration(PlusPercentage),
    ShockEffect(PlusPercentage),
    ShockEffectWithCriticalStrikes(Other),
    SkillAreaOfEffectIfEnemyKilledRecently(Other),
    SkillAreaOfEffectWhenUnarmed(PlusPercentage),
    SkillCostBaseLifeEqualToBaseMana(Other),
    SkillEffectDuration(PlusPercentage),
    SkillSpeed(PlusPercentage),
    SlamAftershockChance(Other),
    SlamSkillAreaOfEffect(PlusPercentage),
    SlowsHaveNoPotencyOnYou(Other),
    SmallPassivesEffect(PlusPercentage),
    SorceryWardStrength(Other),
    SpawnDefenderWithTotem(Other),
    SpearAttackSpeed(PlusPercentage),
    SpearCriticalStrikeChance(PlusPercentage),
    SpearDamage(PlusPercentage),
    SpellAreaDamage(PlusPercentage),
    SpellAreaOfEffect(PlusPercentage),
    SpellCriticalStrikeChance(PlusPercentage),
    SpellCriticalStrikeChanceWhileWieldingStaff(Other),
    SpellCriticalStrikeMultiplierWhileWieldingStaff(Other),
    SpellDamage(PlusPercentage),
    SpellDamageIfHaveCritRecently(Other),
    SpellDamageWhileEsFull(Other),
    SpellDamageWhileWieldingMeleeWeapon(Other),
    SpellSkillGemLevel(Plus),
    SpellSkillProjectileSpeed(PlusPercentage),
    SpellStaffDamage(PlusPercentage),
    Spirit(PlusPercentage),
    StaffAttackAreaOfEffect(PlusPercentage),
    StormweaverChillEffectFinal(Other),
    StormweaverShockDurationFinal(Other),
    Strength(PlusPercentage),
    StunThreshold(PlusPercentage),
    StunThresholdBasedOnEnergyShieldInsteadOfLife(Other),
    StunThresholdDuringEmpoweredAttacks(Other),
    StunThresholdFromBaseArmourFromEquipment(Other),
    StunThresholdFromLowestOfBaseHelmetEvasionRatingAndArmour(Other),
    StunThresholdFromMaximumEnergyShield(Other),
    StunThresholdPerNumberOfTimesStunnedRecently(Other),
    StunThresholdPerRage(Other),
    StunThresholdPerStrength(Other),
    StunThresholdWhenNotStunnedRecently(Other),
    StunThresholdWhenOnFullLife(Other),
    SummonTotemCastSpeed(PlusPercentage),
    SupportAnticipationChargeGainFrequency(PlusPercentage),
    SupportGemLimit(Plus),
    SwordAttackSpeed(PlusPercentage),
    SwordDamage(PlusPercentage),
    TabletEffectWhenOpeningAMap(Other),
    ThornsDamage(PlusPercentage),
    ThornsDamageIfBlockedRecently(Other),
    TitanDamageFinalAgainstHeavyStunnedEnemies(Other),
    TitanExpandedMainInventory(Other),
    TitanMaximumLifeFinal(Other),
    TotemAdditionalPhysicalDamageReduction(Other),
    TotemDamage(PlusPercentage),
    TotemDuration(PlusPercentage),
    TotemElementalResistance(Other),
    TotemLife(PlusPercentage),
    TotemPlacementRange(PlusPercentage),
    TotemSkillAttackSpeed(PlusPercentage),
    TotemSkillCastSpeed(PlusPercentage),
    TotemsAttackSpeedPerActiveTotem(Other),
    TotemsRegenerateLifePerMinute(Other),
    TotemsSpellsCastSpeedPerActiveTotem(Other),
    TrapCriticalStrikeChance(PlusPercentage),
    TrapDamage(PlusPercentage),
    TrapThrowingSpeed(PlusPercentage),
    TriggerElementalStormOnCrit(Other),
    TriggerSkillsRefundHalfEnergySpentChance(Other),
    TriggerWildStrikeOnAttackCrit(Other),
    TriggeredSpellSpellDamage(PlusPercentage),
    TwoHandedMeleeAccuracyRating(PlusPercentage),
    UnaffectedByChillDuringDodgeRoll(Other),
    UnaffectedByChillWhileManaLeeching(Other),
    UnarmedAttackSkillMeleeDashRange(PlusPercentage),
    UnarmedAttackSpeed(PlusPercentage),
    WarbringerOverbreakArmour(Other),
    WarcriesBypassCooldown(Other),
    WarcryCooldownSpeed(PlusPercentage),
    WarcryDamage(PlusPercentage),
    WarcryEmpowersNextXMeleeAttacks(Other),
    WarcrySkillAreaOfEffect(PlusPercentage),
    WarcrySpeed(PlusPercentage),
    WeaponSwapSpeed(PlusPercentage),
    WhileUsingSwordReduceEnemyBlock(Other),
    WitchPassiveMaximumLightningDamageFinal(Other),
    WitchhunterArmourEvasionFinal(Other),
    WitchhunterUpToDamageFinalAgainstTargetsWithMissingFocus(Other),
    WitheredEffect(PlusPercentage),
    WorldMapUniqueMapsVisibleXUnitsBeyondLightRadius(Other),
    XFasterStartOfSorceryWardRecovery(Other),
    YouAndAlliesInPresenceAllDamageCanIgniteWhileNotOnLowInfernalFlame(Other),
    YouAndAlliesInPresenceNonSkillBaseAllDamageToGainAsFireWhileOnHighInfernalFlame(Other),
    YouGainLifeWhenOneOfYourMinionsIsRevived(Other),
    Unknown(String, f32),
}

impl Stat {
    pub fn from_key_value(k: &str, v: f64) -> Self {
        match k {
            "accuracy_rating_+%" => Stat::AccuracyRating(PlusPercentage(v as f32)),
            "accuracy_rating_+%_equal_to_%_attack_critical_strike_chance" => Stat::AccuracyRatingEqualToAttackCriticalStrikeChance(Other(v as f32)),
            "accuracy_rating_vs_bleeding_enemies" => Stat::AccuracyRatingVsBleedingEnemies(Other(v as f32)),
            "accuracy_rating_+%_vs_enemies_in_close_range" => Stat::AccuracyRatingVsEnemiesInCloseRange(Other(v as f32)),
            "accuracy_rating_+%_vs_rare_or_unique_enemy" => Stat::AccuracyRatingVsRareOrUniqueEnemy(Other(v as f32)),
            "accuracy_rating_while_dual_wielding_+%" => Stat::AccuracyRatingWhileDualWielding(PlusPercentage(v as f32)),
            "additional_all_attributes" => Stat::AdditionalAllAttributes(Other(v as f32)),
            "additional_critical_strike_chance_permyriad_with_herald_skills" => Stat::AdditionalCriticalStrikeChancePermyriadWithHeraldSkills(Other(v as f32)),
            "additional_maximum_all_elemental_resistances_%" => Stat::AdditionalMaximumAllElementalResistances(Other(v as f32)),
            "additional_physical_damage_reduction_%_per_jade" => Stat::AdditionalPhysicalDamageReductionPerJade(Other(v as f32)),
            "additive_armour_modifiers_apply_to_energy_shield_recharge_rate_at_%_value" => Stat::AdditiveArmourModifiersApplyToEnergyShieldRechargeRateAtValue(Other(v as f32)),
            "aftershock_area_of_effect_+%" => Stat::AftershockAreaOfEffect(PlusPercentage(v as f32)),
            "aggravate_bleeding_older_than_ms_on_hit" => Stat::AggravateBleedingOlderThanMsOnHit(Other(v as f32)),
            "aggravate_bleeding_on_attack_crit_chance_%" => Stat::AggravateBleedingOnAttackCritChance(Other(v as f32)),
            "aggravate_bleeding_on_exerted_attack_hit_chance_%" => Stat::AggravateBleedingOnExertedAttackHitChance(Other(v as f32)),
            "aggravate_bleeding_when_inflicted_vs_enemies_on_jagged_ground_chance_%" => Stat::AggravateBleedingWhenInflictedVsEnemiesOnJaggedGroundChance(Other(v as f32)),
            "ailment_chance_+%" => Stat::AilmentChance(PlusPercentage(v as f32)),
            "ailment_chance_+%_vs_rare_or_unique_enemy" => Stat::AilmentChanceVsRareOrUniqueEnemy(Other(v as f32)),
            "ailment_effect_+%" => Stat::AilmentEffect(PlusPercentage(v as f32)),
            "ailment_threshold_+%" => Stat::AilmentThreshold(PlusPercentage(v as f32)),
            "ailment_threshold_+_from_lowest_of_base_boots_evasion_rating_and_armour" => Stat::AilmentThresholdFromLowestOfBaseBootsEvasionRatingAndArmour(Other(v as f32)),
            "ailment_threshold_+_per_dexterity" => Stat::AilmentThresholdPerDexterity(Other(v as f32)),
            "all_attributes_+%" => Stat::AllAttributes(PlusPercentage(v as f32)),
            "all_damage_can_chill" => Stat::AllDamageCanChill(Other(v as f32)),
            "all_damage_can_shock" => Stat::AllDamageCanShock(Other(v as f32)),
            "all_skill_gem_level_+" => Stat::AllSkillGemLevel(Plus(v as f32)),
            "all_skill_gem_quality_+" => Stat::AllSkillGemQuality(Plus(v as f32)),
            "allies_in_presence_accuracy_rating" => Stat::AlliesInPresenceAccuracyRating(Other(v as f32)),
            "allies_in_presence_attack_speed_+%" => Stat::AlliesInPresenceAttackSpeed(PlusPercentage(v as f32)),
            "allies_in_presence_life_regeneration_rate_per_minute_equal_to_your_maximum_life_%" => Stat::AlliesInPresenceLifeRegenerationRatePerMinuteEqualToYourMaximumLife(Other(v as f32)),
            "ancestral_slam_every_other_slam" => Stat::AncestralSlamEveryOtherSlam(Other(v as f32)),
            "arcane_surge_effect_on_self_+%" => Stat::ArcaneSurgeEffectOnSelf(PlusPercentage(v as f32)),
            "area_damage_+%" => Stat::AreaDamage(PlusPercentage(v as f32)),
            "area_of_effect_+%_if_enemy_stunned_with_two_handed_melee_weapon_recently" => Stat::AreaOfEffectIfEnemyStunnedWithTwoHandedMeleeWeaponRecently(Other(v as f32)),
            "area_of_effect_+%_if_have_stunned_an_enemy_recently" => Stat::AreaOfEffectIfHaveStunnedAnEnemyRecently(Other(v as f32)),
            "area_of_effect_+%_with_herald_skills" => Stat::AreaOfEffectWithHeraldSkills(Other(v as f32)),
            "area_skill_knockback_chance_%" => Stat::AreaSkillKnockbackChance(Other(v as f32)),
            "armour_and_evasion_on_low_life_+%" => Stat::ArmourAndEvasionOnLowLife(PlusPercentage(v as f32)),
            "armour_break_amount_+%" => Stat::ArmourBreakAmount(PlusPercentage(v as f32)),
            "armour_break_amount_+%_vs_enemies_affected_by_ailments" => Stat::ArmourBreakAmountVsEnemiesAffectedByAilments(Other(v as f32)),
            "armour_break_damage_%_dealt_as_armour_break" => Stat::ArmourBreakDamageDealtAsArmourBreak(Other(v as f32)),
            "armour_break_duration_+%" => Stat::ArmourBreakDuration(PlusPercentage(v as f32)),
            "armour_break_equal_to_%_physical_damage_dealt_on_critical_strike_with_spells" => Stat::ArmourBreakEqualToPhysicalDamageDealtOnCriticalStrikeWithSpells(Other(v as f32)),
            "armour_break_%_of_armour_on_heavy_stunning" => Stat::ArmourBreakOfArmourOnHeavyStunning(Other(v as f32)),
            "armour_evasion_+%_while_leeching" => Stat::ArmourEvasionWhileLeeching(Other(v as f32)),
            "armour_+_from_%_strength_requirements_from_boots_gloves_helmets" => Stat::ArmourFromStrengthRequirementsFromBootsGlovesHelmets(Other(v as f32)),
            "armour_+%_if_consumed_endurance_charge_recently" => Stat::ArmourIfConsumedEnduranceChargeRecently(Other(v as f32)),
            "armour_+%_if_have_been_hit_recently" => Stat::ArmourIfHaveBeenHitRecently(Other(v as f32)),
            "armour_+%_if_hit_enemy_with_melee_attack_recently" => Stat::ArmourIfHitEnemyWithMeleeAttackRecently(Other(v as f32)),
            "armour_+%_if_you_havent_been_hit_recently" => Stat::ArmourIfYouHaventBeenHitRecently(Other(v as f32)),
            "armour_+%_per_rage" => Stat::ArmourPerRage(Other(v as f32)),
            "armour_+%_while_surrounded" => Stat::ArmourWhileSurrounded(Other(v as f32)),
            "arrow_base_number_of_targets_to_pierce" => Stat::ArrowBaseNumberOfTargetsToPierce(Other(v as f32)),
            "arrow_critical_strike_chance_+%_max_as_distance_travelled_increases" => Stat::ArrowCriticalStrikeChanceMaxAsDistanceTravelledIncreases(Other(v as f32)),
            "arrow_speed_additive_modifiers_also_apply_to_bow_damage" => Stat::ArrowSpeedAdditiveModifiersAlsoApplyToBowDamage(Other(v as f32)),
            "ascendancy_beidats_gaze_mana_+_per_X_maximum_life" => Stat::AscendancyBeidatsGazeManaPerXMaximumLife(Other(v as f32)),
            "ascendancy_beidats_hand_energy_shield_+_per_X_maximum_life" => Stat::AscendancyBeidatsHandEnergyShieldPerXMaximumLife(Other(v as f32)),
            "ascendancy_beidats_will_spirit_+_per_X_maximum_life" => Stat::AscendancyBeidatsWillSpiritPerXMaximumLife(Other(v as f32)),
            "ascendancy_chronomancer_apex_of_the_moment_base_slow_aura_value" => Stat::AscendancyChronomancerApexOfTheMomentBaseSlowAuraValue(Other(v as f32)),
            "ascendancy_energy_generated_+%_final" => Stat::AscendancyEnergyGeneratedFinal(Other(v as f32)),
            "ascendancy_pathfinder_flask_charges_gained_+%_final" => Stat::AscendancyPathfinderFlaskChargesGainedFinal(Other(v as f32)),
            "ascendancy_titan_damage_reduction_rating_from_body_armour_+%_final" => Stat::AscendancyTitanDamageReductionRatingFromBodyArmourFinal(Other(v as f32)),
            "ascendancy_warbringer_block_chance_+%_final" => Stat::AscendancyWarbringerBlockChanceFinal(Other(v as f32)),
            "atlas_keystone_corruption_roulette" => Stat::AtlasKeystoneCorruptionRoulette(Other(v as f32)),
            "atlas_keystone_extreme_archaeology" => Stat::AtlasKeystoneExtremeArchaeology(Other(v as f32)),
            "atlas_keystone_prefix_or_suffix_mod_effect_+%_final" => Stat::AtlasKeystonePrefixOrSuffixModEffectFinal(Other(v as f32)),
            "attack_additional_critical_strike_chance_permyriad" => Stat::AttackAdditionalCriticalStrikeChancePermyriad(Other(v as f32)),
            "attack_and_cast_speed_+%" => Stat::AttackAndCastSpeed(PlusPercentage(v as f32)),
            "attack_and_cast_speed_+%_on_placing_totem" => Stat::AttackAndCastSpeedOnPlacingTotem(Other(v as f32)),
            "attack_and_cast_speed_+%_while_affected_by_a_mana_flask" => Stat::AttackAndCastSpeedWhileAffectedByAManaFlask(Other(v as f32)),
            "attack_and_cast_speed_+%_with_elemental_skills" => Stat::AttackAndCastSpeedWithElementalSkills(Other(v as f32)),
            "attack_and_cast_speed_+%_with_lightning_skills" => Stat::AttackAndCastSpeedWithLightningSkills(Other(v as f32)),
            "attack_area_damage_+%" => Stat::AttackAreaDamage(PlusPercentage(v as f32)),
            "attack_area_of_effect_+%" => Stat::AttackAreaOfEffect(PlusPercentage(v as f32)),
            "attack_critical_strike_chance_+%" => Stat::AttackCriticalStrikeChance(PlusPercentage(v as f32)),
            "attack_critical_strike_multiplier_+" => Stat::AttackCriticalStrikeMultiplier(Plus(v as f32)),
            "attack_damage_+%" => Stat::AttackDamage(PlusPercentage(v as f32)),
            "attack_damage_vs_bleeding_enemies_+%" => Stat::AttackDamageVsBleedingEnemies(PlusPercentage(v as f32)),
            "attack_damage_+%_vs_rare_or_unique_enemy" => Stat::AttackDamageVsRareOrUniqueEnemy(Other(v as f32)),
            "attack_damage_+%_when_on_full_life" => Stat::AttackDamageWhenOnFullLife(Other(v as f32)),
            "attack_damage_+%_when_on_low_life" => Stat::AttackDamageWhenOnLowLife(Other(v as f32)),
            "attack_damage_+%_while_ally_in_presence" => Stat::AttackDamageWhileAllyInPresence(Other(v as f32)),
            "attack_damage_+%_while_surrounded" => Stat::AttackDamageWhileSurrounded(Other(v as f32)),
            "attack_mana_cost_+%" => Stat::AttackManaCost(PlusPercentage(v as f32)),
            "attack_skills_additional_totems_allowed" => Stat::AttackSkillsAdditionalTotemsAllowed(Other(v as f32)),
            "attack_skills_damage_+%_while_holding_shield" => Stat::AttackSkillsDamageWhileHoldingShield(Other(v as f32)),
            "attack_speed_+%" => Stat::AttackSpeed(PlusPercentage(v as f32)),
            "attack_speed_+%_during_flask_effect" => Stat::AttackSpeedDuringFlaskEffect(Other(v as f32)),
            "attack_speed_+%_if_enemy_killed_recently" => Stat::AttackSpeedIfEnemyKilledRecently(Other(v as f32)),
            "attack_speed_+%_if_have_been_hit_recently" => Stat::AttackSpeedIfHaveBeenHitRecently(Other(v as f32)),
            "attack_speed_+%_if_rare_or_unique_enemy_nearby" => Stat::AttackSpeedIfRareOrUniqueEnemyNearby(Other(v as f32)),
            "attack_speed_+%_if_you_have_not_attacked_recently" => Stat::AttackSpeedIfYouHaveNotAttackedRecently(Other(v as f32)),
            "attack_speed_while_dual_wielding_+%" => Stat::AttackSpeedWhileDualWielding(PlusPercentage(v as f32)),
            "attack_speed_+%_while_holding_shield" => Stat::AttackSpeedWhileHoldingShield(Other(v as f32)),
            "attack_speed_+%_while_surrounded" => Stat::AttackSpeedWhileSurrounded(Other(v as f32)),
            "attacks_chance_to_blind_on_hit_%" => Stat::AttacksChanceToBlindOnHit(Other(v as f32)),
            "aura_effect_+%" => Stat::AuraEffect(PlusPercentage(v as f32)),
            "axe_attack_speed_+%" => Stat::AxeAttackSpeed(PlusPercentage(v as f32)),
            "axe_damage_+%" => Stat::AxeDamage(PlusPercentage(v as f32)),
            "base_aggravate_bleeding_on_attack_hit_chance_%" => Stat::BaseAggravateBleedingOnAttackHitChance(Other(v as f32)),
            "base_all_ailment_duration_on_self_+%" => Stat::BaseAllAilmentDurationOnSelf(PlusPercentage(v as f32)),
            "base_armour_%_applies_to_fire_damage" => Stat::BaseArmourAppliesToFireDamage(Other(v as f32)),
            "base_attack_damage_penetrates_elemental_resist_%" => Stat::BaseAttackDamagePenetratesElementalResist(Other(v as f32)),
            "base_bleed_duration_+%" => Stat::BaseBleedDuration(PlusPercentage(v as f32)),
            "base_bleeding_effect_+%" => Stat::BaseBleedingEffect(PlusPercentage(v as f32)),
            "base_block_%_damage_taken" => Stat::BaseBlockDamageTaken(Other(v as f32)),
            "base_body_armour_permyriad_to_gain_as_physical_thorns_damage" => Stat::BaseBodyArmourPermyriadToGainAsPhysicalThornsDamage(Other(v as f32)),
            "base_cast_speed_+%" => Stat::BaseCastSpeed(PlusPercentage(v as f32)),
            "base_chance_to_inflict_bleeding_%" => Stat::BaseChanceToInflictBleeding(Other(v as f32)),
            "base_chance_to_not_consume_corpse_%" => Stat::BaseChanceToNotConsumeCorpse(Other(v as f32)),
            "base_chance_to_pierce_%" => Stat::BaseChanceToPierce(Other(v as f32)),
            "base_chance_to_poison_on_hit_%" => Stat::BaseChanceToPoisonOnHit(Other(v as f32)),
            "base_chance_to_poison_on_hit_%_vs_non_poisoned_enemies" => Stat::BaseChanceToPoisonOnHitVsNonPoisonedEnemies(Other(v as f32)),
            "base_chaos_damage_resistance_%" => Stat::BaseChaosDamageResistance(Other(v as f32)),
            "base_cold_damage_resistance_%" => Stat::BaseColdDamageResistance(Other(v as f32)),
            "base_cooldown_speed_+%" => Stat::BaseCooldownSpeed(PlusPercentage(v as f32)),
            "base_cost_+%" => Stat::BaseCost(PlusPercentage(v as f32)),
            "base_critical_strike_multiplier_+" => Stat::BaseCriticalStrikeMultiplier(Plus(v as f32)),
            "base_curse_duration_+%" => Stat::BaseCurseDuration(PlusPercentage(v as f32)),
            "base_damage_removed_from_mana_before_life_%" => Stat::BaseDamageRemovedFromManaBeforeLife(Other(v as f32)),
            "base_damaging_ailment_effect_+%" => Stat::BaseDamagingAilmentEffect(PlusPercentage(v as f32)),
            "base_darkness" => Stat::BaseDarkness(Other(v as f32)),
            "base_darkness_refresh_rate_ms" => Stat::BaseDarknessRefreshRateMs(Other(v as f32)),
            "base_debuff_slow_magnitude_+%" => Stat::BaseDebuffSlowMagnitude(PlusPercentage(v as f32)),
            "base_dexterity" => Stat::BaseDexterity(Other(v as f32)),
            "base_dexterity_and_intelligence" => Stat::BaseDexterityAndIntelligence(Other(v as f32)),
            "base_elemental_status_ailment_duration_+%" => Stat::BaseElementalStatusAilmentDuration(PlusPercentage(v as f32)),
            "base_enemy_critical_strike_chance_+%_against_self" => Stat::BaseEnemyCriticalStrikeChanceAgainstSelf(Other(v as f32)),
            "base_evasion_rating" => Stat::BaseEvasionRating(Other(v as f32)),
            "base_fire_damage_resistance_%" => Stat::BaseFireDamageResistance(Other(v as f32)),
            "base_frenzy_charge_duration_+%" => Stat::BaseFrenzyChargeDuration(PlusPercentage(v as f32)),
            "base_ignite_effect_+%" => Stat::BaseIgniteEffect(PlusPercentage(v as f32)),
            "base_intelligence" => Stat::BaseIntelligence(Other(v as f32)),
            "base_life_gained_on_enemy_death" => Stat::BaseLifeGainedOnEnemyDeath(Other(v as f32)),
            "base_life_leech_amount_+%" => Stat::BaseLifeLeechAmount(PlusPercentage(v as f32)),
            "base_life_leech_does_not_stop_at_full_life" => Stat::BaseLifeLeechDoesNotStopAtFullLife(Other(v as f32)),
            "base_life_leech_from_all_spell_damage_permyriad" => Stat::BaseLifeLeechFromAllSpellDamagePermyriad(Other(v as f32)),
            "base_life_leech_rate_+%" => Stat::BaseLifeLeechRate(PlusPercentage(v as f32)),
            "base_mana_cost_-%" => Stat::BaseManaCost(MinusPercentage(v as f32)),
            "base_mana_leech_amount_+%" => Stat::BaseManaLeechAmount(PlusPercentage(v as f32)),
            "base_mana_leech_is_instant" => Stat::BaseManaLeechIsInstant(Other(v as f32)),
            "base_maximum_chaos_damage_resistance_%" => Stat::BaseMaximumChaosDamageResistance(Other(v as f32)),
            "base_maximum_cold_damage_resistance_%" => Stat::BaseMaximumColdDamageResistance(Other(v as f32)),
            "base_maximum_energy_shield" => Stat::BaseMaximumEnergyShield(Other(v as f32)),
            "base_maximum_fire_damage_resistance_%" => Stat::BaseMaximumFireDamageResistance(Other(v as f32)),
            "base_maximum_life" => Stat::BaseMaximumLife(Other(v as f32)),
            "base_maximum_lightning_damage_resistance_%" => Stat::BaseMaximumLightningDamageResistance(Other(v as f32)),
            "base_maximum_mana" => Stat::BaseMaximumMana(Other(v as f32)),
            "base_movement_velocity_+%" => Stat::BaseMovementVelocity(PlusPercentage(v as f32)),
            "base_penetrate_elemental_resistances_%" => Stat::BasePenetrateElementalResistances(Other(v as f32)),
            "base_physical_damage_reduction_rating" => Stat::BasePhysicalDamageReductionRating(Other(v as f32)),
            "base_poison_duration_+%" => Stat::BasePoisonDuration(PlusPercentage(v as f32)),
            "base_poison_effect_+%" => Stat::BasePoisonEffect(PlusPercentage(v as f32)),
            "base_projectile_speed_+%" => Stat::BaseProjectileSpeed(PlusPercentage(v as f32)),
            "base_reduce_enemy_cold_resistance_%" => Stat::BaseReduceEnemyColdResistance(Other(v as f32)),
            "base_reduce_enemy_fire_resistance_%" => Stat::BaseReduceEnemyFireResistance(Other(v as f32)),
            "base_reduce_enemy_lightning_resistance_%" => Stat::BaseReduceEnemyLightningResistance(Other(v as f32)),
            "base_resist_all_elements_%" => Stat::BaseResistAllElements(Other(v as f32)),
            "base_self_critical_strike_multiplier_-%" => Stat::BaseSelfCriticalStrikeMultiplier(MinusPercentage(v as f32)),
            "base_self_freeze_duration_-%" => Stat::BaseSelfFreezeDuration(MinusPercentage(v as f32)),
            "base_self_ignite_duration_-%" => Stat::BaseSelfIgniteDuration(MinusPercentage(v as f32)),
            "base_self_shock_duration_-%" => Stat::BaseSelfShockDuration(MinusPercentage(v as f32)),
            "base_should_have_arcane_surge_from_stat" => Stat::BaseShouldHaveArcaneSurgeFromStat(Other(v as f32)),
            "base_skill_area_of_effect_+%" => Stat::BaseSkillAreaOfEffect(PlusPercentage(v as f32)),
            "base_skill_cost_life_instead_of_mana_%" => Stat::BaseSkillCostLifeInsteadOfMana(Other(v as f32)),
            "base_slow_potency_+%" => Stat::BaseSlowPotency(PlusPercentage(v as f32)),
            "base_spell_critical_strike_chance_override_permyriad" => Stat::BaseSpellCriticalStrikeChanceOverridePermyriad(Other(v as f32)),
            "base_spell_critical_strike_multiplier_+" => Stat::BaseSpellCriticalStrikeMultiplier(Plus(v as f32)),
            "base_strength" => Stat::BaseStrength(Other(v as f32)),
            "base_strength_and_dexterity" => Stat::BaseStrengthAndDexterity(Other(v as f32)),
            "base_strength_and_intelligence" => Stat::BaseStrengthAndIntelligence(Other(v as f32)),
            "base_stun_recovery_+%" => Stat::BaseStunRecovery(PlusPercentage(v as f32)),
            "base_thorns_critical_strike_chance" => Stat::BaseThornsCriticalStrikeChance(Other(v as f32)),
            "base_thorns_critical_strike_multiplier_+" => Stat::BaseThornsCriticalStrikeMultiplier(Plus(v as f32)),
            "bleed_on_crit_%" => Stat::BleedOnCrit(Other(v as f32)),
            "bleed_on_crit_%_with_attacks" => Stat::BleedOnCritWithAttacks(Other(v as f32)),
            "blind_effect_+%" => Stat::BlindEffect(PlusPercentage(v as f32)),
            "blind_enemies_when_they_stun_you" => Stat::BlindEnemiesWhenTheyStunYou(Other(v as f32)),
            "block_chance_+%" => Stat::BlockChance(PlusPercentage(v as f32)),
            "block_chance_from_equipped_shield_is_%" => Stat::BlockChanceFromEquippedShieldIs(Other(v as f32)),
            "block_chance_+%_if_blocked_with_active_block_recently" => Stat::BlockChanceIfBlockedWithActiveBlockRecently(Other(v as f32)),
            "block_recovery_+%" => Stat::BlockRecovery(PlusPercentage(v as f32)),
            "body_armour_+%" => Stat::BodyArmour(PlusPercentage(v as f32)),
            "body_armour_evasion_rating_+%" => Stat::BodyArmourEvasionRating(PlusPercentage(v as f32)),
            "bow_accuracy_rating_+%" => Stat::BowAccuracyRating(PlusPercentage(v as f32)),
            "bow_attack_speed_+%" => Stat::BowAttackSpeed(PlusPercentage(v as f32)),
            "bow_critical_strike_multiplier_+" => Stat::BowCriticalStrikeMultiplier(Plus(v as f32)),
            "bow_damage_+%" => Stat::BowDamage(PlusPercentage(v as f32)),
            "breach_flame_effects_doubled" => Stat::BreachFlameEffectsDoubled(Other(v as f32)),
            "buff_time_passed_+%_only_buff_category" => Stat::BuffTimePassedOnlyBuffCategory(Other(v as f32)),
            "buildup_jade_every_x_ms" => Stat::BuildupJadeEveryXMs(Other(v as f32)),
            "can_apply_additional_chill" => Stat::CanApplyAdditionalChill(Other(v as f32)),
            "can_apply_additional_shock" => Stat::CanApplyAdditionalShock(Other(v as f32)),
            "can_block_all_hits_while_shield_is_lowered" => Stat::CanBlockAllHitsWhileShieldIsLowered(Other(v as f32)),
            "cannot_be_blinded_while_on_full_life" => Stat::CannotBeBlindedWhileOnFullLife(Other(v as f32)),
            "cannot_gain_spirit_from_equipment" => Stat::CannotGainSpiritFromEquipment(Other(v as f32)),
            "cannot_recharge_energy_shield" => Stat::CannotRechargeEnergyShield(Other(v as f32)),
            "cast_speed_for_cold_skills_+%" => Stat::CastSpeedForColdSkills(PlusPercentage(v as f32)),
            "cast_speed_+%_if_have_crit_recently" => Stat::CastSpeedIfHaveCritRecently(Other(v as f32)),
            "cast_speed_+%_per_num_unique_spells_cast_recently" => Stat::CastSpeedPerNumUniqueSpellsCastRecently(Other(v as f32)),
            "cast_speed_+%_when_on_full_life" => Stat::CastSpeedWhenOnFullLife(Other(v as f32)),
            "cast_speed_+%_when_on_low_life" => Stat::CastSpeedWhenOnLowLife(Other(v as f32)),
            "cast_speed_+%_while_holding_staff" => Stat::CastSpeedWhileHoldingStaff(Other(v as f32)),
            "chance_for_skills_to_avoid_cooldown_%" => Stat::ChanceForSkillsToAvoidCooldown(Other(v as f32)),
            "chance_%_to_create_shocking_ground_on_shock" => Stat::ChanceToCreateShockingGroundOnShock(Other(v as f32)),
            "chance_to_double_armour_effect_on_hit_%" => Stat::ChanceToDoubleArmourEffectOnHit(Other(v as f32)),
            "chance_%_to_double_effect_of_removing_frenzy_charges" => Stat::ChanceToDoubleEffectOfRemovingFrenzyCharges(Other(v as f32)),
            "chance_to_fork_extra_projectile_%" => Stat::ChanceToForkExtraProjectile(Other(v as f32)),
            "chance_to_gain_onslaught_on_kill_with_axes_%" => Stat::ChanceToGainOnslaughtOnKillWithAxes(Other(v as f32)),
            "chance_to_poison_on_critical_strike_with_dagger_%" => Stat::ChanceToPoisonOnCriticalStrikeWithDagger(Other(v as f32)),
            "chance_to_summon_two_totems_%" => Stat::ChanceToSummonTwoTotems(Other(v as f32)),
            "chaos_damage_+%" => Stat::ChaosDamage(PlusPercentage(v as f32)),
            "chaos_damage_resistance_is_doubled" => Stat::ChaosDamageResistanceIsDoubled(Other(v as f32)),
            "chaos_skill_gem_level_+" => Stat::ChaosSkillGemLevel(Plus(v as f32)),
            "charges_gained_+%" => Stat::ChargesGained(PlusPercentage(v as f32)),
            "charm_charges_gained_+%" => Stat::CharmChargesGained(PlusPercentage(v as f32)),
            "charm_charges_used_+%" => Stat::CharmChargesUsed(PlusPercentage(v as f32)),
            "charm_duration_+%" => Stat::CharmDuration(PlusPercentage(v as f32)),
            "charm_effect_+%" => Stat::CharmEffect(PlusPercentage(v as f32)),
            "charms_%_chance_on_use_to_use_another_charm_without_consuming_charges" => Stat::CharmsChanceOnUseToUseAnotherCharmWithoutConsumingCharges(Other(v as f32)),
            "charms_%_chance_to_not_consume_charges" => Stat::CharmsChanceToNotConsumeCharges(Other(v as f32)),
            "chill_and_freeze_duration_+%" => Stat::ChillAndFreezeDuration(PlusPercentage(v as f32)),
            "chill_duration_+%" => Stat::ChillDuration(PlusPercentage(v as f32)),
            "chill_effect_+%" => Stat::ChillEffect(PlusPercentage(v as f32)),
            "chill_effectiveness_on_self_+%" => Stat::ChillEffectivenessOnSelf(PlusPercentage(v as f32)),
            "claw_accuracy_rating_+%" => Stat::ClawAccuracyRating(PlusPercentage(v as f32)),
            "claw_attack_speed_+%" => Stat::ClawAttackSpeed(PlusPercentage(v as f32)),
            "claw_critical_strike_chance_+%" => Stat::ClawCriticalStrikeChance(PlusPercentage(v as f32)),
            "claw_damage_+%" => Stat::ClawDamage(PlusPercentage(v as f32)),
            "cold_damage_+%" => Stat::ColdDamage(PlusPercentage(v as f32)),
            "cold_damage_+%_while_affected_by_herald_of_ice" => Stat::ColdDamageWhileAffectedByHeraldOfIce(Other(v as f32)),
            "cold_exposure_effect_+%" => Stat::ColdExposureEffect(PlusPercentage(v as f32)),
            "cold_exposure_you_inflict_lowers_cold_resistance_by_extra_%" => Stat::ColdExposureYouInflictLowersColdResistanceByExtra(Other(v as f32)),
            "cold_hit_and_dot_damage_%_taken_as_fire" => Stat::ColdHitAndDotDamageTakenAsFire(Other(v as f32)),
            "cold_skill_gem_level_+" => Stat::ColdSkillGemLevel(Plus(v as f32)),
            "convert_all_life_leech_to_energy_shield_leech" => Stat::ConvertAllLifeLeechToEnergyShieldLeech(Other(v as f32)),
            "corpses_in_your_presence_explode_dealing_%_maximum_life_physical_damage_on_warcry" => Stat::CorpsesInYourPresenceExplodeDealingMaximumLifePhysicalDamageOnWarcry(Other(v as f32)),
            "create_chilling_ground_on_freeze" => Stat::CreateChillingGroundOnFreeze(Other(v as f32)),
            "critical_hit_bleeding_effect_+%" => Stat::CriticalHitBleedingEffect(PlusPercentage(v as f32)),
            "critical_hit_damage_bonus_+%_if_consumed_power_charge_recently" => Stat::CriticalHitDamageBonusIfConsumedPowerChargeRecently(Other(v as f32)),
            "critical_hit_damaging_ailment_effect_+%" => Stat::CriticalHitDamagingAilmentEffect(PlusPercentage(v as f32)),
            "critical_hit_ignite_effect_+%" => Stat::CriticalHitIgniteEffect(PlusPercentage(v as f32)),
            "critical_strike_chance_+%" => Stat::CriticalStrikeChance(PlusPercentage(v as f32)),
            "critical_strike_chance_against_enemies_on_full_life_+%" => Stat::CriticalStrikeChanceAgainstEnemiesOnFullLife(PlusPercentage(v as f32)),
            "critical_strike_chance_+%_if_enemy_killed_recently" => Stat::CriticalStrikeChanceIfEnemyKilledRecently(Other(v as f32)),
            "critical_strike_chance_+%_if_have_not_crit_recently" => Stat::CriticalStrikeChanceIfHaveNotCritRecently(Other(v as f32)),
            "critical_strike_chance_+%_vs_bleeding_enemies" => Stat::CriticalStrikeChanceVsBleedingEnemies(Other(v as f32)),
            "critical_strike_chance_+%_vs_dazed_enemies" => Stat::CriticalStrikeChanceVsDazedEnemies(Other(v as f32)),
            "critical_strike_chance_+%_vs_enemies_with_lightning_exposure" => Stat::CriticalStrikeChanceVsEnemiesWithLightningExposure(Other(v as f32)),
            "critical_strike_chance_+%_vs_enemies_without_elemental_status_ailments" => Stat::CriticalStrikeChanceVsEnemiesWithoutElementalStatusAilments(Other(v as f32)),
            "critical_strike_chance_+%_vs_shocked_enemies" => Stat::CriticalStrikeChanceVsShockedEnemies(Other(v as f32)),
            "critical_strike_chance_while_dual_wielding_+%" => Stat::CriticalStrikeChanceWhileDualWielding(PlusPercentage(v as f32)),
            "critical_strike_multiplier_+_during_any_flask_effect" => Stat::CriticalStrikeMultiplierDuringAnyFlaskEffect(Other(v as f32)),
            "critical_strike_multiplier_+_if_gained_power_charge_recently" => Stat::CriticalStrikeMultiplierIfGainedPowerChargeRecently(Other(v as f32)),
            "critical_strike_multiplier_+_if_have_dealt_non_crit_recently" => Stat::CriticalStrikeMultiplierIfHaveDealtNonCritRecently(Other(v as f32)),
            "critical_strike_multiplier_+_if_have_not_dealt_critical_strike_recently" => Stat::CriticalStrikeMultiplierIfHaveNotDealtCriticalStrikeRecently(Other(v as f32)),
            "critical_strike_multiplier_+_vs_burning_enemies" => Stat::CriticalStrikeMultiplierVsBurningEnemies(Other(v as f32)),
            "critical_strike_multiplier_vs_enemies_on_full_life_+" => Stat::CriticalStrikeMultiplierVsEnemiesOnFullLife(Plus(v as f32)),
            "critical_strike_multiplier_+_vs_stunned_enemies" => Stat::CriticalStrikeMultiplierVsStunnedEnemies(Other(v as f32)),
            "critical_strike_multiplier_with_dagger_+" => Stat::CriticalStrikeMultiplierWithDagger(Plus(v as f32)),
            "critical_strikes_ignore_positive_elemental_resistances" => Stat::CriticalStrikesIgnorePositiveElementalResistances(Other(v as f32)),
            "crossbow_attack_%_chance_to_not_consume_ammo" => Stat::CrossbowAttackChanceToNotConsumeAmmo(Other(v as f32)),
            "crossbow_attack_speed_+%" => Stat::CrossbowAttackSpeed(PlusPercentage(v as f32)),
            "crossbow_critical_strike_chance_+%" => Stat::CrossbowCriticalStrikeChance(PlusPercentage(v as f32)),
            "crossbow_critical_strike_multiplier_+" => Stat::CrossbowCriticalStrikeMultiplier(Plus(v as f32)),
            "crossbow_damage_+%" => Stat::CrossbowDamage(PlusPercentage(v as f32)),
            "crushing_blow" => Stat::CrushingBlow(Other(v as f32)),
            "culling_strike_threshold_+%" => Stat::CullingStrikeThreshold(PlusPercentage(v as f32)),
            "culling_strike_vs_marked_enemy" => Stat::CullingStrikeVsMarkedEnemy(Other(v as f32)),
            "curse_area_of_effect_+%" => Stat::CurseAreaOfEffect(PlusPercentage(v as f32)),
            "curse_delay_+%" => Stat::CurseDelay(PlusPercentage(v as f32)),
            "curse_effect_+%" => Stat::CurseEffect(PlusPercentage(v as f32)),
            "curse_effect_on_self_+%" => Stat::CurseEffectOnSelf(PlusPercentage(v as f32)),
            "curses_never_expire" => Stat::CursesNeverExpire(Other(v as f32)),
            "dagger_attack_speed_+%" => Stat::DaggerAttackSpeed(PlusPercentage(v as f32)),
            "dagger_critical_strike_chance_+%" => Stat::DaggerCriticalStrikeChance(PlusPercentage(v as f32)),
            "dagger_damage_+%" => Stat::DaggerDamage(PlusPercentage(v as f32)),
            "damage_+%" => Stat::Damage(PlusPercentage(v as f32)),
            "damage_+%_against_enemies_with_fully_broken_armour" => Stat::DamageAgainstEnemiesWithFullyBrokenArmour(Other(v as f32)),
            "damage_+%_if_triggered_skill_recently" => Stat::DamageIfTriggeredSkillRecently(Other(v as f32)),
            "damage_+%_if_you_have_consumed_a_corpse_recently" => Stat::DamageIfYouHaveConsumedACorpseRecently(Other(v as f32)),
            "damage_+%_per_active_curse_on_self" => Stat::DamagePerActiveCurseOnSelf(Other(v as f32)),
            "damage_+%_per_different_warcry_used_recently" => Stat::DamagePerDifferentWarcryUsedRecently(Other(v as f32)),
            "damage_+%_per_enemy_elemental_ailment" => Stat::DamagePerEnemyElementalAilment(Other(v as f32)),
            "damage_+%_per_warcry_used_recently" => Stat::DamagePerWarcryUsedRecently(Other(v as f32)),
            "damage_removed_from_your_nearest_totem_before_life_or_es_%" => Stat::DamageRemovedFromYourNearestTotemBeforeLifeOrEs(Other(v as f32)),
            "damage_taken_+%_final_per_tailwind" => Stat::DamageTakenFinalPerTailwind(Other(v as f32)),
            "damage_taken_goes_to_mana_%" => Stat::DamageTakenGoesToMana(Other(v as f32)),
            "damage_taken_+%_on_low_life" => Stat::DamageTakenOnLowLife(Other(v as f32)),
            "damage_+%_to_rare_and_unique_enemies" => Stat::DamageToRareAndUniqueEnemies(Other(v as f32)),
            "damage_+%_vs_burning_enemies" => Stat::DamageVsBurningEnemies(Other(v as f32)),
            "damage_+%_vs_dazed_enemies" => Stat::DamageVsDazedEnemies(Other(v as f32)),
            "damage_+%_vs_enemies_affected_by_status_ailments" => Stat::DamageVsEnemiesAffectedByStatusAilments(Other(v as f32)),
            "damage_+%_vs_enemies_on_full_life" => Stat::DamageVsEnemiesOnFullLife(Other(v as f32)),
            "damage_vs_enemies_on_low_life_+%" => Stat::DamageVsEnemiesOnLowLife(PlusPercentage(v as f32)),
            "damage_+%_vs_frozen_enemies" => Stat::DamageVsFrozenEnemies(Other(v as f32)),
            "damage_+%_vs_hindered_enemies" => Stat::DamageVsHinderedEnemies(Other(v as f32)),
            "damage_vs_shocked_enemies_+%" => Stat::DamageVsShockedEnemies(PlusPercentage(v as f32)),
            "damage_+%_while_affected_by_a_herald" => Stat::DamageWhileAffectedByAHerald(Other(v as f32)),
            "damage_while_dual_wielding_+%" => Stat::DamageWhileDualWielding(PlusPercentage(v as f32)),
            "damage_+%_while_totem_active" => Stat::DamageWhileTotemActive(Other(v as f32)),
            "damage_+%_while_unarmed" => Stat::DamageWhileUnarmed(Other(v as f32)),
            "damage_+%_while_using_charm" => Stat::DamageWhileUsingCharm(Other(v as f32)),
            "damage_+%_while_wielding_wand" => Stat::DamageWhileWieldingWand(Other(v as f32)),
            "damage_+%_with_daggers_against_full_life_enemies" => Stat::DamageWithDaggersAgainstFullLifeEnemies(Other(v as f32)),
            "damage_+%_with_herald_skills" => Stat::DamageWithHeraldSkills(Other(v as f32)),
            "damage_with_hits_is_lucky_vs_enemies_on_low_life" => Stat::DamageWithHitsIsLuckyVsEnemiesOnLowLife(Other(v as f32)),
            "damage_with_hits_is_lucky_vs_heavy_stunned_enemies" => Stat::DamageWithHitsIsLuckyVsHeavyStunnedEnemies(Other(v as f32)),
            "damage_+%_with_one_handed_weapons" => Stat::DamageWithOneHandedWeapons(Other(v as f32)),
            "damage_+%_with_two_handed_weapons" => Stat::DamageWithTwoHandedWeapons(Other(v as f32)),
            "damaging_ailment_duration_+%" => Stat::DamagingAilmentDuration(PlusPercentage(v as f32)),
            "damaging_ailments_deal_damage_+%_faster" => Stat::DamagingAilmentsDealDamageFaster(Other(v as f32)),
            "darkness_per_level" => Stat::DarknessPerLevel(Other(v as f32)),
            "darkness_refresh_rate_+%" => Stat::DarknessRefreshRate(PlusPercentage(v as f32)),
            "daze_build_up_+%" => Stat::DazeBuildUp(PlusPercentage(v as f32)),
            "daze_duration_+%" => Stat::DazeDuration(PlusPercentage(v as f32)),
            "deadeye_accuracy_unaffected_by_range" => Stat::DeadeyeAccuracyUnaffectedByRange(Other(v as f32)),
            "deadeye_movement_speed_penalty_+%_final_while_performing_action" => Stat::DeadeyeMovementSpeedPenaltyFinalWhilePerformingAction(Other(v as f32)),
            "deadeye_projectile_damage_+%_final_max_as_distance_travelled_decreases" => Stat::DeadeyeProjectileDamageFinalMaxAsDistanceTravelledDecreases(Other(v as f32)),
            "deadeye_projectile_damage_+%_final_max_as_distance_travelled_increases" => Stat::DeadeyeProjectileDamageFinalMaxAsDistanceTravelledIncreases(Other(v as f32)),
            "debuff_time_passed_+%" => Stat::DebuffTimePassed(PlusPercentage(v as f32)),
            "decimating_strike" => Stat::DecimatingStrike(Other(v as f32)),
            "defences_+%_while_wielding_staff" => Stat::DefencesWhileWieldingStaff(Other(v as f32)),
            "defend_with_%_armour_against_critical_strikes" => Stat::DefendWithArmourAgainstCriticalStrikes(Other(v as f32)),
            "defend_with_%_armour_against_ranged_attacks" => Stat::DefendWithArmourAgainstRangedAttacks(Other(v as f32)),
            "defend_with_%_of_armour_while_not_on_low_energy_shield" => Stat::DefendWithOfArmourWhileNotOnLowEnergyShield(Other(v as f32)),
            "dexterity_+%" => Stat::Dexterity(PlusPercentage(v as f32)),
            "display_passive_attribute_text" => Stat::DisplayPassiveAttributeText(Other(v as f32)),
            "distance_scaled_accuracy_rating_penalty_+%" => Stat::DistanceScaledAccuracyRatingPenalty(PlusPercentage(v as f32)),
            "double_number_of_poison_you_can_inflict" => Stat::DoubleNumberOfPoisonYouCanInflict(Other(v as f32)),
            "double_tablet_effect_chance_%_when_opening_a_map" => Stat::DoubleTabletEffectChanceWhenOpeningAMap(Other(v as f32)),
            "drain_focus_%_of_damage_dealt_on_hit" => Stat::DrainFocusOfDamageDealtOnHit(Other(v as f32)),
            "dummy_stat_display_nothing" => Stat::DummyStatDisplayNothing(Other(v as f32)),
            "electrocuted_enemy_damage_taken_+%" => Stat::ElectrocutedEnemyDamageTaken(PlusPercentage(v as f32)),
            "elemental_damage_+%" => Stat::ElementalDamage(PlusPercentage(v as f32)),
            "elemental_damage_can_inflict_bleeding" => Stat::ElementalDamageCanInflictBleeding(Other(v as f32)),
            "elemental_damage_+%_if_enemy_chilled_recently" => Stat::ElementalDamageIfEnemyChilledRecently(Other(v as f32)),
            "elemental_damage_+%_if_enemy_ignited_recently" => Stat::ElementalDamageIfEnemyIgnitedRecently(Other(v as f32)),
            "elemental_damage_+%_if_enemy_shocked_recently" => Stat::ElementalDamageIfEnemyShockedRecently(Other(v as f32)),
            "elemental_damage_+%_if_have_crit_recently" => Stat::ElementalDamageIfHaveCritRecently(Other(v as f32)),
            "elemental_damage_taken_%_recouped_as_life" => Stat::ElementalDamageTakenRecoupedAsLife(Other(v as f32)),
            "elemental_damage_with_attack_skills_+%" => Stat::ElementalDamageWithAttackSkills(PlusPercentage(v as f32)),
            "elemental_damage_with_attack_skills_+%_while_using_flask" => Stat::ElementalDamageWithAttackSkillsWhileUsingFlask(Other(v as f32)),
            "elemental_storm_cooldown_recovery_speed_+%_final" => Stat::ElementalStormCooldownRecoverySpeedFinal(Other(v as f32)),
            "elementalist_chill_maximum_magnitude_override" => Stat::ElementalistChillMaximumMagnitudeOverride(Other(v as f32)),
            "empowered_attack_damage_+%" => Stat::EmpoweredAttackDamage(PlusPercentage(v as f32)),
            "empowered_attack_hit_damage_stun_multiplier_+%" => Stat::EmpoweredAttackHitDamageStunMultiplier(PlusPercentage(v as f32)),
            "endurance_charge_duration_+%" => Stat::EnduranceChargeDuration(PlusPercentage(v as f32)),
            "enemies_are_maimed_for_x_seconds_after_becoming_unpinned" => Stat::EnemiesAreMaimedForXSecondsAfterBecomingUnpinned(Other(v as f32)),
            "enemies_chaos_resistance_%_while_cursed" => Stat::EnemiesChaosResistanceWhileCursed(Other(v as f32)),
            "enemies_cursed_by_you_have_life_regeneration_rate_+%" => Stat::EnemiesCursedByYouHaveLifeRegenerationRate(PlusPercentage(v as f32)),
            "enemies_in_presence_cooldown_recovery_+%" => Stat::EnemiesInPresenceCooldownRecovery(PlusPercentage(v as f32)),
            "enemies_near_marked_enemy_are_blinded" => Stat::EnemiesNearMarkedEnemyAreBlinded(Other(v as f32)),
            "enemies_you_curse_cannot_recharge_energy_shield" => Stat::EnemiesYouCurseCannotRechargeEnergyShield(Other(v as f32)),
            "energy_generated_+%" => Stat::EnergyGenerated(PlusPercentage(v as f32)),
            "energy_shield_delay_-%" => Stat::EnergyShieldDelay(MinusPercentage(v as f32)),
            "energy_shield_delay_-%_if_stunned_recently" => Stat::EnergyShieldDelayIfStunnedRecently(Other(v as f32)),
            "energy_shield_delay_-%_when_not_on_full_life" => Stat::EnergyShieldDelayWhenNotOnFullLife(Other(v as f32)),
            "energy_shield_from_focus_+%" => Stat::EnergyShieldFromFocus(PlusPercentage(v as f32)),
            "energy_shield_from_helmet_+%" => Stat::EnergyShieldFromHelmet(PlusPercentage(v as f32)),
            "energy_shield_gained_on_block" => Stat::EnergyShieldGainedOnBlock(Other(v as f32)),
            "energy_shield_+%_if_consumed_power_charge_recently" => Stat::EnergyShieldIfConsumedPowerChargeRecently(Other(v as f32)),
            "energy_shield_recharge_rate_+%" => Stat::EnergyShieldRechargeRate(PlusPercentage(v as f32)),
            "energy_shield_recovery_rate_+%" => Stat::EnergyShieldRecoveryRate(PlusPercentage(v as f32)),
            "energy_shield_recovery_rate_+%_if_not_hit_recently" => Stat::EnergyShieldRecoveryRateIfNotHitRecently(Other(v as f32)),
            "evasion_and_physical_damage_reduction_rating_+%" => Stat::EvasionAndPhysicalDamageReductionRating(PlusPercentage(v as f32)),
            "evasion_+%_if_hit_recently" => Stat::EvasionIfHitRecently(Other(v as f32)),
            "evasion_rating_+%" => Stat::EvasionRating(PlusPercentage(v as f32)),
            "evasion_rating_also_reduces_physical_damage" => Stat::EvasionRatingAlsoReducesPhysicalDamage(Other(v as f32)),
            "evasion_rating_+%_if_consumed_frenzy_charge_recently" => Stat::EvasionRatingIfConsumedFrenzyChargeRecently(Other(v as f32)),
            "evasion_rating_+%_if_have_not_been_hit_recently" => Stat::EvasionRatingIfHaveNotBeenHitRecently(Other(v as f32)),
            "evasion_rating_+%_if_you_dodge_rolled_recently" => Stat::EvasionRatingIfYouDodgeRolledRecently(Other(v as f32)),
            "evasion_rating_+%_if_you_have_hit_an_enemy_recently" => Stat::EvasionRatingIfYouHaveHitAnEnemyRecently(Other(v as f32)),
            "evasion_rating_%_to_gain_as_armour" => Stat::EvasionRatingToGainAsArmour(Other(v as f32)),
            "evasion_rating_+%_when_on_full_life" => Stat::EvasionRatingWhenOnFullLife(Other(v as f32)),
            "evasion_rating_+%_while_surrounded" => Stat::EvasionRatingWhileSurrounded(Other(v as f32)),
            "evasion_rating_+%_while_you_have_energy_shield" => Stat::EvasionRatingWhileYouHaveEnergyShield(Other(v as f32)),
            "expedition_monsters_logbook_chance_+%" => Stat::ExpeditionMonstersLogbookChance(PlusPercentage(v as f32)),
            "exposure_you_inflict_lowers_affected_resistance_by_extra_%" => Stat::ExposureYouInflictLowersAffectedResistanceByExtra(Other(v as f32)),
            "extra_damage_rolls_with_lightning_damage_on_non_critical_hits" => Stat::ExtraDamageRollsWithLightningDamageOnNonCriticalHits(Other(v as f32)),
            "faster_bleed_%" => Stat::FasterBleed(Other(v as f32)),
            "faster_burn_%" => Stat::FasterBurn(Other(v as f32)),
            "final_repeat_of_spells_area_of_effect_+%" => Stat::FinalRepeatOfSpellsAreaOfEffect(PlusPercentage(v as f32)),
            "fire_damage_+%" => Stat::FireDamage(PlusPercentage(v as f32)),
            "fire_damage_+%_while_affected_by_herald_of_ash" => Stat::FireDamageWhileAffectedByHeraldOfAsh(Other(v as f32)),
            "fire_exposure_effect_+%" => Stat::FireExposureEffect(PlusPercentage(v as f32)),
            "fire_exposure_you_inflict_lowers_fire_resistance_by_extra_%" => Stat::FireExposureYouInflictLowersFireResistanceByExtra(Other(v as f32)),
            "flail_attack_speed_+%" => Stat::FlailAttackSpeed(PlusPercentage(v as f32)),
            "flail_critical_strike_chance_+%" => Stat::FlailCriticalStrikeChance(PlusPercentage(v as f32)),
            "flail_critical_strike_multiplier_+" => Stat::FlailCriticalStrikeMultiplier(Plus(v as f32)),
            "flail_damage_+%" => Stat::FlailDamage(PlusPercentage(v as f32)),
            "flask_charges_gained_+%" => Stat::FlaskChargesGained(PlusPercentage(v as f32)),
            "flask_charges_used_+%" => Stat::FlaskChargesUsed(PlusPercentage(v as f32)),
            "flask_duration_+%" => Stat::FlaskDuration(PlusPercentage(v as f32)),
            "flask_effect_+%" => Stat::FlaskEffect(PlusPercentage(v as f32)),
            "flask_life_and_mana_recovery_+%_while_using_charm" => Stat::FlaskLifeAndManaRecoveryWhileUsingCharm(Other(v as f32)),
            "flask_life_and_mana_to_recover_+%" => Stat::FlaskLifeAndManaToRecover(PlusPercentage(v as f32)),
            "flask_life_recovery_rate_+%" => Stat::FlaskLifeRecoveryRate(PlusPercentage(v as f32)),
            "flask_life_to_recover_+%" => Stat::FlaskLifeToRecover(PlusPercentage(v as f32)),
            "flask_mana_charges_used_+%" => Stat::FlaskManaChargesUsed(PlusPercentage(v as f32)),
            "flask_mana_to_recover_+%" => Stat::FlaskManaToRecover(PlusPercentage(v as f32)),
            "flasks_%_chance_to_not_consume_charges" => Stat::FlasksChanceToNotConsumeCharges(Other(v as f32)),
            "focus_decay_delay_ms" => Stat::FocusDecayDelayMs(Other(v as f32)),
            "focus_decay_%_per_minute" => Stat::FocusDecayPerMinute(Other(v as f32)),
            "freeze_duration_+%" => Stat::FreezeDuration(PlusPercentage(v as f32)),
            "freeze_threshold_+%" => Stat::FreezeThreshold(PlusPercentage(v as f32)),
            "gain_accuracy_rating_equal_to_intelligence" => Stat::GainAccuracyRatingEqualToIntelligence(Other(v as f32)),
            "gain_accuracy_rating_equal_to_strength" => Stat::GainAccuracyRatingEqualToStrength(Other(v as f32)),
            "gain_arcane_surge_on_crit_%_chance" => Stat::GainArcaneSurgeOnCritChance(Other(v as f32)),
            "gain_%_damage_as_chaos_from_unreserved_darkness" => Stat::GainDamageAsChaosFromUnreservedDarkness(Other(v as f32)),
            "gain_endurance_charge_on_heavy_stunning_rare_or_unique_enemy" => Stat::GainEnduranceChargeOnHeavyStunningRareOrUniqueEnemy(Other(v as f32)),
            "gain_guard_flask_charge_when_hit_by_enemy_chance_%" => Stat::GainGuardFlaskChargeWhenHitByEnemyChance(Other(v as f32)),
            "gain_%_life_from_body_es" => Stat::GainLifeFromBodyEs(Other(v as f32)),
            "gain_max_rage_on_rage_gain_from_hit_%_chance" => Stat::GainMaxRageOnRageGainFromHitChance(Other(v as f32)),
            "gain_maximum_endurance_charges_on_endurance_charge_gained_%_chance" => Stat::GainMaximumEnduranceChargesOnEnduranceChargeGainedChance(Other(v as f32)),
            "gain_%_maximum_energy_shield_as_freeze_threshold_+" => Stat::GainMaximumEnergyShieldAsFreezeThreshold(Plus(v as f32)),
            "gain_maximum_frenzy_charges_on_frenzy_charge_gained_%_chance" => Stat::GainMaximumFrenzyChargesOnFrenzyChargeGainedChance(Other(v as f32)),
            "gain_maximum_power_charges_on_power_charge_gained_%_chance" => Stat::GainMaximumPowerChargesOnPowerChargeGainedChance(Other(v as f32)),
            "gain_tailwind_stack_on_skill_use" => Stat::GainTailwindStackOnSkillUse(Other(v as f32)),
            "gain_unbound_ailment_stacks" => Stat::GainUnboundAilmentStacks(Other(v as f32)),
            "gain_x_rage_on_hit_with_axes" => Stat::GainXRageOnHitWithAxes(Other(v as f32)),
            "gain_x_rage_on_melee_hit" => Stat::GainXRageOnMeleeHit(Other(v as f32)),
            "gain_x_rage_when_hit" => Stat::GainXRageWhenHit(Other(v as f32)),
            "gem_requirements_can_be_satisfied_by_highest_attribute" => Stat::GemRequirementsCanBeSatisfiedByHighestAttribute(Other(v as f32)),
            "gemling_double_basic_attribute_bonuses" => Stat::GemlingDoubleBasicAttributeBonuses(Other(v as f32)),
            "gemling_skill_cost_+%_final" => Stat::GemlingSkillCostFinal(Other(v as f32)),
            "generate_x_charges_for_charms_per_minute" => Stat::GenerateXChargesForCharmsPerMinute(Other(v as f32)),
            "generate_x_charges_for_life_flasks_per_minute" => Stat::GenerateXChargesForLifeFlasksPerMinute(Other(v as f32)),
            "generate_x_charges_for_mana_flasks_per_minute" => Stat::GenerateXChargesForManaFlasksPerMinute(Other(v as f32)),
            "global_chance_to_blind_on_hit_%" => Stat::GlobalChanceToBlindOnHit(Other(v as f32)),
            "global_defences_+%" => Stat::GlobalDefences(PlusPercentage(v as f32)),
            "global_gem_attribute_requirements_+%_final_from_gemling" => Stat::GlobalGemAttributeRequirementsFinalFromGemling(Other(v as f32)),
            "global_item_attribute_requirements_+%" => Stat::GlobalItemAttributeRequirements(PlusPercentage(v as f32)),
            "grenade_fuse_duration_+%" => Stat::GrenadeFuseDuration(PlusPercentage(v as f32)),
            "grenade_skill_area_of_effect_+%" => Stat::GrenadeSkillAreaOfEffect(PlusPercentage(v as f32)),
            "grenade_skill_%_chance_to_explode_twice" => Stat::GrenadeSkillChanceToExplodeTwice(Other(v as f32)),
            "grenade_skill_cooldown_count_+" => Stat::GrenadeSkillCooldownCount(Plus(v as f32)),
            "grenade_skill_cooldown_speed_+%" => Stat::GrenadeSkillCooldownSpeed(PlusPercentage(v as f32)),
            "grenade_skill_damage_+%" => Stat::GrenadeSkillDamage(PlusPercentage(v as f32)),
            "grenade_skill_number_of_additional_projectiles" => Stat::GrenadeSkillNumberOfAdditionalProjectiles(Other(v as f32)),
            "guard_flask_effect_+%" => Stat::GuardFlaskEffect(PlusPercentage(v as f32)),
            "heavy_stun_poise_decay_rate_+%" => Stat::HeavyStunPoiseDecayRate(PlusPercentage(v as f32)),
            "heavy_stuns_have_culling_strike" => Stat::HeavyStunsHaveCullingStrike(Other(v as f32)),
            "hellhound_takes_%_damage_before_you" => Stat::HellhoundTakesDamageBeforeYou(Other(v as f32)),
            "herald_skills_mana_reservation_+%" => Stat::HeraldSkillsManaReservation(PlusPercentage(v as f32)),
            "hinder_duration_+%" => Stat::HinderDuration(PlusPercentage(v as f32)),
            "hit_damage_electrocute_multiplier_+%" => Stat::HitDamageElectrocuteMultiplier(PlusPercentage(v as f32)),
            "hit_damage_electrocute_multiplier_+%_vs_shocked_enemies" => Stat::HitDamageElectrocuteMultiplierVsShockedEnemies(Other(v as f32)),
            "hit_damage_freeze_multiplier_+%" => Stat::HitDamageFreezeMultiplier(PlusPercentage(v as f32)),
            "hit_damage_pin_multiplier_+%" => Stat::HitDamagePinMultiplier(PlusPercentage(v as f32)),
            "hit_damage_stun_multiplier_+%" => Stat::HitDamageStunMultiplier(PlusPercentage(v as f32)),
            "hit_damage_stun_multiplier_+%_vs_enemies_at_close_range" => Stat::HitDamageStunMultiplierVsEnemiesAtCloseRange(Other(v as f32)),
            "hit_damage_stun_multiplier_+%_vs_enemies_on_low_life" => Stat::HitDamageStunMultiplierVsEnemiesOnLowLife(Other(v as f32)),
            "hit_damage_stun_multiplier_+%_with_crits" => Stat::HitDamageStunMultiplierWithCrits(Other(v as f32)),
            "hit_damage_+%_vs_chilled_enemies" => Stat::HitDamageVsChilledEnemies(Other(v as f32)),
            "hit_damage_+%_vs_enemies_affected_by_ailments" => Stat::HitDamageVsEnemiesAffectedByAilments(Other(v as f32)),
            "hit_damage_+%_vs_ignited_enemies" => Stat::HitDamageVsIgnitedEnemies(Other(v as f32)),
            "hit_for_%_max_life_es_on_max_infernal_flame" => Stat::HitForMaxLifeEsOnMaxInfernalFlame(Other(v as f32)),
            "hits_ignore_elemental_resistances_vs_frozen_enemies" => Stat::HitsIgnoreElementalResistancesVsFrozenEnemies(Other(v as f32)),
            "ice_crystal_maximum_life_+%" => Stat::IceCrystalMaximumLife(PlusPercentage(v as f32)),
            "ignite_chance_+%" => Stat::IgniteChance(PlusPercentage(v as f32)),
            "ignite_duration_+%" => Stat::IgniteDuration(PlusPercentage(v as f32)),
            "ignite_effect_on_self_+%" => Stat::IgniteEffectOnSelf(PlusPercentage(v as f32)),
            "ignite_shock_chill_duration_+%" => Stat::IgniteShockChillDuration(PlusPercentage(v as f32)),
            "ignites_apply_fire_resistance_+" => Stat::IgnitesApplyFireResistance(Plus(v as f32)),
            "infernal_flame_instead_of_mana" => Stat::InfernalFlameInsteadOfMana(Other(v as f32)),
            "infernalist_burn_life_and_es_%_per_second_if_crit_recently" => Stat::InfernalistBurnLifeAndEsPerSecondIfCritRecently(Other(v as f32)),
            "infernalist_critical_strike_multiplier_+%_final" => Stat::InfernalistCriticalStrikeMultiplierFinal(Other(v as f32)),
            "inflict_fire_exposure_on_hits_that_heavy_stun" => Stat::InflictFireExposureOnHitsThatHeavyStun(Other(v as f32)),
            "inflict_withered_for_x_seconds_on_unwithered_enemies_when_they_enter_your_presence" => Stat::InflictWitheredForXSecondsOnUnwitheredEnemiesWhenTheyEnterYourPresence(Other(v as f32)),
            "intelligence_+%" => Stat::Intelligence(PlusPercentage(v as f32)),
            "jagged_ground_duration_+%" => Stat::JaggedGroundDuration(PlusPercentage(v as f32)),
            "jagged_ground_effect_+%" => Stat::JaggedGroundEffect(PlusPercentage(v as f32)),
            "jagged_ground_enemy_damage_taken_+%" => Stat::JaggedGroundEnemyDamageTaken(PlusPercentage(v as f32)),
            "keystone_acrobatics" => Stat::KeystoneAcrobatics(Other(v as f32)),
            "keystone_ancestral_bond" => Stat::KeystoneAncestralBond(Other(v as f32)),
            "keystone_avatar_of_fire" => Stat::KeystoneAvatarOfFire(Other(v as f32)),
            "keystone_blood_magic" => Stat::KeystoneBloodMagic(Other(v as f32)),
            "keystone_bulwark" => Stat::KeystoneBulwark(Other(v as f32)),
            "keystone_chaos_inoculation" => Stat::KeystoneChaosInoculation(Other(v as f32)),
            "keystone_charge_cycle" => Stat::KeystoneChargeCycle(Other(v as f32)),
            "keystone_conduit" => Stat::KeystoneConduit(Other(v as f32)),
            "keystone_dance_with_death" => Stat::KeystoneDanceWithDeath(Other(v as f32)),
            "keystone_eldritch_battery" => Stat::KeystoneEldritchBattery(Other(v as f32)),
            "keystone_elemental_equilibrium" => Stat::KeystoneElementalEquilibrium(Other(v as f32)),
            "keystone_eternal_youth" => Stat::KeystoneEternalYouth(Other(v as f32)),
            "keystone_giants_blood" => Stat::KeystoneGiantsBlood(Other(v as f32)),
            "keystone_glancing_blows" => Stat::KeystoneGlancingBlows(Other(v as f32)),
            "keystone_heartstopper" => Stat::KeystoneHeartstopper(Other(v as f32)),
            "keystone_hex_master" => Stat::KeystoneHexMaster(Other(v as f32)),
            "keystone_iron_reflexes" => Stat::KeystoneIronReflexes(Other(v as f32)),
            "keystone_mana_shield" => Stat::KeystoneManaShield(Other(v as f32)),
            "keystone_oasis" => Stat::KeystoneOasis(Other(v as f32)),
            "keystone_pain_attunement" => Stat::KeystonePainAttunement(Other(v as f32)),
            "keystone_unwavering_stance" => Stat::KeystoneUnwaveringStance(Other(v as f32)),
            "keystone_vaal_pact" => Stat::KeystoneVaalPact(Other(v as f32)),
            "keystone_zealots_oath" => Stat::KeystoneZealotsOath(Other(v as f32)),
            "knockback_chance_%_at_close_range" => Stat::KnockbackChanceAtCloseRange(Other(v as f32)),
            "knockback_distance_+%" => Stat::KnockbackDistance(PlusPercentage(v as f32)),
            "knockback_on_crit_with_quarterstaff" => Stat::KnockbackOnCritWithQuarterstaff(Other(v as f32)),
            "leech_%_is_instant" => Stat::LeechIsInstant(Other(v as f32)),
            "life_flask_charges_gained_+%" => Stat::LifeFlaskChargesGained(PlusPercentage(v as f32)),
            "life_flask_effects_are_not_removed_at_full_life" => Stat::LifeFlaskEffectsAreNotRemovedAtFullLife(Other(v as f32)),
            "life_gained_on_block" => Stat::LifeGainedOnBlock(Other(v as f32)),
            "life_recovery_+%_from_flasks_while_on_low_life" => Stat::LifeRecoveryFromFlasksWhileOnLowLife(Other(v as f32)),
            "life_recovery_rate_+%" => Stat::LifeRecoveryRate(PlusPercentage(v as f32)),
            "life_regenerate_rate_per_second_%_while_totem_active" => Stat::LifeRegenerateRatePerSecondWhileTotemActive(Other(v as f32)),
            "life_regeneration_rate_+%" => Stat::LifeRegenerationRate(PlusPercentage(v as f32)),
            "life_regeneration_rate_per_minute_%" => Stat::LifeRegenerationRatePerMinute(Other(v as f32)),
            "life_regeneration_rate_per_minute_%_if_have_been_hit_recently" => Stat::LifeRegenerationRatePerMinuteIfHaveBeenHitRecently(Other(v as f32)),
            "life_regeneration_rate_per_minute_%_when_on_low_life" => Stat::LifeRegenerationRatePerMinuteWhenOnLowLife(Other(v as f32)),
            "life_regeneration_rate_per_minute_%_while_affected_by_damaging_ailment" => Stat::LifeRegenerationRatePerMinuteWhileAffectedByDamagingAilment(Other(v as f32)),
            "life_regeneration_rate_per_minute_%_while_stationary" => Stat::LifeRegenerationRatePerMinuteWhileStationary(Other(v as f32)),
            "life_regeneration_rate_per_minute_%_while_surrounded" => Stat::LifeRegenerationRatePerMinuteWhileSurrounded(Other(v as f32)),
            "life_regeneration_rate_+%_while_moving" => Stat::LifeRegenerationRateWhileMoving(Other(v as f32)),
            "life_regeneration_rate_+%_while_on_low_life" => Stat::LifeRegenerationRateWhileOnLowLife(Other(v as f32)),
            "life_regeneration_rate_+%_while_stationary" => Stat::LifeRegenerationRateWhileStationary(Other(v as f32)),
            "life_regeneration_rate_+%_while_using_life_flask" => Stat::LifeRegenerationRateWhileUsingLifeFlask(Other(v as f32)),
            "life_remnants_gain_per_globe" => Stat::LifeRemnantsGainPerGlobe(Other(v as f32)),
            "life_reserved_by_stat_%" => Stat::LifeReservedByStat(Other(v as f32)),
            "light_radius_+%" => Stat::LightRadius(PlusPercentage(v as f32)),
            "lightning_damage_+%" => Stat::LightningDamage(PlusPercentage(v as f32)),
            "lightning_damage_+%_while_affected_by_herald_of_thunder" => Stat::LightningDamageWhileAffectedByHeraldOfThunder(Other(v as f32)),
            "lightning_exposure_effect_+%" => Stat::LightningExposureEffect(PlusPercentage(v as f32)),
            "lightning_hit_and_dot_damage_%_taken_as_fire" => Stat::LightningHitAndDotDamageTakenAsFire(Other(v as f32)),
            "lightning_penetration_%_while_on_low_mana" => Stat::LightningPenetrationWhileOnLowMana(Other(v as f32)),
            "lightning_skill_additional_chain_chance_%" => Stat::LightningSkillAdditionalChainChance(Other(v as f32)),
            "link_skill_buff_effect_+%" => Stat::LinkSkillBuffEffect(PlusPercentage(v as f32)),
            "link_skill_cast_speed_+%" => Stat::LinkSkillCastSpeed(PlusPercentage(v as f32)),
            "link_skill_duration_+%" => Stat::LinkSkillDuration(PlusPercentage(v as f32)),
            "link_skills_can_target_minions" => Stat::LinkSkillsCanTargetMinions(Other(v as f32)),
            "link_to_X_additional_random_allies" => Stat::LinkToXAdditionalRandomAllies(Other(v as f32)),
            "lose_all_tailwind_when_hit" => Stat::LoseAllTailwindWhenHit(Other(v as f32)),
            "lose_%_of_infernal_flame_on_reaching_max" => Stat::LoseOfInfernalFlameOnReachingMax(Other(v as f32)),
            "lose_%_of_life_and_energy_shield_when_you_use_a_chaos_skill" => Stat::LoseOfLifeAndEnergyShieldWhenYouUseAChaosSkill(Other(v as f32)),
            "lose_%_of_max_infernal_flame_per_minute" => Stat::LoseOfMaxInfernalFlamePerMinute(Other(v as f32)),
            "mace_damage_+%" => Stat::MaceDamage(PlusPercentage(v as f32)),
            "mace_hit_damage_stun_multiplier_+%" => Stat::MaceHitDamageStunMultiplier(PlusPercentage(v as f32)),
            "mace_slam_aftershock_chance_%" => Stat::MaceSlamAftershockChance(Other(v as f32)),
            "mace_strike_aftershock_chance_%" => Stat::MaceStrikeAftershockChance(Other(v as f32)),
            "maim_on_hit_%" => Stat::MaimOnHit(Other(v as f32)),
            "maim_on_hit_%_vs_poisoned_enemies" => Stat::MaimOnHitVsPoisonedEnemies(Other(v as f32)),
            "mana_cost_+%_while_not_low_mana" => Stat::ManaCostWhileNotLowMana(Other(v as f32)),
            "mana_flask_charges_gained_+%" => Stat::ManaFlaskChargesGained(PlusPercentage(v as f32)),
            "mana_gained_on_block" => Stat::ManaGainedOnBlock(Other(v as f32)),
            "mana_leech_applies_recovery_to_energy_shield_also" => Stat::ManaLeechAppliesRecoveryToEnergyShieldAlso(Other(v as f32)),
            "mana_recovery_rate_+%" => Stat::ManaRecoveryRate(PlusPercentage(v as f32)),
            "mana_recovery_rate_+%_while_affected_by_a_mana_flask" => Stat::ManaRecoveryRateWhileAffectedByAManaFlask(Other(v as f32)),
            "mana_regeneration_rate_+%" => Stat::ManaRegenerationRate(PlusPercentage(v as f32)),
            "mana_regeneration_rate_+%_if_enemy_shocked_recently" => Stat::ManaRegenerationRateIfEnemyShockedRecently(Other(v as f32)),
            "mana_regeneration_rate_+%_while_moving" => Stat::ManaRegenerationRateWhileMoving(Other(v as f32)),
            "mana_regeneration_rate_+%_while_not_on_low_mana" => Stat::ManaRegenerationRateWhileNotOnLowMana(Other(v as f32)),
            "mana_regeneration_rate_+%_while_stationary" => Stat::ManaRegenerationRateWhileStationary(Other(v as f32)),
            "map_affliction_encounter_boss_chance_+%" => Stat::MapAfflictionEncounterBossChance(PlusPercentage(v as f32)),
            "map_affliction_reward_progress_on_kill_+%" => Stat::MapAfflictionRewardProgressOnKill(PlusPercentage(v as f32)),
            "map_affliction_secondary_wave_acceleration_+%" => Stat::MapAfflictionSecondaryWaveAcceleration(PlusPercentage(v as f32)),
            "map_basic_currency_drop_chance_+%_in_swamp_and_water_biome" => Stat::MapBasicCurrencyDropChanceInSwampAndWaterBiome(Other(v as f32)),
            "map_boss_area_chance_to_be_corrupted_%" => Stat::MapBossAreaChanceToBeCorrupted(Other(v as f32)),
            "map_boss_damage_+%" => Stat::MapBossDamage(PlusPercentage(v as f32)),
            "map_boss_dropped_item_quantity_+%" => Stat::MapBossDroppedItemQuantity(PlusPercentage(v as f32)),
            "map_boss_experience_+%_final" => Stat::MapBossExperienceFinal(Other(v as f32)),
            "map_boss_item_rarity_+%" => Stat::MapBossItemRarity(PlusPercentage(v as f32)),
            "map_boss_maximum_life_+%" => Stat::MapBossMaximumLife(PlusPercentage(v as f32)),
            "map_bossing_difficulty_+" => Stat::MapBossingDifficulty(Plus(v as f32)),
            "map_breach_chance_to_be_guarded_by_magic_pack_%" => Stat::MapBreachChanceToBeGuardedByMagicPack(Other(v as f32)),
            "map_breach_chests_drop_double_splinters_chance_%" => Stat::MapBreachChestsDropDoubleSplintersChance(Other(v as f32)),
            "map_breach_chests_+%_final" => Stat::MapBreachChestsFinal(Other(v as f32)),
            "map_breach_domain_difficulty_+" => Stat::MapBreachDomainDifficulty(Plus(v as f32)),
            "map_breach_hands_inflict_waking_nightmare" => Stat::MapBreachHandsInflictWakingNightmare(Other(v as f32)),
            "map_breach_monster_quantity_+%" => Stat::MapBreachMonsterQuantity(PlusPercentage(v as f32)),
            "map_breach_monster_splinter_quantity_+%" => Stat::MapBreachMonsterSplinterQuantity(PlusPercentage(v as f32)),
            "map_breach_rares_catalyst_full_stack_chance_%" => Stat::MapBreachRaresCatalystFullStackChance(Other(v as f32)),
            "map_breach_rares_have_soul_eater" => Stat::MapBreachRaresHaveSoulEater(Other(v as f32)),
            "map_breach_time_passed_+%" => Stat::MapBreachTimePassed(PlusPercentage(v as f32)),
            "map_delirium_additional_reward_type_chance_%" => Stat::MapDeliriumAdditionalRewardTypeChance(Other(v as f32)),
            "map_delirium_boss_life_+%" => Stat::MapDeliriumBossLife(PlusPercentage(v as f32)),
            "map_delirium_boss_splinter_amount_+%" => Stat::MapDeliriumBossSplinterAmount(PlusPercentage(v as f32)),
            "map_delirium_daemon_damage_+%" => Stat::MapDeliriumDaemonDamage(PlusPercentage(v as f32)),
            "map_delirium_difficulty_scaling_from_mirror_is_double" => Stat::MapDeliriumDifficultyScalingFromMirrorIsDouble(Other(v as f32)),
            "map_delirium_doodads_+%_final" => Stat::MapDeliriumDoodadsFinal(Other(v as f32)),
            "map_dropped_maps_rarity_+%" => Stat::MapDroppedMapsRarity(PlusPercentage(v as f32)),
            "map_duplicate_x_rare_monsters" => Stat::MapDuplicateXRareMonsters(Other(v as f32)),
            "map_expedition_artifact_quantity_+%" => Stat::MapExpeditionArtifactQuantity(PlusPercentage(v as f32)),
            "map_expedition_chest_marker_count_+" => Stat::MapExpeditionChestMarkerCount(Plus(v as f32)),
            "map_expedition_chests_despawn_after_X_seconds" => Stat::MapExpeditionChestsDespawnAfterXSeconds(Other(v as f32)),
            "map_expedition_elite_marker_count_+%" => Stat::MapExpeditionEliteMarkerCount(PlusPercentage(v as f32)),
            "map_expedition_fuse_burn_time_+%" => Stat::MapExpeditionFuseBurnTime(PlusPercentage(v as f32)),
            "map_expedition_rare_monsters_+%" => Stat::MapExpeditionRareMonsters(PlusPercentage(v as f32)),
            "map_expedition_relic_mod_effect_+%" => Stat::MapExpeditionRelicModEffect(PlusPercentage(v as f32)),
            "map_expedition_vendor_reroll_currency_quantity_+%" => Stat::MapExpeditionVendorRerollCurrencyQuantity(PlusPercentage(v as f32)),
            "map_expedition_x_extra_relic_prefixes" => Stat::MapExpeditionXExtraRelicPrefixes(Other(v as f32)),
            "map_expedition_x_extra_relic_suffixes" => Stat::MapExpeditionXExtraRelicSuffixes(Other(v as f32)),
            "map_final_boss_map_key_of_at_least_same_tier_as_current_map_drop_chance_%" => Stat::MapFinalBossMapKeyOfAtLeastSameTierAsCurrentMapDropChance(Other(v as f32)),
            "map_gold_drop_chance_+%_in_mountain_biome" => Stat::MapGoldDropChanceInMountainBiome(Other(v as f32)),
            "map_item_drop_quantity_+%" => Stat::MapItemDropQuantity(PlusPercentage(v as f32)),
            "map_item_drop_rarity_+%" => Stat::MapItemDropRarity(PlusPercentage(v as f32)),
            "map_jewel_drop_chance_+%_in_forest_biome" => Stat::MapJewelDropChanceInForestBiome(Other(v as f32)),
            "map_killing_rare_monsters_pauses_delirium_mirror_timer_for_x_seconds" => Stat::MapKillingRareMonstersPausesDeliriumMirrorTimerForXSeconds(Other(v as f32)),
            "map_logbook_difficulty_+" => Stat::MapLogbookDifficulty(Plus(v as f32)),
            "map_magic_chest_amount_+%" => Stat::MapMagicChestAmount(PlusPercentage(v as f32)),
            "map_magic_pack_size_+%" => Stat::MapMagicPackSize(PlusPercentage(v as f32)),
            "map_map_item_drop_chance_+%" => Stat::MapMapItemDropChance(PlusPercentage(v as f32)),
            "map_maps_drop_with_distilled_emotions_applied_chance_%" => Stat::MapMapsDropWithDistilledEmotionsAppliedChance(Other(v as f32)),
            "map_mod_effect_+%" => Stat::MapModEffect(PlusPercentage(v as f32)),
            "map_mod_effect_+%_per_mod" => Stat::MapModEffectPerMod(Other(v as f32)),
            "map_mod_effect_+%_per_tower_affecting_area" => Stat::MapModEffectPerTowerAffectingArea(Other(v as f32)),
            "map_monolith_chance_%" => Stat::MapMonolithChance(Other(v as f32)),
            "map_monster_tre_+%" => Stat::MapMonsterTre(PlusPercentage(v as f32)),
            "map_non_unique_delirium_monsters_splinter_amount_+%" => Stat::MapNonUniqueDeliriumMonstersSplinterAmount(PlusPercentage(v as f32)),
            "map_number_of_magic_packs_+%" => Stat::MapNumberOfMagicPacks(PlusPercentage(v as f32)),
            "map_number_of_rare_packs_+%" => Stat::MapNumberOfRarePacks(PlusPercentage(v as f32)),
            "map_pack_size_+%" => Stat::MapPackSize(PlusPercentage(v as f32)),
            "map_pinnacle_boss_additional_unique_drop_chance_%" => Stat::MapPinnacleBossAdditionalUniqueDropChance(Other(v as f32)),
            "map_pinnacle_boss_difficulty_+" => Stat::MapPinnacleBossDifficulty(Plus(v as f32)),
            "map_pinnacle_boss_drops_X_corrupted_rare_tablets" => Stat::MapPinnacleBossDropsXCorruptedRareTablets(Other(v as f32)),
            "map_pinnacle_boss_drops_X_waystones" => Stat::MapPinnacleBossDropsXWaystones(Other(v as f32)),
            "map_pinnacle_boss_item_dropped_rarity_+%_final" => Stat::MapPinnacleBossItemDroppedRarityFinal(Other(v as f32)),
            "map_pinnacle_boss_rare_socket_currency_chance_%" => Stat::MapPinnacleBossRareSocketCurrencyChance(Other(v as f32)),
            "map_pinnacle_boss_special_gem_drop_chance_%" => Stat::MapPinnacleBossSpecialGemDropChance(Other(v as f32)),
            "map_player_damage_taken_+%_vs_breach_monsters" => Stat::MapPlayerDamageTakenVsBreachMonsters(Other(v as f32)),
            "map_player_shrine_buff_effect_on_self_+%" => Stat::MapPlayerShrineBuffEffectOnSelf(PlusPercentage(v as f32)),
            "map_player_shrine_effect_duration_+%" => Stat::MapPlayerShrineEffectDuration(PlusPercentage(v as f32)),
            "map_rare_chest_amount_+%" => Stat::MapRareChestAmount(PlusPercentage(v as f32)),
            "map_ritual_additional_daemon" => Stat::MapRitualAdditionalDaemon(Other(v as f32)),
            "map_ritual_additional_reward_rerolls" => Stat::MapRitualAdditionalRewardRerolls(Other(v as f32)),
            "map_ritual_additional_wildwood_packs" => Stat::MapRitualAdditionalWildwoodPacks(Other(v as f32)),
            "map_ritual_contains_wildwood_wisp" => Stat::MapRitualContainsWildwoodWisp(Other(v as f32)),
            "map_ritual_daemon_damage_+%" => Stat::MapRitualDaemonDamage(PlusPercentage(v as f32)),
            "map_ritual_defer_reward_tribute_cost_+%" => Stat::MapRitualDeferRewardTributeCost(PlusPercentage(v as f32)),
            "map_ritual_deferred_rewards_are_offered_again_+%_sooner" => Stat::MapRitualDeferredRewardsAreOfferedAgainSooner(Other(v as f32)),
            "map_ritual_encounter_count_is_four" => Stat::MapRitualEncounterCountIsFour(Other(v as f32)),
            "map_ritual_magic_monsters_+%" => Stat::MapRitualMagicMonsters(PlusPercentage(v as f32)),
            "map_ritual_monster_damage_+%_for_each_time_revived" => Stat::MapRitualMonsterDamageForEachTimeRevived(Other(v as f32)),
            "map_ritual_monster_spawning_speed_+%" => Stat::MapRitualMonsterSpawningSpeed(PlusPercentage(v as f32)),
            "map_ritual_monster_tankiness_+%_for_each_time_revived" => Stat::MapRitualMonsterTankinessForEachTimeRevived(Other(v as f32)),
            "map_ritual_no_revive_penalty" => Stat::MapRitualNoRevivePenalty(Other(v as f32)),
            "map_ritual_omen_chance_+%" => Stat::MapRitualOmenChance(PlusPercentage(v as f32)),
            "map_ritual_rare_monsters_+%" => Stat::MapRitualRareMonsters(PlusPercentage(v as f32)),
            "map_ritual_rewards_reroll_cost_+%_final" => Stat::MapRitualRewardsRerollCostFinal(Other(v as f32)),
            "map_ritual_voodoo_king_key_chance_+%" => Stat::MapRitualVoodooKingKeyChance(PlusPercentage(v as f32)),
            "map_sanctum_and_ultimatum_key_drop_chance_+%_in_desert_biome" => Stat::MapSanctumAndUltimatumKeyDropChanceInDesertBiome(Other(v as f32)),
            "map_shrine_chance_%" => Stat::MapShrineChance(Other(v as f32)),
            "map_simulacrum_difficulty_+" => Stat::MapSimulacrumDifficulty(Plus(v as f32)),
            "map_socket_currency_drop_chance_+%_in_grass_biome" => Stat::MapSocketCurrencyDropChanceInGrassBiome(Other(v as f32)),
            "map_strongbox_chance_%" => Stat::MapStrongboxChance(Other(v as f32)),
            "map_strongbox_mod_effect_+%" => Stat::MapStrongboxModEffect(PlusPercentage(v as f32)),
            "map_tier_bonus_permillage" => Stat::MapTierBonusPermillage(Other(v as f32)),
            "map_tower_augment_quantity_+%" => Stat::MapTowerAugmentQuantity(PlusPercentage(v as f32)),
            "map_voodoo_king_difficulty_+" => Stat::MapVoodooKingDifficulty(Plus(v as f32)),
            "maps_boss_drop_additional_bonus_map_chance_%" => Stat::MapsBossDropAdditionalBonusMapChance(Other(v as f32)),
            "maps_with_bosses_additional_essence_+" => Stat::MapsWithBossesAdditionalEssence(Plus(v as f32)),
            "maps_with_bosses_additional_shrine_+" => Stat::MapsWithBossesAdditionalShrine(Plus(v as f32)),
            "maps_with_bosses_additional_strongbox_+" => Stat::MapsWithBossesAdditionalStrongbox(Plus(v as f32)),
            "maps_with_bosses_are_irradiated" => Stat::MapsWithBossesAreIrradiated(Other(v as f32)),
            "mark_effect_+%" => Stat::MarkEffect(PlusPercentage(v as f32)),
            "mark_skill_cast_speed_+%" => Stat::MarkSkillCastSpeed(PlusPercentage(v as f32)),
            "mark_skill_duration_+%" => Stat::MarkSkillDuration(PlusPercentage(v as f32)),
            "mark_skill_mana_cost_+%" => Stat::MarkSkillManaCost(PlusPercentage(v as f32)),
            "marked_enemies_cannot_deal_critical_strikes" => Stat::MarkedEnemiesCannotDealCriticalStrikes(Other(v as f32)),
            "marked_enemy_accuracy_rating_+%" => Stat::MarkedEnemyAccuracyRating(PlusPercentage(v as f32)),
            "marked_enemy_damage_taken_+%" => Stat::MarkedEnemyDamageTaken(PlusPercentage(v as f32)),
            "master_of_elements_evasion_rating_+%_final" => Stat::MasterOfElementsEvasionRatingFinal(Other(v as f32)),
            "mastery_chance_to_evade_melee_attacks_+%_final" => Stat::MasteryChanceToEvadeMeleeAttacksFinal(Other(v as f32)),
            "max_demon_form_stacks" => Stat::MaxDemonFormStacks(Other(v as f32)),
            "max_endurance_charges" => Stat::MaxEnduranceCharges(Other(v as f32)),
            "max_frenzy_charges" => Stat::MaxFrenzyCharges(Other(v as f32)),
            "max_jade_stacks" => Stat::MaxJadeStacks(Other(v as f32)),
            "max_power_charges" => Stat::MaxPowerCharges(Other(v as f32)),
            "maximum_darkness_+%" => Stat::MaximumDarkness(PlusPercentage(v as f32)),
            "maximum_energy_shield_+%" => Stat::MaximumEnergyShield(PlusPercentage(v as f32)),
            "maximum_energy_shield_from_body_armour_+%" => Stat::MaximumEnergyShieldFromBodyArmour(PlusPercentage(v as f32)),
            "maximum_life_+%" => Stat::MaximumLife(PlusPercentage(v as f32)),
            "%_maximum_life_as_focus" => Stat::MaximumLifeAsFocus(Other(v as f32)),
            "maximum_life_mana_and_energy_shield_+%" => Stat::MaximumLifeManaAndEnergyShield(PlusPercentage(v as f32)),
            "maximum_life_%_to_gain_as_maximum_energy_shield" => Stat::MaximumLifeToGainAsMaximumEnergyShield(Other(v as f32)),
            "maximum_mana_+%" => Stat::MaximumMana(PlusPercentage(v as f32)),
            "maximum_mana_%_gained_on_kill" => Stat::MaximumManaGainedOnKill(Other(v as f32)),
            "maximum_rage" => Stat::MaximumRage(Other(v as f32)),
            "maximum_rage_+_while_wielding_axe" => Stat::MaximumRageWhileWieldingAxe(Other(v as f32)),
            "melee_attack_speed_+%" => Stat::MeleeAttackSpeed(PlusPercentage(v as f32)),
            "melee_critical_strike_chance_+%" => Stat::MeleeCriticalStrikeChance(PlusPercentage(v as f32)),
            "melee_critical_strike_chance_+%_when_on_full_life" => Stat::MeleeCriticalStrikeChanceWhenOnFullLife(Other(v as f32)),
            "melee_damage_+%" => Stat::MeleeDamage(PlusPercentage(v as f32)),
            "melee_damage_+%_at_close_range" => Stat::MeleeDamageAtCloseRange(Other(v as f32)),
            "melee_damage_+%_vs_heavy_stunned_enemies" => Stat::MeleeDamageVsHeavyStunnedEnemies(Other(v as f32)),
            "melee_damage_+%_vs_immobilised_enemies" => Stat::MeleeDamageVsImmobilisedEnemies(Other(v as f32)),
            "melee_damage_+%_when_on_full_life" => Stat::MeleeDamageWhenOnFullLife(Other(v as f32)),
            "melee_hit_damage_stun_multiplier_+%" => Stat::MeleeHitDamageStunMultiplier(PlusPercentage(v as f32)),
            "melee_range_+" => Stat::MeleeRange(Plus(v as f32)),
            "minion_accuracy_rating" => Stat::MinionAccuracyRating(Other(v as f32)),
            "minion_additional_physical_damage_reduction_%" => Stat::MinionAdditionalPhysicalDamageReduction(Other(v as f32)),
            "minion_attack_and_cast_speed_+%" => Stat::MinionAttackAndCastSpeed(PlusPercentage(v as f32)),
            "minion_chaos_resistance_%" => Stat::MinionChaosResistance(Other(v as f32)),
            "minion_cold_damage_resistance_%" => Stat::MinionColdDamageResistance(Other(v as f32)),
            "minion_cooldown_recovery_+%" => Stat::MinionCooldownRecovery(PlusPercentage(v as f32)),
            "minion_critical_strike_chance_+%" => Stat::MinionCriticalStrikeChance(PlusPercentage(v as f32)),
            "minion_critical_strike_multiplier_+" => Stat::MinionCriticalStrikeMultiplier(Plus(v as f32)),
            "minion_damage_+%" => Stat::MinionDamage(PlusPercentage(v as f32)),
            "minion_damage_taken_%_recouped_as_their_life" => Stat::MinionDamageTakenRecoupedAsTheirLife(Other(v as f32)),
            "minion_damage_+%_while_you_have_at_least_two_different_active_offerings" => Stat::MinionDamageWhileYouHaveAtLeastTwoDifferentActiveOfferings(Other(v as f32)),
            "minion_elemental_resistance_%" => Stat::MinionElementalResistance(Other(v as f32)),
            "minion_evasion_rating_+%" => Stat::MinionEvasionRating(PlusPercentage(v as f32)),
            "minion_fire_damage_resistance_%" => Stat::MinionFireDamageResistance(Other(v as f32)),
            "minion_life_recovery_rate_+%" => Stat::MinionLifeRecoveryRate(PlusPercentage(v as f32)),
            "minion_life_regeneration_rate_per_minute_%" => Stat::MinionLifeRegenerationRatePerMinute(Other(v as f32)),
            "minion_lightning_damage_resistance_%" => Stat::MinionLightningDamageResistance(Other(v as f32)),
            "minion_maximum_all_elemental_resistances_%" => Stat::MinionMaximumAllElementalResistances(Other(v as f32)),
            "minion_maximum_life_+%" => Stat::MinionMaximumLife(PlusPercentage(v as f32)),
            "minion_maximum_life_%_to_gain_as_maximum_energy_shield" => Stat::MinionMaximumLifeToGainAsMaximumEnergyShield(Other(v as f32)),
            "minion_movement_speed_+%" => Stat::MinionMovementSpeed(PlusPercentage(v as f32)),
            "minion_reservation_+%" => Stat::MinionReservation(PlusPercentage(v as f32)),
            "minion_resummon_speed_+%" => Stat::MinionResummonSpeed(PlusPercentage(v as f32)),
            "minion_skill_area_of_effect_+%" => Stat::MinionSkillAreaOfEffect(PlusPercentage(v as f32)),
            "minions_deal_%_of_physical_damage_as_additional_chaos_damage" => Stat::MinionsDealOfPhysicalDamageAsAdditionalChaosDamage(Other(v as f32)),
            "minions_gain_your_dexterity" => Stat::MinionsGainYourDexterity(Other(v as f32)),
            "minions_get_amulet_stats_instead_of_you" => Stat::MinionsGetAmuletStatsInsteadOfYou(Other(v as f32)),
            "minions_have_%_chance_to_inflict_wither_on_hit" => Stat::MinionsHaveChanceToInflictWitherOnHit(Other(v as f32)),
            "movement_speed_+%_during_flask_effect" => Stat::MovementSpeedDuringFlaskEffect(Other(v as f32)),
            "movement_speed_+%_if_cast_a_mark_spell_recently" => Stat::MovementSpeedIfCastAMarkSpellRecently(Other(v as f32)),
            "movement_speed_+%_if_enemy_killed_recently" => Stat::MovementSpeedIfEnemyKilledRecently(Other(v as f32)),
            "movement_speed_+%_if_pinned_enemy_recently" => Stat::MovementSpeedIfPinnedEnemyRecently(Other(v as f32)),
            "movement_speed_+%_while_dual_wielding" => Stat::MovementSpeedWhileDualWielding(Other(v as f32)),
            "movement_speed_+%_while_using_charm" => Stat::MovementSpeedWhileUsingCharm(Other(v as f32)),
            "movement_speed_+%_while_you_have_energy_shield" => Stat::MovementSpeedWhileYouHaveEnergyShield(Other(v as f32)),
            "non_damaging_ailment_effect_+%" => Stat::NonDamagingAilmentEffect(PlusPercentage(v as f32)),
            "non_damaging_ailment_effect_+%_with_critical_strikes" => Stat::NonDamagingAilmentEffectWithCriticalStrikes(Other(v as f32)),
            "non_skill_base_all_damage_%_to_gain_as_chaos" => Stat::NonSkillBaseAllDamageToGainAsChaos(Other(v as f32)),
            "non_skill_base_all_damage_%_to_gain_as_cold" => Stat::NonSkillBaseAllDamageToGainAsCold(Other(v as f32)),
            "non_skill_base_all_damage_%_to_gain_as_fire" => Stat::NonSkillBaseAllDamageToGainAsFire(Other(v as f32)),
            "non_skill_base_all_damage_%_to_gain_as_lightning" => Stat::NonSkillBaseAllDamageToGainAsLightning(Other(v as f32)),
            "non_skill_base_all_damage_%_to_gain_as_physical" => Stat::NonSkillBaseAllDamageToGainAsPhysical(Other(v as f32)),
            "non_skill_base_lightning_damage_%_to_gain_as_cold" => Stat::NonSkillBaseLightningDamageToGainAsCold(Other(v as f32)),
            "non_skill_base_physical_damage_%_to_gain_as_chaos" => Stat::NonSkillBasePhysicalDamageToGainAsChaos(Other(v as f32)),
            "non_skill_base_physical_damage_%_to_gain_as_fire" => Stat::NonSkillBasePhysicalDamageToGainAsFire(Other(v as f32)),
            "non_skill_cold_damage_%_to_gain_as_fire_vs_frozen_enemies" => Stat::NonSkillColdDamageToGainAsFireVsFrozenEnemies(Other(v as f32)),
            "notable_knockback_distance_+%_final_for_blocked_hits" => Stat::NotableKnockbackDistanceFinalForBlockedHits(Other(v as f32)),
            "num_additional_skill_slots" => Stat::NumAdditionalSkillSlots(Other(v as f32)),
            "num_charm_slots" => Stat::NumCharmSlots(Other(v as f32)),
            "number_of_additional_marks_allowed" => Stat::NumberOfAdditionalMarksAllowed(Other(v as f32)),
            "number_of_additional_poison_stacks" => Stat::NumberOfAdditionalPoisonStacks(Other(v as f32)),
            "number_of_additional_projectiles" => Stat::NumberOfAdditionalProjectiles(Other(v as f32)),
            "number_of_infernal_familiars_allowed" => Stat::NumberOfInfernalFamiliarsAllowed(Other(v as f32)),
            "offering_area_of_effect_+%" => Stat::OfferingAreaOfEffect(PlusPercentage(v as f32)),
            "offering_duration_+%" => Stat::OfferingDuration(PlusPercentage(v as f32)),
            "offering_life_+%" => Stat::OfferingLife(PlusPercentage(v as f32)),
            "one_handed_attack_ailment_chance_+%" => Stat::OneHandedAttackAilmentChance(PlusPercentage(v as f32)),
            "one_handed_attack_speed_+%" => Stat::OneHandedAttackSpeed(PlusPercentage(v as f32)),
            "one_handed_melee_accuracy_rating_+%" => Stat::OneHandedMeleeAccuracyRating(PlusPercentage(v as f32)),
            "one_handed_melee_attack_speed_+%" => Stat::OneHandedMeleeAttackSpeed(PlusPercentage(v as f32)),
            "one_handed_melee_critical_strike_chance_+%" => Stat::OneHandedMeleeCriticalStrikeChance(PlusPercentage(v as f32)),
            "one_handed_melee_critical_strike_multiplier_+" => Stat::OneHandedMeleeCriticalStrikeMultiplier(Plus(v as f32)),
            "passive_tree_mace_damage_+%_final_vs_heavy_stunned_enemies" => Stat::PassiveTreeMaceDamageFinalVsHeavyStunnedEnemies(Other(v as f32)),
            "pathfinder_ascendancy_poison_on_enemies_you_kill_spread_to_enemies_within_x" => Stat::PathfinderAscendancyPoisonOnEnemiesYouKillSpreadToEnemiesWithinX(Other(v as f32)),
            "pathfinder_poison_duration_+%_final" => Stat::PathfinderPoisonDurationFinal(Other(v as f32)),
            "physical_attack_damage_+%" => Stat::PhysicalAttackDamage(PlusPercentage(v as f32)),
            "physical_damage_+%" => Stat::PhysicalDamage(PlusPercentage(v as f32)),
            "physical_damage_from_hits_%_taken_as_random_element" => Stat::PhysicalDamageFromHitsTakenAsRandomElement(Other(v as f32)),
            "physical_damage_prevented_recouped_as_life_%" => Stat::PhysicalDamagePreventedRecoupedAsLife(Other(v as f32)),
            "physical_damage_reduction_rating_+%" => Stat::PhysicalDamageReductionRating(PlusPercentage(v as f32)),
            "physical_damage_taken_recouped_as_life_%" => Stat::PhysicalDamageTakenRecoupedAsLife(Other(v as f32)),
            "physical_hit_and_dot_damage_%_taken_as_chaos" => Stat::PhysicalHitAndDotDamageTakenAsChaos(Other(v as f32)),
            "placing_traps_cooldown_recovery_+%" => Stat::PlacingTrapsCooldownRecovery(PlusPercentage(v as f32)),
            "poison_duration_+%_per_poison_applied_recently" => Stat::PoisonDurationPerPoisonAppliedRecently(Other(v as f32)),
            "poison_effect_+%_vs_non_poisoned_enemies" => Stat::PoisonEffectVsNonPoisonedEnemies(Other(v as f32)),
            "power_charge_duration_+%" => Stat::PowerChargeDuration(PlusPercentage(v as f32)),
            "projectile_ailment_chance_+%" => Stat::ProjectileAilmentChance(PlusPercentage(v as f32)),
            "projectile_damage_+%" => Stat::ProjectileDamage(PlusPercentage(v as f32)),
            "projectile_hit_damage_stun_multiplier_+%" => Stat::ProjectileHitDamageStunMultiplier(PlusPercentage(v as f32)),
            "quarterstaff_accuracy_rating_+%" => Stat::QuarterstaffAccuracyRating(PlusPercentage(v as f32)),
            "quarterstaff_attack_speed_+%" => Stat::QuarterstaffAttackSpeed(PlusPercentage(v as f32)),
            "quarterstaff_critical_strike_chance_+%" => Stat::QuarterstaffCriticalStrikeChance(PlusPercentage(v as f32)),
            "quarterstaff_critical_strike_multiplier_+" => Stat::QuarterstaffCriticalStrikeMultiplier(Plus(v as f32)),
            "quarterstaff_damage_+%" => Stat::QuarterstaffDamage(PlusPercentage(v as f32)),
            "quarterstaff_daze_build_up_+%" => Stat::QuarterstaffDazeBuildUp(PlusPercentage(v as f32)),
            "quarterstaff_hit_damage_freeze_multiplier_+%" => Stat::QuarterstaffHitDamageFreezeMultiplier(PlusPercentage(v as f32)),
            "quarterstaff_hit_damage_stun_multiplier_+%" => Stat::QuarterstaffHitDamageStunMultiplier(PlusPercentage(v as f32)),
            "quarterstaff_skills_that_consume_power_charges_count_as_consuming_x_additional_power_charges" => Stat::QuarterstaffSkillsThatConsumePowerChargesCountAsConsumingXAdditionalPowerCharges(Other(v as f32)),
            "quiver_mod_effect_+%" => Stat::QuiverModEffect(PlusPercentage(v as f32)),
            "rage_decay_speed_+%" => Stat::RageDecaySpeed(PlusPercentage(v as f32)),
            "rage_loss_delay_ms" => Stat::RageLossDelayMs(Other(v as f32)),
            "reapply_enemy_shock_on_consuming_enemy_shock_chance_%" => Stat::ReapplyEnemyShockOnConsumingEnemyShockChance(Other(v as f32)),
            "recoup_%_elemental_damage_as_energy_shield" => Stat::RecoupElementalDamageAsEnergyShield(Other(v as f32)),
            "recoup_speed_+%" => Stat::RecoupSpeed(PlusPercentage(v as f32)),
            "recover_%_life_on_heavy_stunning_rare_or_unique_enemy" => Stat::RecoverLifeOnHeavyStunningRareOrUniqueEnemy(Other(v as f32)),
            "recover_%_life_per_endurance_charge_consumed" => Stat::RecoverLifePerEnduranceChargeConsumed(Other(v as f32)),
            "recover_%_life_when_you_create_an_offering" => Stat::RecoverLifeWhenYouCreateAnOffering(Other(v as f32)),
            "recover_%_life_when_you_use_a_life_flask_while_on_low_life" => Stat::RecoverLifeWhenYouUseALifeFlaskWhileOnLowLife(Other(v as f32)),
            "recover_%_mana_when_you_invoke_a_spell" => Stat::RecoverManaWhenYouInvokeASpell(Other(v as f32)),
            "recover_maximum_life_on_enemy_killed_chance_%" => Stat::RecoverMaximumLifeOnEnemyKilledChance(Other(v as f32)),
            "recover_%_maximum_life_on_kill" => Stat::RecoverMaximumLifeOnKill(Other(v as f32)),
            "recover_%_maximum_life_on_killing_poisoned_enemy" => Stat::RecoverMaximumLifeOnKillingPoisonedEnemy(Other(v as f32)),
            "recover_%_maximum_life_on_mana_flask_use" => Stat::RecoverMaximumLifeOnManaFlaskUse(Other(v as f32)),
            "recover_%_maximum_mana_on_charm_use" => Stat::RecoverMaximumManaOnCharmUse(Other(v as f32)),
            "recover_%_maximum_mana_on_kill" => Stat::RecoverMaximumManaOnKill(Other(v as f32)),
            "recover_X_life_on_block" => Stat::RecoverXLifeOnBlock(Other(v as f32)),
            "reduce_enemy_elemental_resistance_%" => Stat::ReduceEnemyElementalResistance(Other(v as f32)),
            "refresh_ignite_duration_on_critical_strike_chance_%" => Stat::RefreshIgniteDurationOnCriticalStrikeChance(Other(v as f32)),
            "reload_speed_+%" => Stat::ReloadSpeed(PlusPercentage(v as f32)),
            "remove_curse_on_mana_flask_use" => Stat::RemoveCurseOnManaFlaskUse(Other(v as f32)),
            "resolute_technique" => Stat::ResoluteTechnique(Other(v as f32)),
            "restore_life_and_mana_on_warcry_%" => Stat::RestoreLifeAndManaOnWarcry(Other(v as f32)),
            "shield_armour_+%" => Stat::ShieldArmour(PlusPercentage(v as f32)),
            "shield_evasion_rating_+%" => Stat::ShieldEvasionRating(PlusPercentage(v as f32)),
            "shock_chance_+%" => Stat::ShockChance(PlusPercentage(v as f32)),
            "shock_chance_+%_vs_electrocuted_enemies" => Stat::ShockChanceVsElectrocutedEnemies(Other(v as f32)),
            "shock_duration_+%" => Stat::ShockDuration(PlusPercentage(v as f32)),
            "shock_effect_+%" => Stat::ShockEffect(PlusPercentage(v as f32)),
            "shock_effect_+%_with_critical_strikes" => Stat::ShockEffectWithCriticalStrikes(Other(v as f32)),
            "skill_area_of_effect_+%_if_enemy_killed_recently" => Stat::SkillAreaOfEffectIfEnemyKilledRecently(Other(v as f32)),
            "skill_area_of_effect_when_unarmed_+%" => Stat::SkillAreaOfEffectWhenUnarmed(PlusPercentage(v as f32)),
            "skill_cost_base_life_equal_to_base_mana" => Stat::SkillCostBaseLifeEqualToBaseMana(Other(v as f32)),
            "skill_effect_duration_+%" => Stat::SkillEffectDuration(PlusPercentage(v as f32)),
            "skill_speed_+%" => Stat::SkillSpeed(PlusPercentage(v as f32)),
            "slam_aftershock_chance_%" => Stat::SlamAftershockChance(Other(v as f32)),
            "slam_skill_area_of_effect_+%" => Stat::SlamSkillAreaOfEffect(PlusPercentage(v as f32)),
            "slows_have_no_potency_on_you" => Stat::SlowsHaveNoPotencyOnYou(Other(v as f32)),
            "small_passives_effect_+%" => Stat::SmallPassivesEffect(PlusPercentage(v as f32)),
            "sorcery_ward_+%_strength" => Stat::SorceryWardStrength(Other(v as f32)),
            "spawn_defender_with_totem" => Stat::SpawnDefenderWithTotem(Other(v as f32)),
            "spear_attack_speed_+%" => Stat::SpearAttackSpeed(PlusPercentage(v as f32)),
            "spear_critical_strike_chance_+%" => Stat::SpearCriticalStrikeChance(PlusPercentage(v as f32)),
            "spear_damage_+%" => Stat::SpearDamage(PlusPercentage(v as f32)),
            "spell_area_damage_+%" => Stat::SpellAreaDamage(PlusPercentage(v as f32)),
            "spell_area_of_effect_+%" => Stat::SpellAreaOfEffect(PlusPercentage(v as f32)),
            "spell_critical_strike_chance_+%" => Stat::SpellCriticalStrikeChance(PlusPercentage(v as f32)),
            "spell_critical_strike_chance_+%_while_wielding_staff" => Stat::SpellCriticalStrikeChanceWhileWieldingStaff(Other(v as f32)),
            "spell_critical_strike_multiplier_+_while_wielding_staff" => Stat::SpellCriticalStrikeMultiplierWhileWieldingStaff(Other(v as f32)),
            "spell_damage_+%" => Stat::SpellDamage(PlusPercentage(v as f32)),
            "spell_damage_+%_if_have_crit_recently" => Stat::SpellDamageIfHaveCritRecently(Other(v as f32)),
            "spell_damage_+%_while_es_full" => Stat::SpellDamageWhileEsFull(Other(v as f32)),
            "spell_damage_+%_while_wielding_melee_weapon" => Stat::SpellDamageWhileWieldingMeleeWeapon(Other(v as f32)),
            "spell_skill_gem_level_+" => Stat::SpellSkillGemLevel(Plus(v as f32)),
            "spell_skill_projectile_speed_+%" => Stat::SpellSkillProjectileSpeed(PlusPercentage(v as f32)),
            "spell_staff_damage_+%" => Stat::SpellStaffDamage(PlusPercentage(v as f32)),
            "spirit_+%" => Stat::Spirit(PlusPercentage(v as f32)),
            "staff_attack_area_of_effect_+%" => Stat::StaffAttackAreaOfEffect(PlusPercentage(v as f32)),
            "stormweaver_chill_effect_+%_final" => Stat::StormweaverChillEffectFinal(Other(v as f32)),
            "stormweaver_shock_duration_+%_final" => Stat::StormweaverShockDurationFinal(Other(v as f32)),
            "strength_+%" => Stat::Strength(PlusPercentage(v as f32)),
            "stun_threshold_+%" => Stat::StunThreshold(PlusPercentage(v as f32)),
            "stun_threshold_based_on_%_energy_shield_instead_of_life" => Stat::StunThresholdBasedOnEnergyShieldInsteadOfLife(Other(v as f32)),
            "stun_threshold_+%_during_empowered_attacks" => Stat::StunThresholdDuringEmpoweredAttacks(Other(v as f32)),
            "stun_threshold_+_from_%_base_armour_from_equipment" => Stat::StunThresholdFromBaseArmourFromEquipment(Other(v as f32)),
            "stun_threshold_+_from_lowest_of_base_helmet_evasion_rating_and_armour" => Stat::StunThresholdFromLowestOfBaseHelmetEvasionRatingAndArmour(Other(v as f32)),
            "stun_threshold_+_from_%_maximum_energy_shield" => Stat::StunThresholdFromMaximumEnergyShield(Other(v as f32)),
            "stun_threshold_+%_per_number_of_times_stunned_recently" => Stat::StunThresholdPerNumberOfTimesStunnedRecently(Other(v as f32)),
            "stun_threshold_+%_per_rage" => Stat::StunThresholdPerRage(Other(v as f32)),
            "stun_threshold_+_per_strength" => Stat::StunThresholdPerStrength(Other(v as f32)),
            "stun_threshold_+%_when_not_stunned_recently" => Stat::StunThresholdWhenNotStunnedRecently(Other(v as f32)),
            "stun_threshold_+%_when_on_full_life" => Stat::StunThresholdWhenOnFullLife(Other(v as f32)),
            "summon_totem_cast_speed_+%" => Stat::SummonTotemCastSpeed(PlusPercentage(v as f32)),
            "support_anticipation_charge_gain_frequency_+%" => Stat::SupportAnticipationChargeGainFrequency(PlusPercentage(v as f32)),
            "support_gem_limit_+" => Stat::SupportGemLimit(Plus(v as f32)),
            "sword_attack_speed_+%" => Stat::SwordAttackSpeed(PlusPercentage(v as f32)),
            "sword_damage_+%" => Stat::SwordDamage(PlusPercentage(v as f32)),
            "tablet_effect_+%_when_opening_a_map" => Stat::TabletEffectWhenOpeningAMap(Other(v as f32)),
            "thorns_damage_+%" => Stat::ThornsDamage(PlusPercentage(v as f32)),
            "thorns_damage_+%_if_blocked_recently" => Stat::ThornsDamageIfBlockedRecently(Other(v as f32)),
            "titan_damage_+%_final_against_heavy_stunned_enemies" => Stat::TitanDamageFinalAgainstHeavyStunnedEnemies(Other(v as f32)),
            "titan_expanded_main_inventory" => Stat::TitanExpandedMainInventory(Other(v as f32)),
            "titan_maximum_life_+%_final" => Stat::TitanMaximumLifeFinal(Other(v as f32)),
            "totem_additional_physical_damage_reduction_%" => Stat::TotemAdditionalPhysicalDamageReduction(Other(v as f32)),
            "totem_damage_+%" => Stat::TotemDamage(PlusPercentage(v as f32)),
            "totem_duration_+%" => Stat::TotemDuration(PlusPercentage(v as f32)),
            "totem_elemental_resistance_%" => Stat::TotemElementalResistance(Other(v as f32)),
            "totem_life_+%" => Stat::TotemLife(PlusPercentage(v as f32)),
            "totem_placement_range_+%" => Stat::TotemPlacementRange(PlusPercentage(v as f32)),
            "totem_skill_attack_speed_+%" => Stat::TotemSkillAttackSpeed(PlusPercentage(v as f32)),
            "totem_skill_cast_speed_+%" => Stat::TotemSkillCastSpeed(PlusPercentage(v as f32)),
            "totems_attack_speed_+%_per_active_totem" => Stat::TotemsAttackSpeedPerActiveTotem(Other(v as f32)),
            "totems_regenerate_%_life_per_minute" => Stat::TotemsRegenerateLifePerMinute(Other(v as f32)),
            "totems_spells_cast_speed_+%_per_active_totem" => Stat::TotemsSpellsCastSpeedPerActiveTotem(Other(v as f32)),
            "trap_critical_strike_chance_+%" => Stat::TrapCriticalStrikeChance(PlusPercentage(v as f32)),
            "trap_damage_+%" => Stat::TrapDamage(PlusPercentage(v as f32)),
            "trap_throwing_speed_+%" => Stat::TrapThrowingSpeed(PlusPercentage(v as f32)),
            "trigger_elemental_storm_on_crit" => Stat::TriggerElementalStormOnCrit(Other(v as f32)),
            "trigger_skills_refund_half_energy_spent_chance_%" => Stat::TriggerSkillsRefundHalfEnergySpentChance(Other(v as f32)),
            "trigger_wild_strike_on_attack_crit" => Stat::TriggerWildStrikeOnAttackCrit(Other(v as f32)),
            "triggered_spell_spell_damage_+%" => Stat::TriggeredSpellSpellDamage(PlusPercentage(v as f32)),
            "two_handed_melee_accuracy_rating_+%" => Stat::TwoHandedMeleeAccuracyRating(PlusPercentage(v as f32)),
            "unaffected_by_chill_during_dodge_roll" => Stat::UnaffectedByChillDuringDodgeRoll(Other(v as f32)),
            "unaffected_by_chill_while_mana_leeching" => Stat::UnaffectedByChillWhileManaLeeching(Other(v as f32)),
            "unarmed_attack_skill_melee_dash_range_+%" => Stat::UnarmedAttackSkillMeleeDashRange(PlusPercentage(v as f32)),
            "unarmed_attack_speed_+%" => Stat::UnarmedAttackSpeed(PlusPercentage(v as f32)),
            "warbringer_overbreak_armour" => Stat::WarbringerOverbreakArmour(Other(v as f32)),
            "warcries_bypass_cooldown" => Stat::WarcriesBypassCooldown(Other(v as f32)),
            "warcry_cooldown_speed_+%" => Stat::WarcryCooldownSpeed(PlusPercentage(v as f32)),
            "warcry_damage_+%" => Stat::WarcryDamage(PlusPercentage(v as f32)),
            "warcry_empowers_next_x_melee_attacks" => Stat::WarcryEmpowersNextXMeleeAttacks(Other(v as f32)),
            "warcry_skill_area_of_effect_+%" => Stat::WarcrySkillAreaOfEffect(PlusPercentage(v as f32)),
            "warcry_speed_+%" => Stat::WarcrySpeed(PlusPercentage(v as f32)),
            "weapon_swap_speed_+%" => Stat::WeaponSwapSpeed(PlusPercentage(v as f32)),
            "while_using_sword_reduce_enemy_block_%" => Stat::WhileUsingSwordReduceEnemyBlock(Other(v as f32)),
            "witch_passive_maximum_lightning_damage_+%_final" => Stat::WitchPassiveMaximumLightningDamageFinal(Other(v as f32)),
            "witchhunter_armour_evasion_+%_final" => Stat::WitchhunterArmourEvasionFinal(Other(v as f32)),
            "witchhunter_up_to_damage_+%_final_against_targets_with_missing_focus" => Stat::WitchhunterUpToDamageFinalAgainstTargetsWithMissingFocus(Other(v as f32)),
            "withered_effect_+%" => Stat::WitheredEffect(PlusPercentage(v as f32)),
            "world_map_unique_maps_visible_X_units_beyond_light_radius" => Stat::WorldMapUniqueMapsVisibleXUnitsBeyondLightRadius(Other(v as f32)),
            "x%_faster_start_of_sorcery_ward_recovery" => Stat::XFasterStartOfSorceryWardRecovery(Other(v as f32)),
            "you_and_allies_in_presence_all_damage_can_ignite_while_not_on_low_infernal_flame" => Stat::YouAndAlliesInPresenceAllDamageCanIgniteWhileNotOnLowInfernalFlame(Other(v as f32)),
            "you_and_allies_in_presence_non_skill_base_all_damage_%_to_gain_as_fire_while_on_high_infernal_flame" => Stat::YouAndAlliesInPresenceNonSkillBaseAllDamageToGainAsFireWhileOnHighInfernalFlame(Other(v as f32)),
            "you_gain_%_life_when_one_of_your_minions_is_revived" => Stat::YouGainLifeWhenOneOfYourMinionsIsRevived(Other(v as f32)),
            _ => Stat::Unknown(k.to_string(), v as f32),
        }
    }

    pub fn as_str(&self) -> &str {
        match self {
            Stat::AccuracyRating(_) => "accuracy_rating_+%",
            Stat::AccuracyRatingEqualToAttackCriticalStrikeChance(_) => "accuracy_rating_+%_equal_to_%_attack_critical_strike_chance",
            Stat::AccuracyRatingVsBleedingEnemies(_) => "accuracy_rating_vs_bleeding_enemies",
            Stat::AccuracyRatingVsEnemiesInCloseRange(_) => "accuracy_rating_+%_vs_enemies_in_close_range",
            Stat::AccuracyRatingVsRareOrUniqueEnemy(_) => "accuracy_rating_+%_vs_rare_or_unique_enemy",
            Stat::AccuracyRatingWhileDualWielding(_) => "accuracy_rating_while_dual_wielding_+%",
            Stat::AdditionalAllAttributes(_) => "additional_all_attributes",
            Stat::AdditionalCriticalStrikeChancePermyriadWithHeraldSkills(_) => "additional_critical_strike_chance_permyriad_with_herald_skills",
            Stat::AdditionalMaximumAllElementalResistances(_) => "additional_maximum_all_elemental_resistances_%",
            Stat::AdditionalPhysicalDamageReductionPerJade(_) => "additional_physical_damage_reduction_%_per_jade",
            Stat::AdditiveArmourModifiersApplyToEnergyShieldRechargeRateAtValue(_) => "additive_armour_modifiers_apply_to_energy_shield_recharge_rate_at_%_value",
            Stat::AftershockAreaOfEffect(_) => "aftershock_area_of_effect_+%",
            Stat::AggravateBleedingOlderThanMsOnHit(_) => "aggravate_bleeding_older_than_ms_on_hit",
            Stat::AggravateBleedingOnAttackCritChance(_) => "aggravate_bleeding_on_attack_crit_chance_%",
            Stat::AggravateBleedingOnExertedAttackHitChance(_) => "aggravate_bleeding_on_exerted_attack_hit_chance_%",
            Stat::AggravateBleedingWhenInflictedVsEnemiesOnJaggedGroundChance(_) => "aggravate_bleeding_when_inflicted_vs_enemies_on_jagged_ground_chance_%",
            Stat::AilmentChance(_) => "ailment_chance_+%",
            Stat::AilmentChanceVsRareOrUniqueEnemy(_) => "ailment_chance_+%_vs_rare_or_unique_enemy",
            Stat::AilmentEffect(_) => "ailment_effect_+%",
            Stat::AilmentThreshold(_) => "ailment_threshold_+%",
            Stat::AilmentThresholdFromLowestOfBaseBootsEvasionRatingAndArmour(_) => "ailment_threshold_+_from_lowest_of_base_boots_evasion_rating_and_armour",
            Stat::AilmentThresholdPerDexterity(_) => "ailment_threshold_+_per_dexterity",
            Stat::AllAttributes(_) => "all_attributes_+%",
            Stat::AllDamageCanChill(_) => "all_damage_can_chill",
            Stat::AllDamageCanShock(_) => "all_damage_can_shock",
            Stat::AllSkillGemLevel(_) => "all_skill_gem_level_+",
            Stat::AllSkillGemQuality(_) => "all_skill_gem_quality_+",
            Stat::AlliesInPresenceAccuracyRating(_) => "allies_in_presence_accuracy_rating",
            Stat::AlliesInPresenceAttackSpeed(_) => "allies_in_presence_attack_speed_+%",
            Stat::AlliesInPresenceLifeRegenerationRatePerMinuteEqualToYourMaximumLife(_) => "allies_in_presence_life_regeneration_rate_per_minute_equal_to_your_maximum_life_%",
            Stat::AncestralSlamEveryOtherSlam(_) => "ancestral_slam_every_other_slam",
            Stat::ArcaneSurgeEffectOnSelf(_) => "arcane_surge_effect_on_self_+%",
            Stat::AreaDamage(_) => "area_damage_+%",
            Stat::AreaOfEffectIfEnemyStunnedWithTwoHandedMeleeWeaponRecently(_) => "area_of_effect_+%_if_enemy_stunned_with_two_handed_melee_weapon_recently",
            Stat::AreaOfEffectIfHaveStunnedAnEnemyRecently(_) => "area_of_effect_+%_if_have_stunned_an_enemy_recently",
            Stat::AreaOfEffectWithHeraldSkills(_) => "area_of_effect_+%_with_herald_skills",
            Stat::AreaSkillKnockbackChance(_) => "area_skill_knockback_chance_%",
            Stat::ArmourAndEvasionOnLowLife(_) => "armour_and_evasion_on_low_life_+%",
            Stat::ArmourBreakAmount(_) => "armour_break_amount_+%",
            Stat::ArmourBreakAmountVsEnemiesAffectedByAilments(_) => "armour_break_amount_+%_vs_enemies_affected_by_ailments",
            Stat::ArmourBreakDamageDealtAsArmourBreak(_) => "armour_break_damage_%_dealt_as_armour_break",
            Stat::ArmourBreakDuration(_) => "armour_break_duration_+%",
            Stat::ArmourBreakEqualToPhysicalDamageDealtOnCriticalStrikeWithSpells(_) => "armour_break_equal_to_%_physical_damage_dealt_on_critical_strike_with_spells",
            Stat::ArmourBreakOfArmourOnHeavyStunning(_) => "armour_break_%_of_armour_on_heavy_stunning",
            Stat::ArmourEvasionWhileLeeching(_) => "armour_evasion_+%_while_leeching",
            Stat::ArmourFromStrengthRequirementsFromBootsGlovesHelmets(_) => "armour_+_from_%_strength_requirements_from_boots_gloves_helmets",
            Stat::ArmourIfConsumedEnduranceChargeRecently(_) => "armour_+%_if_consumed_endurance_charge_recently",
            Stat::ArmourIfHaveBeenHitRecently(_) => "armour_+%_if_have_been_hit_recently",
            Stat::ArmourIfHitEnemyWithMeleeAttackRecently(_) => "armour_+%_if_hit_enemy_with_melee_attack_recently",
            Stat::ArmourIfYouHaventBeenHitRecently(_) => "armour_+%_if_you_havent_been_hit_recently",
            Stat::ArmourPerRage(_) => "armour_+%_per_rage",
            Stat::ArmourWhileSurrounded(_) => "armour_+%_while_surrounded",
            Stat::ArrowBaseNumberOfTargetsToPierce(_) => "arrow_base_number_of_targets_to_pierce",
            Stat::ArrowCriticalStrikeChanceMaxAsDistanceTravelledIncreases(_) => "arrow_critical_strike_chance_+%_max_as_distance_travelled_increases",
            Stat::ArrowSpeedAdditiveModifiersAlsoApplyToBowDamage(_) => "arrow_speed_additive_modifiers_also_apply_to_bow_damage",
            Stat::AscendancyBeidatsGazeManaPerXMaximumLife(_) => "ascendancy_beidats_gaze_mana_+_per_X_maximum_life",
            Stat::AscendancyBeidatsHandEnergyShieldPerXMaximumLife(_) => "ascendancy_beidats_hand_energy_shield_+_per_X_maximum_life",
            Stat::AscendancyBeidatsWillSpiritPerXMaximumLife(_) => "ascendancy_beidats_will_spirit_+_per_X_maximum_life",
            Stat::AscendancyChronomancerApexOfTheMomentBaseSlowAuraValue(_) => "ascendancy_chronomancer_apex_of_the_moment_base_slow_aura_value",
            Stat::AscendancyEnergyGeneratedFinal(_) => "ascendancy_energy_generated_+%_final",
            Stat::AscendancyPathfinderFlaskChargesGainedFinal(_) => "ascendancy_pathfinder_flask_charges_gained_+%_final",
            Stat::AscendancyTitanDamageReductionRatingFromBodyArmourFinal(_) => "ascendancy_titan_damage_reduction_rating_from_body_armour_+%_final",
            Stat::AscendancyWarbringerBlockChanceFinal(_) => "ascendancy_warbringer_block_chance_+%_final",
            Stat::AtlasKeystoneCorruptionRoulette(_) => "atlas_keystone_corruption_roulette",
            Stat::AtlasKeystoneExtremeArchaeology(_) => "atlas_keystone_extreme_archaeology",
            Stat::AtlasKeystonePrefixOrSuffixModEffectFinal(_) => "atlas_keystone_prefix_or_suffix_mod_effect_+%_final",
            Stat::AttackAdditionalCriticalStrikeChancePermyriad(_) => "attack_additional_critical_strike_chance_permyriad",
            Stat::AttackAndCastSpeed(_) => "attack_and_cast_speed_+%",
            Stat::AttackAndCastSpeedOnPlacingTotem(_) => "attack_and_cast_speed_+%_on_placing_totem",
            Stat::AttackAndCastSpeedWhileAffectedByAManaFlask(_) => "attack_and_cast_speed_+%_while_affected_by_a_mana_flask",
            Stat::AttackAndCastSpeedWithElementalSkills(_) => "attack_and_cast_speed_+%_with_elemental_skills",
            Stat::AttackAndCastSpeedWithLightningSkills(_) => "attack_and_cast_speed_+%_with_lightning_skills",
            Stat::AttackAreaDamage(_) => "attack_area_damage_+%",
            Stat::AttackAreaOfEffect(_) => "attack_area_of_effect_+%",
            Stat::AttackCriticalStrikeChance(_) => "attack_critical_strike_chance_+%",
            Stat::AttackCriticalStrikeMultiplier(_) => "attack_critical_strike_multiplier_+",
            Stat::AttackDamage(_) => "attack_damage_+%",
            Stat::AttackDamageVsBleedingEnemies(_) => "attack_damage_vs_bleeding_enemies_+%",
            Stat::AttackDamageVsRareOrUniqueEnemy(_) => "attack_damage_+%_vs_rare_or_unique_enemy",
            Stat::AttackDamageWhenOnFullLife(_) => "attack_damage_+%_when_on_full_life",
            Stat::AttackDamageWhenOnLowLife(_) => "attack_damage_+%_when_on_low_life",
            Stat::AttackDamageWhileAllyInPresence(_) => "attack_damage_+%_while_ally_in_presence",
            Stat::AttackDamageWhileSurrounded(_) => "attack_damage_+%_while_surrounded",
            Stat::AttackManaCost(_) => "attack_mana_cost_+%",
            Stat::AttackSkillsAdditionalTotemsAllowed(_) => "attack_skills_additional_totems_allowed",
            Stat::AttackSkillsDamageWhileHoldingShield(_) => "attack_skills_damage_+%_while_holding_shield",
            Stat::AttackSpeed(_) => "attack_speed_+%",
            Stat::AttackSpeedDuringFlaskEffect(_) => "attack_speed_+%_during_flask_effect",
            Stat::AttackSpeedIfEnemyKilledRecently(_) => "attack_speed_+%_if_enemy_killed_recently",
            Stat::AttackSpeedIfHaveBeenHitRecently(_) => "attack_speed_+%_if_have_been_hit_recently",
            Stat::AttackSpeedIfRareOrUniqueEnemyNearby(_) => "attack_speed_+%_if_rare_or_unique_enemy_nearby",
            Stat::AttackSpeedIfYouHaveNotAttackedRecently(_) => "attack_speed_+%_if_you_have_not_attacked_recently",
            Stat::AttackSpeedWhileDualWielding(_) => "attack_speed_while_dual_wielding_+%",
            Stat::AttackSpeedWhileHoldingShield(_) => "attack_speed_+%_while_holding_shield",
            Stat::AttackSpeedWhileSurrounded(_) => "attack_speed_+%_while_surrounded",
            Stat::AttacksChanceToBlindOnHit(_) => "attacks_chance_to_blind_on_hit_%",
            Stat::AuraEffect(_) => "aura_effect_+%",
            Stat::AxeAttackSpeed(_) => "axe_attack_speed_+%",
            Stat::AxeDamage(_) => "axe_damage_+%",
            Stat::BaseAggravateBleedingOnAttackHitChance(_) => "base_aggravate_bleeding_on_attack_hit_chance_%",
            Stat::BaseAllAilmentDurationOnSelf(_) => "base_all_ailment_duration_on_self_+%",
            Stat::BaseArmourAppliesToFireDamage(_) => "base_armour_%_applies_to_fire_damage",
            Stat::BaseAttackDamagePenetratesElementalResist(_) => "base_attack_damage_penetrates_elemental_resist_%",
            Stat::BaseBleedDuration(_) => "base_bleed_duration_+%",
            Stat::BaseBleedingEffect(_) => "base_bleeding_effect_+%",
            Stat::BaseBlockDamageTaken(_) => "base_block_%_damage_taken",
            Stat::BaseBodyArmourPermyriadToGainAsPhysicalThornsDamage(_) => "base_body_armour_permyriad_to_gain_as_physical_thorns_damage",
            Stat::BaseCastSpeed(_) => "base_cast_speed_+%",
            Stat::BaseChanceToInflictBleeding(_) => "base_chance_to_inflict_bleeding_%",
            Stat::BaseChanceToNotConsumeCorpse(_) => "base_chance_to_not_consume_corpse_%",
            Stat::BaseChanceToPierce(_) => "base_chance_to_pierce_%",
            Stat::BaseChanceToPoisonOnHit(_) => "base_chance_to_poison_on_hit_%",
            Stat::BaseChanceToPoisonOnHitVsNonPoisonedEnemies(_) => "base_chance_to_poison_on_hit_%_vs_non_poisoned_enemies",
            Stat::BaseChaosDamageResistance(_) => "base_chaos_damage_resistance_%",
            Stat::BaseColdDamageResistance(_) => "base_cold_damage_resistance_%",
            Stat::BaseCooldownSpeed(_) => "base_cooldown_speed_+%",
            Stat::BaseCost(_) => "base_cost_+%",
            Stat::BaseCriticalStrikeMultiplier(_) => "base_critical_strike_multiplier_+",
            Stat::BaseCurseDuration(_) => "base_curse_duration_+%",
            Stat::BaseDamageRemovedFromManaBeforeLife(_) => "base_damage_removed_from_mana_before_life_%",
            Stat::BaseDamagingAilmentEffect(_) => "base_damaging_ailment_effect_+%",
            Stat::BaseDarkness(_) => "base_darkness",
            Stat::BaseDarknessRefreshRateMs(_) => "base_darkness_refresh_rate_ms",
            Stat::BaseDebuffSlowMagnitude(_) => "base_debuff_slow_magnitude_+%",
            Stat::BaseDexterity(_) => "base_dexterity",
            Stat::BaseDexterityAndIntelligence(_) => "base_dexterity_and_intelligence",
            Stat::BaseElementalStatusAilmentDuration(_) => "base_elemental_status_ailment_duration_+%",
            Stat::BaseEnemyCriticalStrikeChanceAgainstSelf(_) => "base_enemy_critical_strike_chance_+%_against_self",
            Stat::BaseEvasionRating(_) => "base_evasion_rating",
            Stat::BaseFireDamageResistance(_) => "base_fire_damage_resistance_%",
            Stat::BaseFrenzyChargeDuration(_) => "base_frenzy_charge_duration_+%",
            Stat::BaseIgniteEffect(_) => "base_ignite_effect_+%",
            Stat::BaseIntelligence(_) => "base_intelligence",
            Stat::BaseLifeGainedOnEnemyDeath(_) => "base_life_gained_on_enemy_death",
            Stat::BaseLifeLeechAmount(_) => "base_life_leech_amount_+%",
            Stat::BaseLifeLeechDoesNotStopAtFullLife(_) => "base_life_leech_does_not_stop_at_full_life",
            Stat::BaseLifeLeechFromAllSpellDamagePermyriad(_) => "base_life_leech_from_all_spell_damage_permyriad",
            Stat::BaseLifeLeechRate(_) => "base_life_leech_rate_+%",
            Stat::BaseManaCost(_) => "base_mana_cost_-%",
            Stat::BaseManaLeechAmount(_) => "base_mana_leech_amount_+%",
            Stat::BaseManaLeechIsInstant(_) => "base_mana_leech_is_instant",
            Stat::BaseMaximumChaosDamageResistance(_) => "base_maximum_chaos_damage_resistance_%",
            Stat::BaseMaximumColdDamageResistance(_) => "base_maximum_cold_damage_resistance_%",
            Stat::BaseMaximumEnergyShield(_) => "base_maximum_energy_shield",
            Stat::BaseMaximumFireDamageResistance(_) => "base_maximum_fire_damage_resistance_%",
            Stat::BaseMaximumLife(_) => "base_maximum_life",
            Stat::BaseMaximumLightningDamageResistance(_) => "base_maximum_lightning_damage_resistance_%",
            Stat::BaseMaximumMana(_) => "base_maximum_mana",
            Stat::BaseMovementVelocity(_) => "base_movement_velocity_+%",
            Stat::BasePenetrateElementalResistances(_) => "base_penetrate_elemental_resistances_%",
            Stat::BasePhysicalDamageReductionRating(_) => "base_physical_damage_reduction_rating",
            Stat::BasePoisonDuration(_) => "base_poison_duration_+%",
            Stat::BasePoisonEffect(_) => "base_poison_effect_+%",
            Stat::BaseProjectileSpeed(_) => "base_projectile_speed_+%",
            Stat::BaseReduceEnemyColdResistance(_) => "base_reduce_enemy_cold_resistance_%",
            Stat::BaseReduceEnemyFireResistance(_) => "base_reduce_enemy_fire_resistance_%",
            Stat::BaseReduceEnemyLightningResistance(_) => "base_reduce_enemy_lightning_resistance_%",
            Stat::BaseResistAllElements(_) => "base_resist_all_elements_%",
            Stat::BaseSelfCriticalStrikeMultiplier(_) => "base_self_critical_strike_multiplier_-%",
            Stat::BaseSelfFreezeDuration(_) => "base_self_freeze_duration_-%",
            Stat::BaseSelfIgniteDuration(_) => "base_self_ignite_duration_-%",
            Stat::BaseSelfShockDuration(_) => "base_self_shock_duration_-%",
            Stat::BaseShouldHaveArcaneSurgeFromStat(_) => "base_should_have_arcane_surge_from_stat",
            Stat::BaseSkillAreaOfEffect(_) => "base_skill_area_of_effect_+%",
            Stat::BaseSkillCostLifeInsteadOfMana(_) => "base_skill_cost_life_instead_of_mana_%",
            Stat::BaseSlowPotency(_) => "base_slow_potency_+%",
            Stat::BaseSpellCriticalStrikeChanceOverridePermyriad(_) => "base_spell_critical_strike_chance_override_permyriad",
            Stat::BaseSpellCriticalStrikeMultiplier(_) => "base_spell_critical_strike_multiplier_+",
            Stat::BaseStrength(_) => "base_strength",
            Stat::BaseStrengthAndDexterity(_) => "base_strength_and_dexterity",
            Stat::BaseStrengthAndIntelligence(_) => "base_strength_and_intelligence",
            Stat::BaseStunRecovery(_) => "base_stun_recovery_+%",
            Stat::BaseThornsCriticalStrikeChance(_) => "base_thorns_critical_strike_chance",
            Stat::BaseThornsCriticalStrikeMultiplier(_) => "base_thorns_critical_strike_multiplier_+",
            Stat::BleedOnCrit(_) => "bleed_on_crit_%",
            Stat::BleedOnCritWithAttacks(_) => "bleed_on_crit_%_with_attacks",
            Stat::BlindEffect(_) => "blind_effect_+%",
            Stat::BlindEnemiesWhenTheyStunYou(_) => "blind_enemies_when_they_stun_you",
            Stat::BlockChance(_) => "block_chance_+%",
            Stat::BlockChanceFromEquippedShieldIs(_) => "block_chance_from_equipped_shield_is_%",
            Stat::BlockChanceIfBlockedWithActiveBlockRecently(_) => "block_chance_+%_if_blocked_with_active_block_recently",
            Stat::BlockRecovery(_) => "block_recovery_+%",
            Stat::BodyArmour(_) => "body_armour_+%",
            Stat::BodyArmourEvasionRating(_) => "body_armour_evasion_rating_+%",
            Stat::BowAccuracyRating(_) => "bow_accuracy_rating_+%",
            Stat::BowAttackSpeed(_) => "bow_attack_speed_+%",
            Stat::BowCriticalStrikeMultiplier(_) => "bow_critical_strike_multiplier_+",
            Stat::BowDamage(_) => "bow_damage_+%",
            Stat::BreachFlameEffectsDoubled(_) => "breach_flame_effects_doubled",
            Stat::BuffTimePassedOnlyBuffCategory(_) => "buff_time_passed_+%_only_buff_category",
            Stat::BuildupJadeEveryXMs(_) => "buildup_jade_every_x_ms",
            Stat::CanApplyAdditionalChill(_) => "can_apply_additional_chill",
            Stat::CanApplyAdditionalShock(_) => "can_apply_additional_shock",
            Stat::CanBlockAllHitsWhileShieldIsLowered(_) => "can_block_all_hits_while_shield_is_lowered",
            Stat::CannotBeBlindedWhileOnFullLife(_) => "cannot_be_blinded_while_on_full_life",
            Stat::CannotGainSpiritFromEquipment(_) => "cannot_gain_spirit_from_equipment",
            Stat::CannotRechargeEnergyShield(_) => "cannot_recharge_energy_shield",
            Stat::CastSpeedForColdSkills(_) => "cast_speed_for_cold_skills_+%",
            Stat::CastSpeedIfHaveCritRecently(_) => "cast_speed_+%_if_have_crit_recently",
            Stat::CastSpeedPerNumUniqueSpellsCastRecently(_) => "cast_speed_+%_per_num_unique_spells_cast_recently",
            Stat::CastSpeedWhenOnFullLife(_) => "cast_speed_+%_when_on_full_life",
            Stat::CastSpeedWhenOnLowLife(_) => "cast_speed_+%_when_on_low_life",
            Stat::CastSpeedWhileHoldingStaff(_) => "cast_speed_+%_while_holding_staff",
            Stat::ChanceForSkillsToAvoidCooldown(_) => "chance_for_skills_to_avoid_cooldown_%",
            Stat::ChanceToCreateShockingGroundOnShock(_) => "chance_%_to_create_shocking_ground_on_shock",
            Stat::ChanceToDoubleArmourEffectOnHit(_) => "chance_to_double_armour_effect_on_hit_%",
            Stat::ChanceToDoubleEffectOfRemovingFrenzyCharges(_) => "chance_%_to_double_effect_of_removing_frenzy_charges",
            Stat::ChanceToForkExtraProjectile(_) => "chance_to_fork_extra_projectile_%",
            Stat::ChanceToGainOnslaughtOnKillWithAxes(_) => "chance_to_gain_onslaught_on_kill_with_axes_%",
            Stat::ChanceToPoisonOnCriticalStrikeWithDagger(_) => "chance_to_poison_on_critical_strike_with_dagger_%",
            Stat::ChanceToSummonTwoTotems(_) => "chance_to_summon_two_totems_%",
            Stat::ChaosDamage(_) => "chaos_damage_+%",
            Stat::ChaosDamageResistanceIsDoubled(_) => "chaos_damage_resistance_is_doubled",
            Stat::ChaosSkillGemLevel(_) => "chaos_skill_gem_level_+",
            Stat::ChargesGained(_) => "charges_gained_+%",
            Stat::CharmChargesGained(_) => "charm_charges_gained_+%",
            Stat::CharmChargesUsed(_) => "charm_charges_used_+%",
            Stat::CharmDuration(_) => "charm_duration_+%",
            Stat::CharmEffect(_) => "charm_effect_+%",
            Stat::CharmsChanceOnUseToUseAnotherCharmWithoutConsumingCharges(_) => "charms_%_chance_on_use_to_use_another_charm_without_consuming_charges",
            Stat::CharmsChanceToNotConsumeCharges(_) => "charms_%_chance_to_not_consume_charges",
            Stat::ChillAndFreezeDuration(_) => "chill_and_freeze_duration_+%",
            Stat::ChillDuration(_) => "chill_duration_+%",
            Stat::ChillEffect(_) => "chill_effect_+%",
            Stat::ChillEffectivenessOnSelf(_) => "chill_effectiveness_on_self_+%",
            Stat::ClawAccuracyRating(_) => "claw_accuracy_rating_+%",
            Stat::ClawAttackSpeed(_) => "claw_attack_speed_+%",
            Stat::ClawCriticalStrikeChance(_) => "claw_critical_strike_chance_+%",
            Stat::ClawDamage(_) => "claw_damage_+%",
            Stat::ColdDamage(_) => "cold_damage_+%",
            Stat::ColdDamageWhileAffectedByHeraldOfIce(_) => "cold_damage_+%_while_affected_by_herald_of_ice",
            Stat::ColdExposureEffect(_) => "cold_exposure_effect_+%",
            Stat::ColdExposureYouInflictLowersColdResistanceByExtra(_) => "cold_exposure_you_inflict_lowers_cold_resistance_by_extra_%",
            Stat::ColdHitAndDotDamageTakenAsFire(_) => "cold_hit_and_dot_damage_%_taken_as_fire",
            Stat::ColdSkillGemLevel(_) => "cold_skill_gem_level_+",
            Stat::ConvertAllLifeLeechToEnergyShieldLeech(_) => "convert_all_life_leech_to_energy_shield_leech",
            Stat::CorpsesInYourPresenceExplodeDealingMaximumLifePhysicalDamageOnWarcry(_) => "corpses_in_your_presence_explode_dealing_%_maximum_life_physical_damage_on_warcry",
            Stat::CreateChillingGroundOnFreeze(_) => "create_chilling_ground_on_freeze",
            Stat::CriticalHitBleedingEffect(_) => "critical_hit_bleeding_effect_+%",
            Stat::CriticalHitDamageBonusIfConsumedPowerChargeRecently(_) => "critical_hit_damage_bonus_+%_if_consumed_power_charge_recently",
            Stat::CriticalHitDamagingAilmentEffect(_) => "critical_hit_damaging_ailment_effect_+%",
            Stat::CriticalHitIgniteEffect(_) => "critical_hit_ignite_effect_+%",
            Stat::CriticalStrikeChance(_) => "critical_strike_chance_+%",
            Stat::CriticalStrikeChanceAgainstEnemiesOnFullLife(_) => "critical_strike_chance_against_enemies_on_full_life_+%",
            Stat::CriticalStrikeChanceIfEnemyKilledRecently(_) => "critical_strike_chance_+%_if_enemy_killed_recently",
            Stat::CriticalStrikeChanceIfHaveNotCritRecently(_) => "critical_strike_chance_+%_if_have_not_crit_recently",
            Stat::CriticalStrikeChanceVsBleedingEnemies(_) => "critical_strike_chance_+%_vs_bleeding_enemies",
            Stat::CriticalStrikeChanceVsDazedEnemies(_) => "critical_strike_chance_+%_vs_dazed_enemies",
            Stat::CriticalStrikeChanceVsEnemiesWithLightningExposure(_) => "critical_strike_chance_+%_vs_enemies_with_lightning_exposure",
            Stat::CriticalStrikeChanceVsEnemiesWithoutElementalStatusAilments(_) => "critical_strike_chance_+%_vs_enemies_without_elemental_status_ailments",
            Stat::CriticalStrikeChanceVsShockedEnemies(_) => "critical_strike_chance_+%_vs_shocked_enemies",
            Stat::CriticalStrikeChanceWhileDualWielding(_) => "critical_strike_chance_while_dual_wielding_+%",
            Stat::CriticalStrikeMultiplierDuringAnyFlaskEffect(_) => "critical_strike_multiplier_+_during_any_flask_effect",
            Stat::CriticalStrikeMultiplierIfGainedPowerChargeRecently(_) => "critical_strike_multiplier_+_if_gained_power_charge_recently",
            Stat::CriticalStrikeMultiplierIfHaveDealtNonCritRecently(_) => "critical_strike_multiplier_+_if_have_dealt_non_crit_recently",
            Stat::CriticalStrikeMultiplierIfHaveNotDealtCriticalStrikeRecently(_) => "critical_strike_multiplier_+_if_have_not_dealt_critical_strike_recently",
            Stat::CriticalStrikeMultiplierVsBurningEnemies(_) => "critical_strike_multiplier_+_vs_burning_enemies",
            Stat::CriticalStrikeMultiplierVsEnemiesOnFullLife(_) => "critical_strike_multiplier_vs_enemies_on_full_life_+",
            Stat::CriticalStrikeMultiplierVsStunnedEnemies(_) => "critical_strike_multiplier_+_vs_stunned_enemies",
            Stat::CriticalStrikeMultiplierWithDagger(_) => "critical_strike_multiplier_with_dagger_+",
            Stat::CriticalStrikesIgnorePositiveElementalResistances(_) => "critical_strikes_ignore_positive_elemental_resistances",
            Stat::CrossbowAttackChanceToNotConsumeAmmo(_) => "crossbow_attack_%_chance_to_not_consume_ammo",
            Stat::CrossbowAttackSpeed(_) => "crossbow_attack_speed_+%",
            Stat::CrossbowCriticalStrikeChance(_) => "crossbow_critical_strike_chance_+%",
            Stat::CrossbowCriticalStrikeMultiplier(_) => "crossbow_critical_strike_multiplier_+",
            Stat::CrossbowDamage(_) => "crossbow_damage_+%",
            Stat::CrushingBlow(_) => "crushing_blow",
            Stat::CullingStrikeThreshold(_) => "culling_strike_threshold_+%",
            Stat::CullingStrikeVsMarkedEnemy(_) => "culling_strike_vs_marked_enemy",
            Stat::CurseAreaOfEffect(_) => "curse_area_of_effect_+%",
            Stat::CurseDelay(_) => "curse_delay_+%",
            Stat::CurseEffect(_) => "curse_effect_+%",
            Stat::CurseEffectOnSelf(_) => "curse_effect_on_self_+%",
            Stat::CursesNeverExpire(_) => "curses_never_expire",
            Stat::DaggerAttackSpeed(_) => "dagger_attack_speed_+%",
            Stat::DaggerCriticalStrikeChance(_) => "dagger_critical_strike_chance_+%",
            Stat::DaggerDamage(_) => "dagger_damage_+%",
            Stat::Damage(_) => "damage_+%",
            Stat::DamageAgainstEnemiesWithFullyBrokenArmour(_) => "damage_+%_against_enemies_with_fully_broken_armour",
            Stat::DamageIfTriggeredSkillRecently(_) => "damage_+%_if_triggered_skill_recently",
            Stat::DamageIfYouHaveConsumedACorpseRecently(_) => "damage_+%_if_you_have_consumed_a_corpse_recently",
            Stat::DamagePerActiveCurseOnSelf(_) => "damage_+%_per_active_curse_on_self",
            Stat::DamagePerDifferentWarcryUsedRecently(_) => "damage_+%_per_different_warcry_used_recently",
            Stat::DamagePerEnemyElementalAilment(_) => "damage_+%_per_enemy_elemental_ailment",
            Stat::DamagePerWarcryUsedRecently(_) => "damage_+%_per_warcry_used_recently",
            Stat::DamageRemovedFromYourNearestTotemBeforeLifeOrEs(_) => "damage_removed_from_your_nearest_totem_before_life_or_es_%",
            Stat::DamageTakenFinalPerTailwind(_) => "damage_taken_+%_final_per_tailwind",
            Stat::DamageTakenGoesToMana(_) => "damage_taken_goes_to_mana_%",
            Stat::DamageTakenOnLowLife(_) => "damage_taken_+%_on_low_life",
            Stat::DamageToRareAndUniqueEnemies(_) => "damage_+%_to_rare_and_unique_enemies",
            Stat::DamageVsBurningEnemies(_) => "damage_+%_vs_burning_enemies",
            Stat::DamageVsDazedEnemies(_) => "damage_+%_vs_dazed_enemies",
            Stat::DamageVsEnemiesAffectedByStatusAilments(_) => "damage_+%_vs_enemies_affected_by_status_ailments",
            Stat::DamageVsEnemiesOnFullLife(_) => "damage_+%_vs_enemies_on_full_life",
            Stat::DamageVsEnemiesOnLowLife(_) => "damage_vs_enemies_on_low_life_+%",
            Stat::DamageVsFrozenEnemies(_) => "damage_+%_vs_frozen_enemies",
            Stat::DamageVsHinderedEnemies(_) => "damage_+%_vs_hindered_enemies",
            Stat::DamageVsShockedEnemies(_) => "damage_vs_shocked_enemies_+%",
            Stat::DamageWhileAffectedByAHerald(_) => "damage_+%_while_affected_by_a_herald",
            Stat::DamageWhileDualWielding(_) => "damage_while_dual_wielding_+%",
            Stat::DamageWhileTotemActive(_) => "damage_+%_while_totem_active",
            Stat::DamageWhileUnarmed(_) => "damage_+%_while_unarmed",
            Stat::DamageWhileUsingCharm(_) => "damage_+%_while_using_charm",
            Stat::DamageWhileWieldingWand(_) => "damage_+%_while_wielding_wand",
            Stat::DamageWithDaggersAgainstFullLifeEnemies(_) => "damage_+%_with_daggers_against_full_life_enemies",
            Stat::DamageWithHeraldSkills(_) => "damage_+%_with_herald_skills",
            Stat::DamageWithHitsIsLuckyVsEnemiesOnLowLife(_) => "damage_with_hits_is_lucky_vs_enemies_on_low_life",
            Stat::DamageWithHitsIsLuckyVsHeavyStunnedEnemies(_) => "damage_with_hits_is_lucky_vs_heavy_stunned_enemies",
            Stat::DamageWithOneHandedWeapons(_) => "damage_+%_with_one_handed_weapons",
            Stat::DamageWithTwoHandedWeapons(_) => "damage_+%_with_two_handed_weapons",
            Stat::DamagingAilmentDuration(_) => "damaging_ailment_duration_+%",
            Stat::DamagingAilmentsDealDamageFaster(_) => "damaging_ailments_deal_damage_+%_faster",
            Stat::DarknessPerLevel(_) => "darkness_per_level",
            Stat::DarknessRefreshRate(_) => "darkness_refresh_rate_+%",
            Stat::DazeBuildUp(_) => "daze_build_up_+%",
            Stat::DazeDuration(_) => "daze_duration_+%",
            Stat::DeadeyeAccuracyUnaffectedByRange(_) => "deadeye_accuracy_unaffected_by_range",
            Stat::DeadeyeMovementSpeedPenaltyFinalWhilePerformingAction(_) => "deadeye_movement_speed_penalty_+%_final_while_performing_action",
            Stat::DeadeyeProjectileDamageFinalMaxAsDistanceTravelledDecreases(_) => "deadeye_projectile_damage_+%_final_max_as_distance_travelled_decreases",
            Stat::DeadeyeProjectileDamageFinalMaxAsDistanceTravelledIncreases(_) => "deadeye_projectile_damage_+%_final_max_as_distance_travelled_increases",
            Stat::DebuffTimePassed(_) => "debuff_time_passed_+%",
            Stat::DecimatingStrike(_) => "decimating_strike",
            Stat::DefencesWhileWieldingStaff(_) => "defences_+%_while_wielding_staff",
            Stat::DefendWithArmourAgainstCriticalStrikes(_) => "defend_with_%_armour_against_critical_strikes",
            Stat::DefendWithArmourAgainstRangedAttacks(_) => "defend_with_%_armour_against_ranged_attacks",
            Stat::DefendWithOfArmourWhileNotOnLowEnergyShield(_) => "defend_with_%_of_armour_while_not_on_low_energy_shield",
            Stat::Dexterity(_) => "dexterity_+%",
            Stat::DisplayPassiveAttributeText(_) => "display_passive_attribute_text",
            Stat::DistanceScaledAccuracyRatingPenalty(_) => "distance_scaled_accuracy_rating_penalty_+%",
            Stat::DoubleNumberOfPoisonYouCanInflict(_) => "double_number_of_poison_you_can_inflict",
            Stat::DoubleTabletEffectChanceWhenOpeningAMap(_) => "double_tablet_effect_chance_%_when_opening_a_map",
            Stat::DrainFocusOfDamageDealtOnHit(_) => "drain_focus_%_of_damage_dealt_on_hit",
            Stat::DummyStatDisplayNothing(_) => "dummy_stat_display_nothing",
            Stat::ElectrocutedEnemyDamageTaken(_) => "electrocuted_enemy_damage_taken_+%",
            Stat::ElementalDamage(_) => "elemental_damage_+%",
            Stat::ElementalDamageCanInflictBleeding(_) => "elemental_damage_can_inflict_bleeding",
            Stat::ElementalDamageIfEnemyChilledRecently(_) => "elemental_damage_+%_if_enemy_chilled_recently",
            Stat::ElementalDamageIfEnemyIgnitedRecently(_) => "elemental_damage_+%_if_enemy_ignited_recently",
            Stat::ElementalDamageIfEnemyShockedRecently(_) => "elemental_damage_+%_if_enemy_shocked_recently",
            Stat::ElementalDamageIfHaveCritRecently(_) => "elemental_damage_+%_if_have_crit_recently",
            Stat::ElementalDamageTakenRecoupedAsLife(_) => "elemental_damage_taken_%_recouped_as_life",
            Stat::ElementalDamageWithAttackSkills(_) => "elemental_damage_with_attack_skills_+%",
            Stat::ElementalDamageWithAttackSkillsWhileUsingFlask(_) => "elemental_damage_with_attack_skills_+%_while_using_flask",
            Stat::ElementalStormCooldownRecoverySpeedFinal(_) => "elemental_storm_cooldown_recovery_speed_+%_final",
            Stat::ElementalistChillMaximumMagnitudeOverride(_) => "elementalist_chill_maximum_magnitude_override",
            Stat::EmpoweredAttackDamage(_) => "empowered_attack_damage_+%",
            Stat::EmpoweredAttackHitDamageStunMultiplier(_) => "empowered_attack_hit_damage_stun_multiplier_+%",
            Stat::EnduranceChargeDuration(_) => "endurance_charge_duration_+%",
            Stat::EnemiesAreMaimedForXSecondsAfterBecomingUnpinned(_) => "enemies_are_maimed_for_x_seconds_after_becoming_unpinned",
            Stat::EnemiesChaosResistanceWhileCursed(_) => "enemies_chaos_resistance_%_while_cursed",
            Stat::EnemiesCursedByYouHaveLifeRegenerationRate(_) => "enemies_cursed_by_you_have_life_regeneration_rate_+%",
            Stat::EnemiesInPresenceCooldownRecovery(_) => "enemies_in_presence_cooldown_recovery_+%",
            Stat::EnemiesNearMarkedEnemyAreBlinded(_) => "enemies_near_marked_enemy_are_blinded",
            Stat::EnemiesYouCurseCannotRechargeEnergyShield(_) => "enemies_you_curse_cannot_recharge_energy_shield",
            Stat::EnergyGenerated(_) => "energy_generated_+%",
            Stat::EnergyShieldDelay(_) => "energy_shield_delay_-%",
            Stat::EnergyShieldDelayIfStunnedRecently(_) => "energy_shield_delay_-%_if_stunned_recently",
            Stat::EnergyShieldDelayWhenNotOnFullLife(_) => "energy_shield_delay_-%_when_not_on_full_life",
            Stat::EnergyShieldFromFocus(_) => "energy_shield_from_focus_+%",
            Stat::EnergyShieldFromHelmet(_) => "energy_shield_from_helmet_+%",
            Stat::EnergyShieldGainedOnBlock(_) => "energy_shield_gained_on_block",
            Stat::EnergyShieldIfConsumedPowerChargeRecently(_) => "energy_shield_+%_if_consumed_power_charge_recently",
            Stat::EnergyShieldRechargeRate(_) => "energy_shield_recharge_rate_+%",
            Stat::EnergyShieldRecoveryRate(_) => "energy_shield_recovery_rate_+%",
            Stat::EnergyShieldRecoveryRateIfNotHitRecently(_) => "energy_shield_recovery_rate_+%_if_not_hit_recently",
            Stat::EvasionAndPhysicalDamageReductionRating(_) => "evasion_and_physical_damage_reduction_rating_+%",
            Stat::EvasionIfHitRecently(_) => "evasion_+%_if_hit_recently",
            Stat::EvasionRating(_) => "evasion_rating_+%",
            Stat::EvasionRatingAlsoReducesPhysicalDamage(_) => "evasion_rating_also_reduces_physical_damage",
            Stat::EvasionRatingIfConsumedFrenzyChargeRecently(_) => "evasion_rating_+%_if_consumed_frenzy_charge_recently",
            Stat::EvasionRatingIfHaveNotBeenHitRecently(_) => "evasion_rating_+%_if_have_not_been_hit_recently",
            Stat::EvasionRatingIfYouDodgeRolledRecently(_) => "evasion_rating_+%_if_you_dodge_rolled_recently",
            Stat::EvasionRatingIfYouHaveHitAnEnemyRecently(_) => "evasion_rating_+%_if_you_have_hit_an_enemy_recently",
            Stat::EvasionRatingToGainAsArmour(_) => "evasion_rating_%_to_gain_as_armour",
            Stat::EvasionRatingWhenOnFullLife(_) => "evasion_rating_+%_when_on_full_life",
            Stat::EvasionRatingWhileSurrounded(_) => "evasion_rating_+%_while_surrounded",
            Stat::EvasionRatingWhileYouHaveEnergyShield(_) => "evasion_rating_+%_while_you_have_energy_shield",
            Stat::ExpeditionMonstersLogbookChance(_) => "expedition_monsters_logbook_chance_+%",
            Stat::ExposureYouInflictLowersAffectedResistanceByExtra(_) => "exposure_you_inflict_lowers_affected_resistance_by_extra_%",
            Stat::ExtraDamageRollsWithLightningDamageOnNonCriticalHits(_) => "extra_damage_rolls_with_lightning_damage_on_non_critical_hits",
            Stat::FasterBleed(_) => "faster_bleed_%",
            Stat::FasterBurn(_) => "faster_burn_%",
            Stat::FinalRepeatOfSpellsAreaOfEffect(_) => "final_repeat_of_spells_area_of_effect_+%",
            Stat::FireDamage(_) => "fire_damage_+%",
            Stat::FireDamageWhileAffectedByHeraldOfAsh(_) => "fire_damage_+%_while_affected_by_herald_of_ash",
            Stat::FireExposureEffect(_) => "fire_exposure_effect_+%",
            Stat::FireExposureYouInflictLowersFireResistanceByExtra(_) => "fire_exposure_you_inflict_lowers_fire_resistance_by_extra_%",
            Stat::FlailAttackSpeed(_) => "flail_attack_speed_+%",
            Stat::FlailCriticalStrikeChance(_) => "flail_critical_strike_chance_+%",
            Stat::FlailCriticalStrikeMultiplier(_) => "flail_critical_strike_multiplier_+",
            Stat::FlailDamage(_) => "flail_damage_+%",
            Stat::FlaskChargesGained(_) => "flask_charges_gained_+%",
            Stat::FlaskChargesUsed(_) => "flask_charges_used_+%",
            Stat::FlaskDuration(_) => "flask_duration_+%",
            Stat::FlaskEffect(_) => "flask_effect_+%",
            Stat::FlaskLifeAndManaRecoveryWhileUsingCharm(_) => "flask_life_and_mana_recovery_+%_while_using_charm",
            Stat::FlaskLifeAndManaToRecover(_) => "flask_life_and_mana_to_recover_+%",
            Stat::FlaskLifeRecoveryRate(_) => "flask_life_recovery_rate_+%",
            Stat::FlaskLifeToRecover(_) => "flask_life_to_recover_+%",
            Stat::FlaskManaChargesUsed(_) => "flask_mana_charges_used_+%",
            Stat::FlaskManaToRecover(_) => "flask_mana_to_recover_+%",
            Stat::FlasksChanceToNotConsumeCharges(_) => "flasks_%_chance_to_not_consume_charges",
            Stat::FocusDecayDelayMs(_) => "focus_decay_delay_ms",
            Stat::FocusDecayPerMinute(_) => "focus_decay_%_per_minute",
            Stat::FreezeDuration(_) => "freeze_duration_+%",
            Stat::FreezeThreshold(_) => "freeze_threshold_+%",
            Stat::GainAccuracyRatingEqualToIntelligence(_) => "gain_accuracy_rating_equal_to_intelligence",
            Stat::GainAccuracyRatingEqualToStrength(_) => "gain_accuracy_rating_equal_to_strength",
            Stat::GainArcaneSurgeOnCritChance(_) => "gain_arcane_surge_on_crit_%_chance",
            Stat::GainDamageAsChaosFromUnreservedDarkness(_) => "gain_%_damage_as_chaos_from_unreserved_darkness",
            Stat::GainEnduranceChargeOnHeavyStunningRareOrUniqueEnemy(_) => "gain_endurance_charge_on_heavy_stunning_rare_or_unique_enemy",
            Stat::GainGuardFlaskChargeWhenHitByEnemyChance(_) => "gain_guard_flask_charge_when_hit_by_enemy_chance_%",
            Stat::GainLifeFromBodyEs(_) => "gain_%_life_from_body_es",
            Stat::GainMaxRageOnRageGainFromHitChance(_) => "gain_max_rage_on_rage_gain_from_hit_%_chance",
            Stat::GainMaximumEnduranceChargesOnEnduranceChargeGainedChance(_) => "gain_maximum_endurance_charges_on_endurance_charge_gained_%_chance",
            Stat::GainMaximumEnergyShieldAsFreezeThreshold(_) => "gain_%_maximum_energy_shield_as_freeze_threshold_+",
            Stat::GainMaximumFrenzyChargesOnFrenzyChargeGainedChance(_) => "gain_maximum_frenzy_charges_on_frenzy_charge_gained_%_chance",
            Stat::GainMaximumPowerChargesOnPowerChargeGainedChance(_) => "gain_maximum_power_charges_on_power_charge_gained_%_chance",
            Stat::GainTailwindStackOnSkillUse(_) => "gain_tailwind_stack_on_skill_use",
            Stat::GainUnboundAilmentStacks(_) => "gain_unbound_ailment_stacks",
            Stat::GainXRageOnHitWithAxes(_) => "gain_x_rage_on_hit_with_axes",
            Stat::GainXRageOnMeleeHit(_) => "gain_x_rage_on_melee_hit",
            Stat::GainXRageWhenHit(_) => "gain_x_rage_when_hit",
            Stat::GemRequirementsCanBeSatisfiedByHighestAttribute(_) => "gem_requirements_can_be_satisfied_by_highest_attribute",
            Stat::GemlingDoubleBasicAttributeBonuses(_) => "gemling_double_basic_attribute_bonuses",
            Stat::GemlingSkillCostFinal(_) => "gemling_skill_cost_+%_final",
            Stat::GenerateXChargesForCharmsPerMinute(_) => "generate_x_charges_for_charms_per_minute",
            Stat::GenerateXChargesForLifeFlasksPerMinute(_) => "generate_x_charges_for_life_flasks_per_minute",
            Stat::GenerateXChargesForManaFlasksPerMinute(_) => "generate_x_charges_for_mana_flasks_per_minute",
            Stat::GlobalChanceToBlindOnHit(_) => "global_chance_to_blind_on_hit_%",
            Stat::GlobalDefences(_) => "global_defences_+%",
            Stat::GlobalGemAttributeRequirementsFinalFromGemling(_) => "global_gem_attribute_requirements_+%_final_from_gemling",
            Stat::GlobalItemAttributeRequirements(_) => "global_item_attribute_requirements_+%",
            Stat::GrenadeFuseDuration(_) => "grenade_fuse_duration_+%",
            Stat::GrenadeSkillAreaOfEffect(_) => "grenade_skill_area_of_effect_+%",
            Stat::GrenadeSkillChanceToExplodeTwice(_) => "grenade_skill_%_chance_to_explode_twice",
            Stat::GrenadeSkillCooldownCount(_) => "grenade_skill_cooldown_count_+",
            Stat::GrenadeSkillCooldownSpeed(_) => "grenade_skill_cooldown_speed_+%",
            Stat::GrenadeSkillDamage(_) => "grenade_skill_damage_+%",
            Stat::GrenadeSkillNumberOfAdditionalProjectiles(_) => "grenade_skill_number_of_additional_projectiles",
            Stat::GuardFlaskEffect(_) => "guard_flask_effect_+%",
            Stat::HeavyStunPoiseDecayRate(_) => "heavy_stun_poise_decay_rate_+%",
            Stat::HeavyStunsHaveCullingStrike(_) => "heavy_stuns_have_culling_strike",
            Stat::HellhoundTakesDamageBeforeYou(_) => "hellhound_takes_%_damage_before_you",
            Stat::HeraldSkillsManaReservation(_) => "herald_skills_mana_reservation_+%",
            Stat::HinderDuration(_) => "hinder_duration_+%",
            Stat::HitDamageElectrocuteMultiplier(_) => "hit_damage_electrocute_multiplier_+%",
            Stat::HitDamageElectrocuteMultiplierVsShockedEnemies(_) => "hit_damage_electrocute_multiplier_+%_vs_shocked_enemies",
            Stat::HitDamageFreezeMultiplier(_) => "hit_damage_freeze_multiplier_+%",
            Stat::HitDamagePinMultiplier(_) => "hit_damage_pin_multiplier_+%",
            Stat::HitDamageStunMultiplier(_) => "hit_damage_stun_multiplier_+%",
            Stat::HitDamageStunMultiplierVsEnemiesAtCloseRange(_) => "hit_damage_stun_multiplier_+%_vs_enemies_at_close_range",
            Stat::HitDamageStunMultiplierVsEnemiesOnLowLife(_) => "hit_damage_stun_multiplier_+%_vs_enemies_on_low_life",
            Stat::HitDamageStunMultiplierWithCrits(_) => "hit_damage_stun_multiplier_+%_with_crits",
            Stat::HitDamageVsChilledEnemies(_) => "hit_damage_+%_vs_chilled_enemies",
            Stat::HitDamageVsEnemiesAffectedByAilments(_) => "hit_damage_+%_vs_enemies_affected_by_ailments",
            Stat::HitDamageVsIgnitedEnemies(_) => "hit_damage_+%_vs_ignited_enemies",
            Stat::HitForMaxLifeEsOnMaxInfernalFlame(_) => "hit_for_%_max_life_es_on_max_infernal_flame",
            Stat::HitsIgnoreElementalResistancesVsFrozenEnemies(_) => "hits_ignore_elemental_resistances_vs_frozen_enemies",
            Stat::IceCrystalMaximumLife(_) => "ice_crystal_maximum_life_+%",
            Stat::IgniteChance(_) => "ignite_chance_+%",
            Stat::IgniteDuration(_) => "ignite_duration_+%",
            Stat::IgniteEffectOnSelf(_) => "ignite_effect_on_self_+%",
            Stat::IgniteShockChillDuration(_) => "ignite_shock_chill_duration_+%",
            Stat::IgnitesApplyFireResistance(_) => "ignites_apply_fire_resistance_+",
            Stat::InfernalFlameInsteadOfMana(_) => "infernal_flame_instead_of_mana",
            Stat::InfernalistBurnLifeAndEsPerSecondIfCritRecently(_) => "infernalist_burn_life_and_es_%_per_second_if_crit_recently",
            Stat::InfernalistCriticalStrikeMultiplierFinal(_) => "infernalist_critical_strike_multiplier_+%_final",
            Stat::InflictFireExposureOnHitsThatHeavyStun(_) => "inflict_fire_exposure_on_hits_that_heavy_stun",
            Stat::InflictWitheredForXSecondsOnUnwitheredEnemiesWhenTheyEnterYourPresence(_) => "inflict_withered_for_x_seconds_on_unwithered_enemies_when_they_enter_your_presence",
            Stat::Intelligence(_) => "intelligence_+%",
            Stat::JaggedGroundDuration(_) => "jagged_ground_duration_+%",
            Stat::JaggedGroundEffect(_) => "jagged_ground_effect_+%",
            Stat::JaggedGroundEnemyDamageTaken(_) => "jagged_ground_enemy_damage_taken_+%",
            Stat::KeystoneAcrobatics(_) => "keystone_acrobatics",
            Stat::KeystoneAncestralBond(_) => "keystone_ancestral_bond",
            Stat::KeystoneAvatarOfFire(_) => "keystone_avatar_of_fire",
            Stat::KeystoneBloodMagic(_) => "keystone_blood_magic",
            Stat::KeystoneBulwark(_) => "keystone_bulwark",
            Stat::KeystoneChaosInoculation(_) => "keystone_chaos_inoculation",
            Stat::KeystoneChargeCycle(_) => "keystone_charge_cycle",
            Stat::KeystoneConduit(_) => "keystone_conduit",
            Stat::KeystoneDanceWithDeath(_) => "keystone_dance_with_death",
            Stat::KeystoneEldritchBattery(_) => "keystone_eldritch_battery",
            Stat::KeystoneElementalEquilibrium(_) => "keystone_elemental_equilibrium",
            Stat::KeystoneEternalYouth(_) => "keystone_eternal_youth",
            Stat::KeystoneGiantsBlood(_) => "keystone_giants_blood",
            Stat::KeystoneGlancingBlows(_) => "keystone_glancing_blows",
            Stat::KeystoneHeartstopper(_) => "keystone_heartstopper",
            Stat::KeystoneHexMaster(_) => "keystone_hex_master",
            Stat::KeystoneIronReflexes(_) => "keystone_iron_reflexes",
            Stat::KeystoneManaShield(_) => "keystone_mana_shield",
            Stat::KeystoneOasis(_) => "keystone_oasis",
            Stat::KeystonePainAttunement(_) => "keystone_pain_attunement",
            Stat::KeystoneUnwaveringStance(_) => "keystone_unwavering_stance",
            Stat::KeystoneVaalPact(_) => "keystone_vaal_pact",
            Stat::KeystoneZealotsOath(_) => "keystone_zealots_oath",
            Stat::KnockbackChanceAtCloseRange(_) => "knockback_chance_%_at_close_range",
            Stat::KnockbackDistance(_) => "knockback_distance_+%",
            Stat::KnockbackOnCritWithQuarterstaff(_) => "knockback_on_crit_with_quarterstaff",
            Stat::LeechIsInstant(_) => "leech_%_is_instant",
            Stat::LifeFlaskChargesGained(_) => "life_flask_charges_gained_+%",
            Stat::LifeFlaskEffectsAreNotRemovedAtFullLife(_) => "life_flask_effects_are_not_removed_at_full_life",
            Stat::LifeGainedOnBlock(_) => "life_gained_on_block",
            Stat::LifeRecoveryFromFlasksWhileOnLowLife(_) => "life_recovery_+%_from_flasks_while_on_low_life",
            Stat::LifeRecoveryRate(_) => "life_recovery_rate_+%",
            Stat::LifeRegenerateRatePerSecondWhileTotemActive(_) => "life_regenerate_rate_per_second_%_while_totem_active",
            Stat::LifeRegenerationRate(_) => "life_regeneration_rate_+%",
            Stat::LifeRegenerationRatePerMinute(_) => "life_regeneration_rate_per_minute_%",
            Stat::LifeRegenerationRatePerMinuteIfHaveBeenHitRecently(_) => "life_regeneration_rate_per_minute_%_if_have_been_hit_recently",
            Stat::LifeRegenerationRatePerMinuteWhenOnLowLife(_) => "life_regeneration_rate_per_minute_%_when_on_low_life",
            Stat::LifeRegenerationRatePerMinuteWhileAffectedByDamagingAilment(_) => "life_regeneration_rate_per_minute_%_while_affected_by_damaging_ailment",
            Stat::LifeRegenerationRatePerMinuteWhileStationary(_) => "life_regeneration_rate_per_minute_%_while_stationary",
            Stat::LifeRegenerationRatePerMinuteWhileSurrounded(_) => "life_regeneration_rate_per_minute_%_while_surrounded",
            Stat::LifeRegenerationRateWhileMoving(_) => "life_regeneration_rate_+%_while_moving",
            Stat::LifeRegenerationRateWhileOnLowLife(_) => "life_regeneration_rate_+%_while_on_low_life",
            Stat::LifeRegenerationRateWhileStationary(_) => "life_regeneration_rate_+%_while_stationary",
            Stat::LifeRegenerationRateWhileUsingLifeFlask(_) => "life_regeneration_rate_+%_while_using_life_flask",
            Stat::LifeRemnantsGainPerGlobe(_) => "life_remnants_gain_per_globe",
            Stat::LifeReservedByStat(_) => "life_reserved_by_stat_%",
            Stat::LightRadius(_) => "light_radius_+%",
            Stat::LightningDamage(_) => "lightning_damage_+%",
            Stat::LightningDamageWhileAffectedByHeraldOfThunder(_) => "lightning_damage_+%_while_affected_by_herald_of_thunder",
            Stat::LightningExposureEffect(_) => "lightning_exposure_effect_+%",
            Stat::LightningHitAndDotDamageTakenAsFire(_) => "lightning_hit_and_dot_damage_%_taken_as_fire",
            Stat::LightningPenetrationWhileOnLowMana(_) => "lightning_penetration_%_while_on_low_mana",
            Stat::LightningSkillAdditionalChainChance(_) => "lightning_skill_additional_chain_chance_%",
            Stat::LinkSkillBuffEffect(_) => "link_skill_buff_effect_+%",
            Stat::LinkSkillCastSpeed(_) => "link_skill_cast_speed_+%",
            Stat::LinkSkillDuration(_) => "link_skill_duration_+%",
            Stat::LinkSkillsCanTargetMinions(_) => "link_skills_can_target_minions",
            Stat::LinkToXAdditionalRandomAllies(_) => "link_to_X_additional_random_allies",
            Stat::LoseAllTailwindWhenHit(_) => "lose_all_tailwind_when_hit",
            Stat::LoseOfInfernalFlameOnReachingMax(_) => "lose_%_of_infernal_flame_on_reaching_max",
            Stat::LoseOfLifeAndEnergyShieldWhenYouUseAChaosSkill(_) => "lose_%_of_life_and_energy_shield_when_you_use_a_chaos_skill",
            Stat::LoseOfMaxInfernalFlamePerMinute(_) => "lose_%_of_max_infernal_flame_per_minute",
            Stat::MaceDamage(_) => "mace_damage_+%",
            Stat::MaceHitDamageStunMultiplier(_) => "mace_hit_damage_stun_multiplier_+%",
            Stat::MaceSlamAftershockChance(_) => "mace_slam_aftershock_chance_%",
            Stat::MaceStrikeAftershockChance(_) => "mace_strike_aftershock_chance_%",
            Stat::MaimOnHit(_) => "maim_on_hit_%",
            Stat::MaimOnHitVsPoisonedEnemies(_) => "maim_on_hit_%_vs_poisoned_enemies",
            Stat::ManaCostWhileNotLowMana(_) => "mana_cost_+%_while_not_low_mana",
            Stat::ManaFlaskChargesGained(_) => "mana_flask_charges_gained_+%",
            Stat::ManaGainedOnBlock(_) => "mana_gained_on_block",
            Stat::ManaLeechAppliesRecoveryToEnergyShieldAlso(_) => "mana_leech_applies_recovery_to_energy_shield_also",
            Stat::ManaRecoveryRate(_) => "mana_recovery_rate_+%",
            Stat::ManaRecoveryRateWhileAffectedByAManaFlask(_) => "mana_recovery_rate_+%_while_affected_by_a_mana_flask",
            Stat::ManaRegenerationRate(_) => "mana_regeneration_rate_+%",
            Stat::ManaRegenerationRateIfEnemyShockedRecently(_) => "mana_regeneration_rate_+%_if_enemy_shocked_recently",
            Stat::ManaRegenerationRateWhileMoving(_) => "mana_regeneration_rate_+%_while_moving",
            Stat::ManaRegenerationRateWhileNotOnLowMana(_) => "mana_regeneration_rate_+%_while_not_on_low_mana",
            Stat::ManaRegenerationRateWhileStationary(_) => "mana_regeneration_rate_+%_while_stationary",
            Stat::MapAfflictionEncounterBossChance(_) => "map_affliction_encounter_boss_chance_+%",
            Stat::MapAfflictionRewardProgressOnKill(_) => "map_affliction_reward_progress_on_kill_+%",
            Stat::MapAfflictionSecondaryWaveAcceleration(_) => "map_affliction_secondary_wave_acceleration_+%",
            Stat::MapBasicCurrencyDropChanceInSwampAndWaterBiome(_) => "map_basic_currency_drop_chance_+%_in_swamp_and_water_biome",
            Stat::MapBossAreaChanceToBeCorrupted(_) => "map_boss_area_chance_to_be_corrupted_%",
            Stat::MapBossDamage(_) => "map_boss_damage_+%",
            Stat::MapBossDroppedItemQuantity(_) => "map_boss_dropped_item_quantity_+%",
            Stat::MapBossExperienceFinal(_) => "map_boss_experience_+%_final",
            Stat::MapBossItemRarity(_) => "map_boss_item_rarity_+%",
            Stat::MapBossMaximumLife(_) => "map_boss_maximum_life_+%",
            Stat::MapBossingDifficulty(_) => "map_bossing_difficulty_+",
            Stat::MapBreachChanceToBeGuardedByMagicPack(_) => "map_breach_chance_to_be_guarded_by_magic_pack_%",
            Stat::MapBreachChestsDropDoubleSplintersChance(_) => "map_breach_chests_drop_double_splinters_chance_%",
            Stat::MapBreachChestsFinal(_) => "map_breach_chests_+%_final",
            Stat::MapBreachDomainDifficulty(_) => "map_breach_domain_difficulty_+",
            Stat::MapBreachHandsInflictWakingNightmare(_) => "map_breach_hands_inflict_waking_nightmare",
            Stat::MapBreachMonsterQuantity(_) => "map_breach_monster_quantity_+%",
            Stat::MapBreachMonsterSplinterQuantity(_) => "map_breach_monster_splinter_quantity_+%",
            Stat::MapBreachRaresCatalystFullStackChance(_) => "map_breach_rares_catalyst_full_stack_chance_%",
            Stat::MapBreachRaresHaveSoulEater(_) => "map_breach_rares_have_soul_eater",
            Stat::MapBreachTimePassed(_) => "map_breach_time_passed_+%",
            Stat::MapDeliriumAdditionalRewardTypeChance(_) => "map_delirium_additional_reward_type_chance_%",
            Stat::MapDeliriumBossLife(_) => "map_delirium_boss_life_+%",
            Stat::MapDeliriumBossSplinterAmount(_) => "map_delirium_boss_splinter_amount_+%",
            Stat::MapDeliriumDaemonDamage(_) => "map_delirium_daemon_damage_+%",
            Stat::MapDeliriumDifficultyScalingFromMirrorIsDouble(_) => "map_delirium_difficulty_scaling_from_mirror_is_double",
            Stat::MapDeliriumDoodadsFinal(_) => "map_delirium_doodads_+%_final",
            Stat::MapDroppedMapsRarity(_) => "map_dropped_maps_rarity_+%",
            Stat::MapDuplicateXRareMonsters(_) => "map_duplicate_x_rare_monsters",
            Stat::MapExpeditionArtifactQuantity(_) => "map_expedition_artifact_quantity_+%",
            Stat::MapExpeditionChestMarkerCount(_) => "map_expedition_chest_marker_count_+",
            Stat::MapExpeditionChestsDespawnAfterXSeconds(_) => "map_expedition_chests_despawn_after_X_seconds",
            Stat::MapExpeditionEliteMarkerCount(_) => "map_expedition_elite_marker_count_+%",
            Stat::MapExpeditionFuseBurnTime(_) => "map_expedition_fuse_burn_time_+%",
            Stat::MapExpeditionRareMonsters(_) => "map_expedition_rare_monsters_+%",
            Stat::MapExpeditionRelicModEffect(_) => "map_expedition_relic_mod_effect_+%",
            Stat::MapExpeditionVendorRerollCurrencyQuantity(_) => "map_expedition_vendor_reroll_currency_quantity_+%",
            Stat::MapExpeditionXExtraRelicPrefixes(_) => "map_expedition_x_extra_relic_prefixes",
            Stat::MapExpeditionXExtraRelicSuffixes(_) => "map_expedition_x_extra_relic_suffixes",
            Stat::MapFinalBossMapKeyOfAtLeastSameTierAsCurrentMapDropChance(_) => "map_final_boss_map_key_of_at_least_same_tier_as_current_map_drop_chance_%",
            Stat::MapGoldDropChanceInMountainBiome(_) => "map_gold_drop_chance_+%_in_mountain_biome",
            Stat::MapItemDropQuantity(_) => "map_item_drop_quantity_+%",
            Stat::MapItemDropRarity(_) => "map_item_drop_rarity_+%",
            Stat::MapJewelDropChanceInForestBiome(_) => "map_jewel_drop_chance_+%_in_forest_biome",
            Stat::MapKillingRareMonstersPausesDeliriumMirrorTimerForXSeconds(_) => "map_killing_rare_monsters_pauses_delirium_mirror_timer_for_x_seconds",
            Stat::MapLogbookDifficulty(_) => "map_logbook_difficulty_+",
            Stat::MapMagicChestAmount(_) => "map_magic_chest_amount_+%",
            Stat::MapMagicPackSize(_) => "map_magic_pack_size_+%",
            Stat::MapMapItemDropChance(_) => "map_map_item_drop_chance_+%",
            Stat::MapMapsDropWithDistilledEmotionsAppliedChance(_) => "map_maps_drop_with_distilled_emotions_applied_chance_%",
            Stat::MapModEffect(_) => "map_mod_effect_+%",
            Stat::MapModEffectPerMod(_) => "map_mod_effect_+%_per_mod",
            Stat::MapModEffectPerTowerAffectingArea(_) => "map_mod_effect_+%_per_tower_affecting_area",
            Stat::MapMonolithChance(_) => "map_monolith_chance_%",
            Stat::MapMonsterTre(_) => "map_monster_tre_+%",
            Stat::MapNonUniqueDeliriumMonstersSplinterAmount(_) => "map_non_unique_delirium_monsters_splinter_amount_+%",
            Stat::MapNumberOfMagicPacks(_) => "map_number_of_magic_packs_+%",
            Stat::MapNumberOfRarePacks(_) => "map_number_of_rare_packs_+%",
            Stat::MapPackSize(_) => "map_pack_size_+%",
            Stat::MapPinnacleBossAdditionalUniqueDropChance(_) => "map_pinnacle_boss_additional_unique_drop_chance_%",
            Stat::MapPinnacleBossDifficulty(_) => "map_pinnacle_boss_difficulty_+",
            Stat::MapPinnacleBossDropsXCorruptedRareTablets(_) => "map_pinnacle_boss_drops_X_corrupted_rare_tablets",
            Stat::MapPinnacleBossDropsXWaystones(_) => "map_pinnacle_boss_drops_X_waystones",
            Stat::MapPinnacleBossItemDroppedRarityFinal(_) => "map_pinnacle_boss_item_dropped_rarity_+%_final",
            Stat::MapPinnacleBossRareSocketCurrencyChance(_) => "map_pinnacle_boss_rare_socket_currency_chance_%",
            Stat::MapPinnacleBossSpecialGemDropChance(_) => "map_pinnacle_boss_special_gem_drop_chance_%",
            Stat::MapPlayerDamageTakenVsBreachMonsters(_) => "map_player_damage_taken_+%_vs_breach_monsters",
            Stat::MapPlayerShrineBuffEffectOnSelf(_) => "map_player_shrine_buff_effect_on_self_+%",
            Stat::MapPlayerShrineEffectDuration(_) => "map_player_shrine_effect_duration_+%",
            Stat::MapRareChestAmount(_) => "map_rare_chest_amount_+%",
            Stat::MapRitualAdditionalDaemon(_) => "map_ritual_additional_daemon",
            Stat::MapRitualAdditionalRewardRerolls(_) => "map_ritual_additional_reward_rerolls",
            Stat::MapRitualAdditionalWildwoodPacks(_) => "map_ritual_additional_wildwood_packs",
            Stat::MapRitualContainsWildwoodWisp(_) => "map_ritual_contains_wildwood_wisp",
            Stat::MapRitualDaemonDamage(_) => "map_ritual_daemon_damage_+%",
            Stat::MapRitualDeferRewardTributeCost(_) => "map_ritual_defer_reward_tribute_cost_+%",
            Stat::MapRitualDeferredRewardsAreOfferedAgainSooner(_) => "map_ritual_deferred_rewards_are_offered_again_+%_sooner",
            Stat::MapRitualEncounterCountIsFour(_) => "map_ritual_encounter_count_is_four",
            Stat::MapRitualMagicMonsters(_) => "map_ritual_magic_monsters_+%",
            Stat::MapRitualMonsterDamageForEachTimeRevived(_) => "map_ritual_monster_damage_+%_for_each_time_revived",
            Stat::MapRitualMonsterSpawningSpeed(_) => "map_ritual_monster_spawning_speed_+%",
            Stat::MapRitualMonsterTankinessForEachTimeRevived(_) => "map_ritual_monster_tankiness_+%_for_each_time_revived",
            Stat::MapRitualNoRevivePenalty(_) => "map_ritual_no_revive_penalty",
            Stat::MapRitualOmenChance(_) => "map_ritual_omen_chance_+%",
            Stat::MapRitualRareMonsters(_) => "map_ritual_rare_monsters_+%",
            Stat::MapRitualRewardsRerollCostFinal(_) => "map_ritual_rewards_reroll_cost_+%_final",
            Stat::MapRitualVoodooKingKeyChance(_) => "map_ritual_voodoo_king_key_chance_+%",
            Stat::MapSanctumAndUltimatumKeyDropChanceInDesertBiome(_) => "map_sanctum_and_ultimatum_key_drop_chance_+%_in_desert_biome",
            Stat::MapShrineChance(_) => "map_shrine_chance_%",
            Stat::MapSimulacrumDifficulty(_) => "map_simulacrum_difficulty_+",
            Stat::MapSocketCurrencyDropChanceInGrassBiome(_) => "map_socket_currency_drop_chance_+%_in_grass_biome",
            Stat::MapStrongboxChance(_) => "map_strongbox_chance_%",
            Stat::MapStrongboxModEffect(_) => "map_strongbox_mod_effect_+%",
            Stat::MapTierBonusPermillage(_) => "map_tier_bonus_permillage",
            Stat::MapTowerAugmentQuantity(_) => "map_tower_augment_quantity_+%",
            Stat::MapVoodooKingDifficulty(_) => "map_voodoo_king_difficulty_+",
            Stat::MapsBossDropAdditionalBonusMapChance(_) => "maps_boss_drop_additional_bonus_map_chance_%",
            Stat::MapsWithBossesAdditionalEssence(_) => "maps_with_bosses_additional_essence_+",
            Stat::MapsWithBossesAdditionalShrine(_) => "maps_with_bosses_additional_shrine_+",
            Stat::MapsWithBossesAdditionalStrongbox(_) => "maps_with_bosses_additional_strongbox_+",
            Stat::MapsWithBossesAreIrradiated(_) => "maps_with_bosses_are_irradiated",
            Stat::MarkEffect(_) => "mark_effect_+%",
            Stat::MarkSkillCastSpeed(_) => "mark_skill_cast_speed_+%",
            Stat::MarkSkillDuration(_) => "mark_skill_duration_+%",
            Stat::MarkSkillManaCost(_) => "mark_skill_mana_cost_+%",
            Stat::MarkedEnemiesCannotDealCriticalStrikes(_) => "marked_enemies_cannot_deal_critical_strikes",
            Stat::MarkedEnemyAccuracyRating(_) => "marked_enemy_accuracy_rating_+%",
            Stat::MarkedEnemyDamageTaken(_) => "marked_enemy_damage_taken_+%",
            Stat::MasterOfElementsEvasionRatingFinal(_) => "master_of_elements_evasion_rating_+%_final",
            Stat::MasteryChanceToEvadeMeleeAttacksFinal(_) => "mastery_chance_to_evade_melee_attacks_+%_final",
            Stat::MaxDemonFormStacks(_) => "max_demon_form_stacks",
            Stat::MaxEnduranceCharges(_) => "max_endurance_charges",
            Stat::MaxFrenzyCharges(_) => "max_frenzy_charges",
            Stat::MaxJadeStacks(_) => "max_jade_stacks",
            Stat::MaxPowerCharges(_) => "max_power_charges",
            Stat::MaximumDarkness(_) => "maximum_darkness_+%",
            Stat::MaximumEnergyShield(_) => "maximum_energy_shield_+%",
            Stat::MaximumEnergyShieldFromBodyArmour(_) => "maximum_energy_shield_from_body_armour_+%",
            Stat::MaximumLife(_) => "maximum_life_+%",
            Stat::MaximumLifeAsFocus(_) => "%_maximum_life_as_focus",
            Stat::MaximumLifeManaAndEnergyShield(_) => "maximum_life_mana_and_energy_shield_+%",
            Stat::MaximumLifeToGainAsMaximumEnergyShield(_) => "maximum_life_%_to_gain_as_maximum_energy_shield",
            Stat::MaximumMana(_) => "maximum_mana_+%",
            Stat::MaximumManaGainedOnKill(_) => "maximum_mana_%_gained_on_kill",
            Stat::MaximumRage(_) => "maximum_rage",
            Stat::MaximumRageWhileWieldingAxe(_) => "maximum_rage_+_while_wielding_axe",
            Stat::MeleeAttackSpeed(_) => "melee_attack_speed_+%",
            Stat::MeleeCriticalStrikeChance(_) => "melee_critical_strike_chance_+%",
            Stat::MeleeCriticalStrikeChanceWhenOnFullLife(_) => "melee_critical_strike_chance_+%_when_on_full_life",
            Stat::MeleeDamage(_) => "melee_damage_+%",
            Stat::MeleeDamageAtCloseRange(_) => "melee_damage_+%_at_close_range",
            Stat::MeleeDamageVsHeavyStunnedEnemies(_) => "melee_damage_+%_vs_heavy_stunned_enemies",
            Stat::MeleeDamageVsImmobilisedEnemies(_) => "melee_damage_+%_vs_immobilised_enemies",
            Stat::MeleeDamageWhenOnFullLife(_) => "melee_damage_+%_when_on_full_life",
            Stat::MeleeHitDamageStunMultiplier(_) => "melee_hit_damage_stun_multiplier_+%",
            Stat::MeleeRange(_) => "melee_range_+",
            Stat::MinionAccuracyRating(_) => "minion_accuracy_rating",
            Stat::MinionAdditionalPhysicalDamageReduction(_) => "minion_additional_physical_damage_reduction_%",
            Stat::MinionAttackAndCastSpeed(_) => "minion_attack_and_cast_speed_+%",
            Stat::MinionChaosResistance(_) => "minion_chaos_resistance_%",
            Stat::MinionColdDamageResistance(_) => "minion_cold_damage_resistance_%",
            Stat::MinionCooldownRecovery(_) => "minion_cooldown_recovery_+%",
            Stat::MinionCriticalStrikeChance(_) => "minion_critical_strike_chance_+%",
            Stat::MinionCriticalStrikeMultiplier(_) => "minion_critical_strike_multiplier_+",
            Stat::MinionDamage(_) => "minion_damage_+%",
            Stat::MinionDamageTakenRecoupedAsTheirLife(_) => "minion_damage_taken_%_recouped_as_their_life",
            Stat::MinionDamageWhileYouHaveAtLeastTwoDifferentActiveOfferings(_) => "minion_damage_+%_while_you_have_at_least_two_different_active_offerings",
            Stat::MinionElementalResistance(_) => "minion_elemental_resistance_%",
            Stat::MinionEvasionRating(_) => "minion_evasion_rating_+%",
            Stat::MinionFireDamageResistance(_) => "minion_fire_damage_resistance_%",
            Stat::MinionLifeRecoveryRate(_) => "minion_life_recovery_rate_+%",
            Stat::MinionLifeRegenerationRatePerMinute(_) => "minion_life_regeneration_rate_per_minute_%",
            Stat::MinionLightningDamageResistance(_) => "minion_lightning_damage_resistance_%",
            Stat::MinionMaximumAllElementalResistances(_) => "minion_maximum_all_elemental_resistances_%",
            Stat::MinionMaximumLife(_) => "minion_maximum_life_+%",
            Stat::MinionMaximumLifeToGainAsMaximumEnergyShield(_) => "minion_maximum_life_%_to_gain_as_maximum_energy_shield",
            Stat::MinionMovementSpeed(_) => "minion_movement_speed_+%",
            Stat::MinionReservation(_) => "minion_reservation_+%",
            Stat::MinionResummonSpeed(_) => "minion_resummon_speed_+%",
            Stat::MinionSkillAreaOfEffect(_) => "minion_skill_area_of_effect_+%",
            Stat::MinionsDealOfPhysicalDamageAsAdditionalChaosDamage(_) => "minions_deal_%_of_physical_damage_as_additional_chaos_damage",
            Stat::MinionsGainYourDexterity(_) => "minions_gain_your_dexterity",
            Stat::MinionsGetAmuletStatsInsteadOfYou(_) => "minions_get_amulet_stats_instead_of_you",
            Stat::MinionsHaveChanceToInflictWitherOnHit(_) => "minions_have_%_chance_to_inflict_wither_on_hit",
            Stat::MovementSpeedDuringFlaskEffect(_) => "movement_speed_+%_during_flask_effect",
            Stat::MovementSpeedIfCastAMarkSpellRecently(_) => "movement_speed_+%_if_cast_a_mark_spell_recently",
            Stat::MovementSpeedIfEnemyKilledRecently(_) => "movement_speed_+%_if_enemy_killed_recently",
            Stat::MovementSpeedIfPinnedEnemyRecently(_) => "movement_speed_+%_if_pinned_enemy_recently",
            Stat::MovementSpeedWhileDualWielding(_) => "movement_speed_+%_while_dual_wielding",
            Stat::MovementSpeedWhileUsingCharm(_) => "movement_speed_+%_while_using_charm",
            Stat::MovementSpeedWhileYouHaveEnergyShield(_) => "movement_speed_+%_while_you_have_energy_shield",
            Stat::NonDamagingAilmentEffect(_) => "non_damaging_ailment_effect_+%",
            Stat::NonDamagingAilmentEffectWithCriticalStrikes(_) => "non_damaging_ailment_effect_+%_with_critical_strikes",
            Stat::NonSkillBaseAllDamageToGainAsChaos(_) => "non_skill_base_all_damage_%_to_gain_as_chaos",
            Stat::NonSkillBaseAllDamageToGainAsCold(_) => "non_skill_base_all_damage_%_to_gain_as_cold",
            Stat::NonSkillBaseAllDamageToGainAsFire(_) => "non_skill_base_all_damage_%_to_gain_as_fire",
            Stat::NonSkillBaseAllDamageToGainAsLightning(_) => "non_skill_base_all_damage_%_to_gain_as_lightning",
            Stat::NonSkillBaseAllDamageToGainAsPhysical(_) => "non_skill_base_all_damage_%_to_gain_as_physical",
            Stat::NonSkillBaseLightningDamageToGainAsCold(_) => "non_skill_base_lightning_damage_%_to_gain_as_cold",
            Stat::NonSkillBasePhysicalDamageToGainAsChaos(_) => "non_skill_base_physical_damage_%_to_gain_as_chaos",
            Stat::NonSkillBasePhysicalDamageToGainAsFire(_) => "non_skill_base_physical_damage_%_to_gain_as_fire",
            Stat::NonSkillColdDamageToGainAsFireVsFrozenEnemies(_) => "non_skill_cold_damage_%_to_gain_as_fire_vs_frozen_enemies",
            Stat::NotableKnockbackDistanceFinalForBlockedHits(_) => "notable_knockback_distance_+%_final_for_blocked_hits",
            Stat::NumAdditionalSkillSlots(_) => "num_additional_skill_slots",
            Stat::NumCharmSlots(_) => "num_charm_slots",
            Stat::NumberOfAdditionalMarksAllowed(_) => "number_of_additional_marks_allowed",
            Stat::NumberOfAdditionalPoisonStacks(_) => "number_of_additional_poison_stacks",
            Stat::NumberOfAdditionalProjectiles(_) => "number_of_additional_projectiles",
            Stat::NumberOfInfernalFamiliarsAllowed(_) => "number_of_infernal_familiars_allowed",
            Stat::OfferingAreaOfEffect(_) => "offering_area_of_effect_+%",
            Stat::OfferingDuration(_) => "offering_duration_+%",
            Stat::OfferingLife(_) => "offering_life_+%",
            Stat::OneHandedAttackAilmentChance(_) => "one_handed_attack_ailment_chance_+%",
            Stat::OneHandedAttackSpeed(_) => "one_handed_attack_speed_+%",
            Stat::OneHandedMeleeAccuracyRating(_) => "one_handed_melee_accuracy_rating_+%",
            Stat::OneHandedMeleeAttackSpeed(_) => "one_handed_melee_attack_speed_+%",
            Stat::OneHandedMeleeCriticalStrikeChance(_) => "one_handed_melee_critical_strike_chance_+%",
            Stat::OneHandedMeleeCriticalStrikeMultiplier(_) => "one_handed_melee_critical_strike_multiplier_+",
            Stat::PassiveTreeMaceDamageFinalVsHeavyStunnedEnemies(_) => "passive_tree_mace_damage_+%_final_vs_heavy_stunned_enemies",
            Stat::PathfinderAscendancyPoisonOnEnemiesYouKillSpreadToEnemiesWithinX(_) => "pathfinder_ascendancy_poison_on_enemies_you_kill_spread_to_enemies_within_x",
            Stat::PathfinderPoisonDurationFinal(_) => "pathfinder_poison_duration_+%_final",
            Stat::PhysicalAttackDamage(_) => "physical_attack_damage_+%",
            Stat::PhysicalDamage(_) => "physical_damage_+%",
            Stat::PhysicalDamageFromHitsTakenAsRandomElement(_) => "physical_damage_from_hits_%_taken_as_random_element",
            Stat::PhysicalDamagePreventedRecoupedAsLife(_) => "physical_damage_prevented_recouped_as_life_%",
            Stat::PhysicalDamageReductionRating(_) => "physical_damage_reduction_rating_+%",
            Stat::PhysicalDamageTakenRecoupedAsLife(_) => "physical_damage_taken_recouped_as_life_%",
            Stat::PhysicalHitAndDotDamageTakenAsChaos(_) => "physical_hit_and_dot_damage_%_taken_as_chaos",
            Stat::PlacingTrapsCooldownRecovery(_) => "placing_traps_cooldown_recovery_+%",
            Stat::PoisonDurationPerPoisonAppliedRecently(_) => "poison_duration_+%_per_poison_applied_recently",
            Stat::PoisonEffectVsNonPoisonedEnemies(_) => "poison_effect_+%_vs_non_poisoned_enemies",
            Stat::PowerChargeDuration(_) => "power_charge_duration_+%",
            Stat::ProjectileAilmentChance(_) => "projectile_ailment_chance_+%",
            Stat::ProjectileDamage(_) => "projectile_damage_+%",
            Stat::ProjectileHitDamageStunMultiplier(_) => "projectile_hit_damage_stun_multiplier_+%",
            Stat::QuarterstaffAccuracyRating(_) => "quarterstaff_accuracy_rating_+%",
            Stat::QuarterstaffAttackSpeed(_) => "quarterstaff_attack_speed_+%",
            Stat::QuarterstaffCriticalStrikeChance(_) => "quarterstaff_critical_strike_chance_+%",
            Stat::QuarterstaffCriticalStrikeMultiplier(_) => "quarterstaff_critical_strike_multiplier_+",
            Stat::QuarterstaffDamage(_) => "quarterstaff_damage_+%",
            Stat::QuarterstaffDazeBuildUp(_) => "quarterstaff_daze_build_up_+%",
            Stat::QuarterstaffHitDamageFreezeMultiplier(_) => "quarterstaff_hit_damage_freeze_multiplier_+%",
            Stat::QuarterstaffHitDamageStunMultiplier(_) => "quarterstaff_hit_damage_stun_multiplier_+%",
            Stat::QuarterstaffSkillsThatConsumePowerChargesCountAsConsumingXAdditionalPowerCharges(_) => "quarterstaff_skills_that_consume_power_charges_count_as_consuming_x_additional_power_charges",
            Stat::QuiverModEffect(_) => "quiver_mod_effect_+%",
            Stat::RageDecaySpeed(_) => "rage_decay_speed_+%",
            Stat::RageLossDelayMs(_) => "rage_loss_delay_ms",
            Stat::ReapplyEnemyShockOnConsumingEnemyShockChance(_) => "reapply_enemy_shock_on_consuming_enemy_shock_chance_%",
            Stat::RecoupElementalDamageAsEnergyShield(_) => "recoup_%_elemental_damage_as_energy_shield",
            Stat::RecoupSpeed(_) => "recoup_speed_+%",
            Stat::RecoverLifeOnHeavyStunningRareOrUniqueEnemy(_) => "recover_%_life_on_heavy_stunning_rare_or_unique_enemy",
            Stat::RecoverLifePerEnduranceChargeConsumed(_) => "recover_%_life_per_endurance_charge_consumed",
            Stat::RecoverLifeWhenYouCreateAnOffering(_) => "recover_%_life_when_you_create_an_offering",
            Stat::RecoverLifeWhenYouUseALifeFlaskWhileOnLowLife(_) => "recover_%_life_when_you_use_a_life_flask_while_on_low_life",
            Stat::RecoverManaWhenYouInvokeASpell(_) => "recover_%_mana_when_you_invoke_a_spell",
            Stat::RecoverMaximumLifeOnEnemyKilledChance(_) => "recover_maximum_life_on_enemy_killed_chance_%",
            Stat::RecoverMaximumLifeOnKill(_) => "recover_%_maximum_life_on_kill",
            Stat::RecoverMaximumLifeOnKillingPoisonedEnemy(_) => "recover_%_maximum_life_on_killing_poisoned_enemy",
            Stat::RecoverMaximumLifeOnManaFlaskUse(_) => "recover_%_maximum_life_on_mana_flask_use",
            Stat::RecoverMaximumManaOnCharmUse(_) => "recover_%_maximum_mana_on_charm_use",
            Stat::RecoverMaximumManaOnKill(_) => "recover_%_maximum_mana_on_kill",
            Stat::RecoverXLifeOnBlock(_) => "recover_X_life_on_block",
            Stat::ReduceEnemyElementalResistance(_) => "reduce_enemy_elemental_resistance_%",
            Stat::RefreshIgniteDurationOnCriticalStrikeChance(_) => "refresh_ignite_duration_on_critical_strike_chance_%",
            Stat::ReloadSpeed(_) => "reload_speed_+%",
            Stat::RemoveCurseOnManaFlaskUse(_) => "remove_curse_on_mana_flask_use",
            Stat::ResoluteTechnique(_) => "resolute_technique",
            Stat::RestoreLifeAndManaOnWarcry(_) => "restore_life_and_mana_on_warcry_%",
            Stat::ShieldArmour(_) => "shield_armour_+%",
            Stat::ShieldEvasionRating(_) => "shield_evasion_rating_+%",
            Stat::ShockChance(_) => "shock_chance_+%",
            Stat::ShockChanceVsElectrocutedEnemies(_) => "shock_chance_+%_vs_electrocuted_enemies",
            Stat::ShockDuration(_) => "shock_duration_+%",
            Stat::ShockEffect(_) => "shock_effect_+%",
            Stat::ShockEffectWithCriticalStrikes(_) => "shock_effect_+%_with_critical_strikes",
            Stat::SkillAreaOfEffectIfEnemyKilledRecently(_) => "skill_area_of_effect_+%_if_enemy_killed_recently",
            Stat::SkillAreaOfEffectWhenUnarmed(_) => "skill_area_of_effect_when_unarmed_+%",
            Stat::SkillCostBaseLifeEqualToBaseMana(_) => "skill_cost_base_life_equal_to_base_mana",
            Stat::SkillEffectDuration(_) => "skill_effect_duration_+%",
            Stat::SkillSpeed(_) => "skill_speed_+%",
            Stat::SlamAftershockChance(_) => "slam_aftershock_chance_%",
            Stat::SlamSkillAreaOfEffect(_) => "slam_skill_area_of_effect_+%",
            Stat::SlowsHaveNoPotencyOnYou(_) => "slows_have_no_potency_on_you",
            Stat::SmallPassivesEffect(_) => "small_passives_effect_+%",
            Stat::SorceryWardStrength(_) => "sorcery_ward_+%_strength",
            Stat::SpawnDefenderWithTotem(_) => "spawn_defender_with_totem",
            Stat::SpearAttackSpeed(_) => "spear_attack_speed_+%",
            Stat::SpearCriticalStrikeChance(_) => "spear_critical_strike_chance_+%",
            Stat::SpearDamage(_) => "spear_damage_+%",
            Stat::SpellAreaDamage(_) => "spell_area_damage_+%",
            Stat::SpellAreaOfEffect(_) => "spell_area_of_effect_+%",
            Stat::SpellCriticalStrikeChance(_) => "spell_critical_strike_chance_+%",
            Stat::SpellCriticalStrikeChanceWhileWieldingStaff(_) => "spell_critical_strike_chance_+%_while_wielding_staff",
            Stat::SpellCriticalStrikeMultiplierWhileWieldingStaff(_) => "spell_critical_strike_multiplier_+_while_wielding_staff",
            Stat::SpellDamage(_) => "spell_damage_+%",
            Stat::SpellDamageIfHaveCritRecently(_) => "spell_damage_+%_if_have_crit_recently",
            Stat::SpellDamageWhileEsFull(_) => "spell_damage_+%_while_es_full",
            Stat::SpellDamageWhileWieldingMeleeWeapon(_) => "spell_damage_+%_while_wielding_melee_weapon",
            Stat::SpellSkillGemLevel(_) => "spell_skill_gem_level_+",
            Stat::SpellSkillProjectileSpeed(_) => "spell_skill_projectile_speed_+%",
            Stat::SpellStaffDamage(_) => "spell_staff_damage_+%",
            Stat::Spirit(_) => "spirit_+%",
            Stat::StaffAttackAreaOfEffect(_) => "staff_attack_area_of_effect_+%",
            Stat::StormweaverChillEffectFinal(_) => "stormweaver_chill_effect_+%_final",
            Stat::StormweaverShockDurationFinal(_) => "stormweaver_shock_duration_+%_final",
            Stat::Strength(_) => "strength_+%",
            Stat::StunThreshold(_) => "stun_threshold_+%",
            Stat::StunThresholdBasedOnEnergyShieldInsteadOfLife(_) => "stun_threshold_based_on_%_energy_shield_instead_of_life",
            Stat::StunThresholdDuringEmpoweredAttacks(_) => "stun_threshold_+%_during_empowered_attacks",
            Stat::StunThresholdFromBaseArmourFromEquipment(_) => "stun_threshold_+_from_%_base_armour_from_equipment",
            Stat::StunThresholdFromLowestOfBaseHelmetEvasionRatingAndArmour(_) => "stun_threshold_+_from_lowest_of_base_helmet_evasion_rating_and_armour",
            Stat::StunThresholdFromMaximumEnergyShield(_) => "stun_threshold_+_from_%_maximum_energy_shield",
            Stat::StunThresholdPerNumberOfTimesStunnedRecently(_) => "stun_threshold_+%_per_number_of_times_stunned_recently",
            Stat::StunThresholdPerRage(_) => "stun_threshold_+%_per_rage",
            Stat::StunThresholdPerStrength(_) => "stun_threshold_+_per_strength",
            Stat::StunThresholdWhenNotStunnedRecently(_) => "stun_threshold_+%_when_not_stunned_recently",
            Stat::StunThresholdWhenOnFullLife(_) => "stun_threshold_+%_when_on_full_life",
            Stat::SummonTotemCastSpeed(_) => "summon_totem_cast_speed_+%",
            Stat::SupportAnticipationChargeGainFrequency(_) => "support_anticipation_charge_gain_frequency_+%",
            Stat::SupportGemLimit(_) => "support_gem_limit_+",
            Stat::SwordAttackSpeed(_) => "sword_attack_speed_+%",
            Stat::SwordDamage(_) => "sword_damage_+%",
            Stat::TabletEffectWhenOpeningAMap(_) => "tablet_effect_+%_when_opening_a_map",
            Stat::ThornsDamage(_) => "thorns_damage_+%",
            Stat::ThornsDamageIfBlockedRecently(_) => "thorns_damage_+%_if_blocked_recently",
            Stat::TitanDamageFinalAgainstHeavyStunnedEnemies(_) => "titan_damage_+%_final_against_heavy_stunned_enemies",
            Stat::TitanExpandedMainInventory(_) => "titan_expanded_main_inventory",
            Stat::TitanMaximumLifeFinal(_) => "titan_maximum_life_+%_final",
            Stat::TotemAdditionalPhysicalDamageReduction(_) => "totem_additional_physical_damage_reduction_%",
            Stat::TotemDamage(_) => "totem_damage_+%",
            Stat::TotemDuration(_) => "totem_duration_+%",
            Stat::TotemElementalResistance(_) => "totem_elemental_resistance_%",
            Stat::TotemLife(_) => "totem_life_+%",
            Stat::TotemPlacementRange(_) => "totem_placement_range_+%",
            Stat::TotemSkillAttackSpeed(_) => "totem_skill_attack_speed_+%",
            Stat::TotemSkillCastSpeed(_) => "totem_skill_cast_speed_+%",
            Stat::TotemsAttackSpeedPerActiveTotem(_) => "totems_attack_speed_+%_per_active_totem",
            Stat::TotemsRegenerateLifePerMinute(_) => "totems_regenerate_%_life_per_minute",
            Stat::TotemsSpellsCastSpeedPerActiveTotem(_) => "totems_spells_cast_speed_+%_per_active_totem",
            Stat::TrapCriticalStrikeChance(_) => "trap_critical_strike_chance_+%",
            Stat::TrapDamage(_) => "trap_damage_+%",
            Stat::TrapThrowingSpeed(_) => "trap_throwing_speed_+%",
            Stat::TriggerElementalStormOnCrit(_) => "trigger_elemental_storm_on_crit",
            Stat::TriggerSkillsRefundHalfEnergySpentChance(_) => "trigger_skills_refund_half_energy_spent_chance_%",
            Stat::TriggerWildStrikeOnAttackCrit(_) => "trigger_wild_strike_on_attack_crit",
            Stat::TriggeredSpellSpellDamage(_) => "triggered_spell_spell_damage_+%",
            Stat::TwoHandedMeleeAccuracyRating(_) => "two_handed_melee_accuracy_rating_+%",
            Stat::UnaffectedByChillDuringDodgeRoll(_) => "unaffected_by_chill_during_dodge_roll",
            Stat::UnaffectedByChillWhileManaLeeching(_) => "unaffected_by_chill_while_mana_leeching",
            Stat::UnarmedAttackSkillMeleeDashRange(_) => "unarmed_attack_skill_melee_dash_range_+%",
            Stat::UnarmedAttackSpeed(_) => "unarmed_attack_speed_+%",
            Stat::WarbringerOverbreakArmour(_) => "warbringer_overbreak_armour",
            Stat::WarcriesBypassCooldown(_) => "warcries_bypass_cooldown",
            Stat::WarcryCooldownSpeed(_) => "warcry_cooldown_speed_+%",
            Stat::WarcryDamage(_) => "warcry_damage_+%",
            Stat::WarcryEmpowersNextXMeleeAttacks(_) => "warcry_empowers_next_x_melee_attacks",
            Stat::WarcrySkillAreaOfEffect(_) => "warcry_skill_area_of_effect_+%",
            Stat::WarcrySpeed(_) => "warcry_speed_+%",
            Stat::WeaponSwapSpeed(_) => "weapon_swap_speed_+%",
            Stat::WhileUsingSwordReduceEnemyBlock(_) => "while_using_sword_reduce_enemy_block_%",
            Stat::WitchPassiveMaximumLightningDamageFinal(_) => "witch_passive_maximum_lightning_damage_+%_final",
            Stat::WitchhunterArmourEvasionFinal(_) => "witchhunter_armour_evasion_+%_final",
            Stat::WitchhunterUpToDamageFinalAgainstTargetsWithMissingFocus(_) => "witchhunter_up_to_damage_+%_final_against_targets_with_missing_focus",
            Stat::WitheredEffect(_) => "withered_effect_+%",
            Stat::WorldMapUniqueMapsVisibleXUnitsBeyondLightRadius(_) => "world_map_unique_maps_visible_X_units_beyond_light_radius",
            Stat::XFasterStartOfSorceryWardRecovery(_) => "x%_faster_start_of_sorcery_ward_recovery",
            Stat::YouAndAlliesInPresenceAllDamageCanIgniteWhileNotOnLowInfernalFlame(_) => "you_and_allies_in_presence_all_damage_can_ignite_while_not_on_low_infernal_flame",
            Stat::YouAndAlliesInPresenceNonSkillBaseAllDamageToGainAsFireWhileOnHighInfernalFlame(_) => "you_and_allies_in_presence_non_skill_base_all_damage_%_to_gain_as_fire_while_on_high_infernal_flame",
            Stat::YouGainLifeWhenOneOfYourMinionsIsRevived(_) => "you_gain_%_life_when_one_of_your_minions_is_revived",
            Stat::Unknown(s, _) => s.as_str(),
        }
    }

    pub fn value(&self) -> f32 {
        match self {
            Stat::AccuracyRating(v) => v.0,
            Stat::AccuracyRatingEqualToAttackCriticalStrikeChance(v) => v.0,
            Stat::AccuracyRatingVsBleedingEnemies(v) => v.0,
            Stat::AccuracyRatingVsEnemiesInCloseRange(v) => v.0,
            Stat::AccuracyRatingVsRareOrUniqueEnemy(v) => v.0,
            Stat::AccuracyRatingWhileDualWielding(v) => v.0,
            Stat::AdditionalAllAttributes(v) => v.0,
            Stat::AdditionalCriticalStrikeChancePermyriadWithHeraldSkills(v) => v.0,
            Stat::AdditionalMaximumAllElementalResistances(v) => v.0,
            Stat::AdditionalPhysicalDamageReductionPerJade(v) => v.0,
            Stat::AdditiveArmourModifiersApplyToEnergyShieldRechargeRateAtValue(v) => v.0,
            Stat::AftershockAreaOfEffect(v) => v.0,
            Stat::AggravateBleedingOlderThanMsOnHit(v) => v.0,
            Stat::AggravateBleedingOnAttackCritChance(v) => v.0,
            Stat::AggravateBleedingOnExertedAttackHitChance(v) => v.0,
            Stat::AggravateBleedingWhenInflictedVsEnemiesOnJaggedGroundChance(v) => v.0,
            Stat::AilmentChance(v) => v.0,
            Stat::AilmentChanceVsRareOrUniqueEnemy(v) => v.0,
            Stat::AilmentEffect(v) => v.0,
            Stat::AilmentThreshold(v) => v.0,
            Stat::AilmentThresholdFromLowestOfBaseBootsEvasionRatingAndArmour(v) => v.0,
            Stat::AilmentThresholdPerDexterity(v) => v.0,
            Stat::AllAttributes(v) => v.0,
            Stat::AllDamageCanChill(v) => v.0,
            Stat::AllDamageCanShock(v) => v.0,
            Stat::AllSkillGemLevel(v) => v.0,
            Stat::AllSkillGemQuality(v) => v.0,
            Stat::AlliesInPresenceAccuracyRating(v) => v.0,
            Stat::AlliesInPresenceAttackSpeed(v) => v.0,
            Stat::AlliesInPresenceLifeRegenerationRatePerMinuteEqualToYourMaximumLife(v) => v.0,
            Stat::AncestralSlamEveryOtherSlam(v) => v.0,
            Stat::ArcaneSurgeEffectOnSelf(v) => v.0,
            Stat::AreaDamage(v) => v.0,
            Stat::AreaOfEffectIfEnemyStunnedWithTwoHandedMeleeWeaponRecently(v) => v.0,
            Stat::AreaOfEffectIfHaveStunnedAnEnemyRecently(v) => v.0,
            Stat::AreaOfEffectWithHeraldSkills(v) => v.0,
            Stat::AreaSkillKnockbackChance(v) => v.0,
            Stat::ArmourAndEvasionOnLowLife(v) => v.0,
            Stat::ArmourBreakAmount(v) => v.0,
            Stat::ArmourBreakAmountVsEnemiesAffectedByAilments(v) => v.0,
            Stat::ArmourBreakDamageDealtAsArmourBreak(v) => v.0,
            Stat::ArmourBreakDuration(v) => v.0,
            Stat::ArmourBreakEqualToPhysicalDamageDealtOnCriticalStrikeWithSpells(v) => v.0,
            Stat::ArmourBreakOfArmourOnHeavyStunning(v) => v.0,
            Stat::ArmourEvasionWhileLeeching(v) => v.0,
            Stat::ArmourFromStrengthRequirementsFromBootsGlovesHelmets(v) => v.0,
            Stat::ArmourIfConsumedEnduranceChargeRecently(v) => v.0,
            Stat::ArmourIfHaveBeenHitRecently(v) => v.0,
            Stat::ArmourIfHitEnemyWithMeleeAttackRecently(v) => v.0,
            Stat::ArmourIfYouHaventBeenHitRecently(v) => v.0,
            Stat::ArmourPerRage(v) => v.0,
            Stat::ArmourWhileSurrounded(v) => v.0,
            Stat::ArrowBaseNumberOfTargetsToPierce(v) => v.0,
            Stat::ArrowCriticalStrikeChanceMaxAsDistanceTravelledIncreases(v) => v.0,
            Stat::ArrowSpeedAdditiveModifiersAlsoApplyToBowDamage(v) => v.0,
            Stat::AscendancyBeidatsGazeManaPerXMaximumLife(v) => v.0,
            Stat::AscendancyBeidatsHandEnergyShieldPerXMaximumLife(v) => v.0,
            Stat::AscendancyBeidatsWillSpiritPerXMaximumLife(v) => v.0,
            Stat::AscendancyChronomancerApexOfTheMomentBaseSlowAuraValue(v) => v.0,
            Stat::AscendancyEnergyGeneratedFinal(v) => v.0,
            Stat::AscendancyPathfinderFlaskChargesGainedFinal(v) => v.0,
            Stat::AscendancyTitanDamageReductionRatingFromBodyArmourFinal(v) => v.0,
            Stat::AscendancyWarbringerBlockChanceFinal(v) => v.0,
            Stat::AtlasKeystoneCorruptionRoulette(v) => v.0,
            Stat::AtlasKeystoneExtremeArchaeology(v) => v.0,
            Stat::AtlasKeystonePrefixOrSuffixModEffectFinal(v) => v.0,
            Stat::AttackAdditionalCriticalStrikeChancePermyriad(v) => v.0,
            Stat::AttackAndCastSpeed(v) => v.0,
            Stat::AttackAndCastSpeedOnPlacingTotem(v) => v.0,
            Stat::AttackAndCastSpeedWhileAffectedByAManaFlask(v) => v.0,
            Stat::AttackAndCastSpeedWithElementalSkills(v) => v.0,
            Stat::AttackAndCastSpeedWithLightningSkills(v) => v.0,
            Stat::AttackAreaDamage(v) => v.0,
            Stat::AttackAreaOfEffect(v) => v.0,
            Stat::AttackCriticalStrikeChance(v) => v.0,
            Stat::AttackCriticalStrikeMultiplier(v) => v.0,
            Stat::AttackDamage(v) => v.0,
            Stat::AttackDamageVsBleedingEnemies(v) => v.0,
            Stat::AttackDamageVsRareOrUniqueEnemy(v) => v.0,
            Stat::AttackDamageWhenOnFullLife(v) => v.0,
            Stat::AttackDamageWhenOnLowLife(v) => v.0,
            Stat::AttackDamageWhileAllyInPresence(v) => v.0,
            Stat::AttackDamageWhileSurrounded(v) => v.0,
            Stat::AttackManaCost(v) => v.0,
            Stat::AttackSkillsAdditionalTotemsAllowed(v) => v.0,
            Stat::AttackSkillsDamageWhileHoldingShield(v) => v.0,
            Stat::AttackSpeed(v) => v.0,
            Stat::AttackSpeedDuringFlaskEffect(v) => v.0,
            Stat::AttackSpeedIfEnemyKilledRecently(v) => v.0,
            Stat::AttackSpeedIfHaveBeenHitRecently(v) => v.0,
            Stat::AttackSpeedIfRareOrUniqueEnemyNearby(v) => v.0,
            Stat::AttackSpeedIfYouHaveNotAttackedRecently(v) => v.0,
            Stat::AttackSpeedWhileDualWielding(v) => v.0,
            Stat::AttackSpeedWhileHoldingShield(v) => v.0,
            Stat::AttackSpeedWhileSurrounded(v) => v.0,
            Stat::AttacksChanceToBlindOnHit(v) => v.0,
            Stat::AuraEffect(v) => v.0,
            Stat::AxeAttackSpeed(v) => v.0,
            Stat::AxeDamage(v) => v.0,
            Stat::BaseAggravateBleedingOnAttackHitChance(v) => v.0,
            Stat::BaseAllAilmentDurationOnSelf(v) => v.0,
            Stat::BaseArmourAppliesToFireDamage(v) => v.0,
            Stat::BaseAttackDamagePenetratesElementalResist(v) => v.0,
            Stat::BaseBleedDuration(v) => v.0,
            Stat::BaseBleedingEffect(v) => v.0,
            Stat::BaseBlockDamageTaken(v) => v.0,
            Stat::BaseBodyArmourPermyriadToGainAsPhysicalThornsDamage(v) => v.0,
            Stat::BaseCastSpeed(v) => v.0,
            Stat::BaseChanceToInflictBleeding(v) => v.0,
            Stat::BaseChanceToNotConsumeCorpse(v) => v.0,
            Stat::BaseChanceToPierce(v) => v.0,
            Stat::BaseChanceToPoisonOnHit(v) => v.0,
            Stat::BaseChanceToPoisonOnHitVsNonPoisonedEnemies(v) => v.0,
            Stat::BaseChaosDamageResistance(v) => v.0,
            Stat::BaseColdDamageResistance(v) => v.0,
            Stat::BaseCooldownSpeed(v) => v.0,
            Stat::BaseCost(v) => v.0,
            Stat::BaseCriticalStrikeMultiplier(v) => v.0,
            Stat::BaseCurseDuration(v) => v.0,
            Stat::BaseDamageRemovedFromManaBeforeLife(v) => v.0,
            Stat::BaseDamagingAilmentEffect(v) => v.0,
            Stat::BaseDarkness(v) => v.0,
            Stat::BaseDarknessRefreshRateMs(v) => v.0,
            Stat::BaseDebuffSlowMagnitude(v) => v.0,
            Stat::BaseDexterity(v) => v.0,
            Stat::BaseDexterityAndIntelligence(v) => v.0,
            Stat::BaseElementalStatusAilmentDuration(v) => v.0,
            Stat::BaseEnemyCriticalStrikeChanceAgainstSelf(v) => v.0,
            Stat::BaseEvasionRating(v) => v.0,
            Stat::BaseFireDamageResistance(v) => v.0,
            Stat::BaseFrenzyChargeDuration(v) => v.0,
            Stat::BaseIgniteEffect(v) => v.0,
            Stat::BaseIntelligence(v) => v.0,
            Stat::BaseLifeGainedOnEnemyDeath(v) => v.0,
            Stat::BaseLifeLeechAmount(v) => v.0,
            Stat::BaseLifeLeechDoesNotStopAtFullLife(v) => v.0,
            Stat::BaseLifeLeechFromAllSpellDamagePermyriad(v) => v.0,
            Stat::BaseLifeLeechRate(v) => v.0,
            Stat::BaseManaCost(v) => v.0,
            Stat::BaseManaLeechAmount(v) => v.0,
            Stat::BaseManaLeechIsInstant(v) => v.0,
            Stat::BaseMaximumChaosDamageResistance(v) => v.0,
            Stat::BaseMaximumColdDamageResistance(v) => v.0,
            Stat::BaseMaximumEnergyShield(v) => v.0,
            Stat::BaseMaximumFireDamageResistance(v) => v.0,
            Stat::BaseMaximumLife(v) => v.0,
            Stat::BaseMaximumLightningDamageResistance(v) => v.0,
            Stat::BaseMaximumMana(v) => v.0,
            Stat::BaseMovementVelocity(v) => v.0,
            Stat::BasePenetrateElementalResistances(v) => v.0,
            Stat::BasePhysicalDamageReductionRating(v) => v.0,
            Stat::BasePoisonDuration(v) => v.0,
            Stat::BasePoisonEffect(v) => v.0,
            Stat::BaseProjectileSpeed(v) => v.0,
            Stat::BaseReduceEnemyColdResistance(v) => v.0,
            Stat::BaseReduceEnemyFireResistance(v) => v.0,
            Stat::BaseReduceEnemyLightningResistance(v) => v.0,
            Stat::BaseResistAllElements(v) => v.0,
            Stat::BaseSelfCriticalStrikeMultiplier(v) => v.0,
            Stat::BaseSelfFreezeDuration(v) => v.0,
            Stat::BaseSelfIgniteDuration(v) => v.0,
            Stat::BaseSelfShockDuration(v) => v.0,
            Stat::BaseShouldHaveArcaneSurgeFromStat(v) => v.0,
            Stat::BaseSkillAreaOfEffect(v) => v.0,
            Stat::BaseSkillCostLifeInsteadOfMana(v) => v.0,
            Stat::BaseSlowPotency(v) => v.0,
            Stat::BaseSpellCriticalStrikeChanceOverridePermyriad(v) => v.0,
            Stat::BaseSpellCriticalStrikeMultiplier(v) => v.0,
            Stat::BaseStrength(v) => v.0,
            Stat::BaseStrengthAndDexterity(v) => v.0,
            Stat::BaseStrengthAndIntelligence(v) => v.0,
            Stat::BaseStunRecovery(v) => v.0,
            Stat::BaseThornsCriticalStrikeChance(v) => v.0,
            Stat::BaseThornsCriticalStrikeMultiplier(v) => v.0,
            Stat::BleedOnCrit(v) => v.0,
            Stat::BleedOnCritWithAttacks(v) => v.0,
            Stat::BlindEffect(v) => v.0,
            Stat::BlindEnemiesWhenTheyStunYou(v) => v.0,
            Stat::BlockChance(v) => v.0,
            Stat::BlockChanceFromEquippedShieldIs(v) => v.0,
            Stat::BlockChanceIfBlockedWithActiveBlockRecently(v) => v.0,
            Stat::BlockRecovery(v) => v.0,
            Stat::BodyArmour(v) => v.0,
            Stat::BodyArmourEvasionRating(v) => v.0,
            Stat::BowAccuracyRating(v) => v.0,
            Stat::BowAttackSpeed(v) => v.0,
            Stat::BowCriticalStrikeMultiplier(v) => v.0,
            Stat::BowDamage(v) => v.0,
            Stat::BreachFlameEffectsDoubled(v) => v.0,
            Stat::BuffTimePassedOnlyBuffCategory(v) => v.0,
            Stat::BuildupJadeEveryXMs(v) => v.0,
            Stat::CanApplyAdditionalChill(v) => v.0,
            Stat::CanApplyAdditionalShock(v) => v.0,
            Stat::CanBlockAllHitsWhileShieldIsLowered(v) => v.0,
            Stat::CannotBeBlindedWhileOnFullLife(v) => v.0,
            Stat::CannotGainSpiritFromEquipment(v) => v.0,
            Stat::CannotRechargeEnergyShield(v) => v.0,
            Stat::CastSpeedForColdSkills(v) => v.0,
            Stat::CastSpeedIfHaveCritRecently(v) => v.0,
            Stat::CastSpeedPerNumUniqueSpellsCastRecently(v) => v.0,
            Stat::CastSpeedWhenOnFullLife(v) => v.0,
            Stat::CastSpeedWhenOnLowLife(v) => v.0,
            Stat::CastSpeedWhileHoldingStaff(v) => v.0,
            Stat::ChanceForSkillsToAvoidCooldown(v) => v.0,
            Stat::ChanceToCreateShockingGroundOnShock(v) => v.0,
            Stat::ChanceToDoubleArmourEffectOnHit(v) => v.0,
            Stat::ChanceToDoubleEffectOfRemovingFrenzyCharges(v) => v.0,
            Stat::ChanceToForkExtraProjectile(v) => v.0,
            Stat::ChanceToGainOnslaughtOnKillWithAxes(v) => v.0,
            Stat::ChanceToPoisonOnCriticalStrikeWithDagger(v) => v.0,
            Stat::ChanceToSummonTwoTotems(v) => v.0,
            Stat::ChaosDamage(v) => v.0,
            Stat::ChaosDamageResistanceIsDoubled(v) => v.0,
            Stat::ChaosSkillGemLevel(v) => v.0,
            Stat::ChargesGained(v) => v.0,
            Stat::CharmChargesGained(v) => v.0,
            Stat::CharmChargesUsed(v) => v.0,
            Stat::CharmDuration(v) => v.0,
            Stat::CharmEffect(v) => v.0,
            Stat::CharmsChanceOnUseToUseAnotherCharmWithoutConsumingCharges(v) => v.0,
            Stat::CharmsChanceToNotConsumeCharges(v) => v.0,
            Stat::ChillAndFreezeDuration(v) => v.0,
            Stat::ChillDuration(v) => v.0,
            Stat::ChillEffect(v) => v.0,
            Stat::ChillEffectivenessOnSelf(v) => v.0,
            Stat::ClawAccuracyRating(v) => v.0,
            Stat::ClawAttackSpeed(v) => v.0,
            Stat::ClawCriticalStrikeChance(v) => v.0,
            Stat::ClawDamage(v) => v.0,
            Stat::ColdDamage(v) => v.0,
            Stat::ColdDamageWhileAffectedByHeraldOfIce(v) => v.0,
            Stat::ColdExposureEffect(v) => v.0,
            Stat::ColdExposureYouInflictLowersColdResistanceByExtra(v) => v.0,
            Stat::ColdHitAndDotDamageTakenAsFire(v) => v.0,
            Stat::ColdSkillGemLevel(v) => v.0,
            Stat::ConvertAllLifeLeechToEnergyShieldLeech(v) => v.0,
            Stat::CorpsesInYourPresenceExplodeDealingMaximumLifePhysicalDamageOnWarcry(v) => v.0,
            Stat::CreateChillingGroundOnFreeze(v) => v.0,
            Stat::CriticalHitBleedingEffect(v) => v.0,
            Stat::CriticalHitDamageBonusIfConsumedPowerChargeRecently(v) => v.0,
            Stat::CriticalHitDamagingAilmentEffect(v) => v.0,
            Stat::CriticalHitIgniteEffect(v) => v.0,
            Stat::CriticalStrikeChance(v) => v.0,
            Stat::CriticalStrikeChanceAgainstEnemiesOnFullLife(v) => v.0,
            Stat::CriticalStrikeChanceIfEnemyKilledRecently(v) => v.0,
            Stat::CriticalStrikeChanceIfHaveNotCritRecently(v) => v.0,
            Stat::CriticalStrikeChanceVsBleedingEnemies(v) => v.0,
            Stat::CriticalStrikeChanceVsDazedEnemies(v) => v.0,
            Stat::CriticalStrikeChanceVsEnemiesWithLightningExposure(v) => v.0,
            Stat::CriticalStrikeChanceVsEnemiesWithoutElementalStatusAilments(v) => v.0,
            Stat::CriticalStrikeChanceVsShockedEnemies(v) => v.0,
            Stat::CriticalStrikeChanceWhileDualWielding(v) => v.0,
            Stat::CriticalStrikeMultiplierDuringAnyFlaskEffect(v) => v.0,
            Stat::CriticalStrikeMultiplierIfGainedPowerChargeRecently(v) => v.0,
            Stat::CriticalStrikeMultiplierIfHaveDealtNonCritRecently(v) => v.0,
            Stat::CriticalStrikeMultiplierIfHaveNotDealtCriticalStrikeRecently(v) => v.0,
            Stat::CriticalStrikeMultiplierVsBurningEnemies(v) => v.0,
            Stat::CriticalStrikeMultiplierVsEnemiesOnFullLife(v) => v.0,
            Stat::CriticalStrikeMultiplierVsStunnedEnemies(v) => v.0,
            Stat::CriticalStrikeMultiplierWithDagger(v) => v.0,
            Stat::CriticalStrikesIgnorePositiveElementalResistances(v) => v.0,
            Stat::CrossbowAttackChanceToNotConsumeAmmo(v) => v.0,
            Stat::CrossbowAttackSpeed(v) => v.0,
            Stat::CrossbowCriticalStrikeChance(v) => v.0,
            Stat::CrossbowCriticalStrikeMultiplier(v) => v.0,
            Stat::CrossbowDamage(v) => v.0,
            Stat::CrushingBlow(v) => v.0,
            Stat::CullingStrikeThreshold(v) => v.0,
            Stat::CullingStrikeVsMarkedEnemy(v) => v.0,
            Stat::CurseAreaOfEffect(v) => v.0,
            Stat::CurseDelay(v) => v.0,
            Stat::CurseEffect(v) => v.0,
            Stat::CurseEffectOnSelf(v) => v.0,
            Stat::CursesNeverExpire(v) => v.0,
            Stat::DaggerAttackSpeed(v) => v.0,
            Stat::DaggerCriticalStrikeChance(v) => v.0,
            Stat::DaggerDamage(v) => v.0,
            Stat::Damage(v) => v.0,
            Stat::DamageAgainstEnemiesWithFullyBrokenArmour(v) => v.0,
            Stat::DamageIfTriggeredSkillRecently(v) => v.0,
            Stat::DamageIfYouHaveConsumedACorpseRecently(v) => v.0,
            Stat::DamagePerActiveCurseOnSelf(v) => v.0,
            Stat::DamagePerDifferentWarcryUsedRecently(v) => v.0,
            Stat::DamagePerEnemyElementalAilment(v) => v.0,
            Stat::DamagePerWarcryUsedRecently(v) => v.0,
            Stat::DamageRemovedFromYourNearestTotemBeforeLifeOrEs(v) => v.0,
            Stat::DamageTakenFinalPerTailwind(v) => v.0,
            Stat::DamageTakenGoesToMana(v) => v.0,
            Stat::DamageTakenOnLowLife(v) => v.0,
            Stat::DamageToRareAndUniqueEnemies(v) => v.0,
            Stat::DamageVsBurningEnemies(v) => v.0,
            Stat::DamageVsDazedEnemies(v) => v.0,
            Stat::DamageVsEnemiesAffectedByStatusAilments(v) => v.0,
            Stat::DamageVsEnemiesOnFullLife(v) => v.0,
            Stat::DamageVsEnemiesOnLowLife(v) => v.0,
            Stat::DamageVsFrozenEnemies(v) => v.0,
            Stat::DamageVsHinderedEnemies(v) => v.0,
            Stat::DamageVsShockedEnemies(v) => v.0,
            Stat::DamageWhileAffectedByAHerald(v) => v.0,
            Stat::DamageWhileDualWielding(v) => v.0,
            Stat::DamageWhileTotemActive(v) => v.0,
            Stat::DamageWhileUnarmed(v) => v.0,
            Stat::DamageWhileUsingCharm(v) => v.0,
            Stat::DamageWhileWieldingWand(v) => v.0,
            Stat::DamageWithDaggersAgainstFullLifeEnemies(v) => v.0,
            Stat::DamageWithHeraldSkills(v) => v.0,
            Stat::DamageWithHitsIsLuckyVsEnemiesOnLowLife(v) => v.0,
            Stat::DamageWithHitsIsLuckyVsHeavyStunnedEnemies(v) => v.0,
            Stat::DamageWithOneHandedWeapons(v) => v.0,
            Stat::DamageWithTwoHandedWeapons(v) => v.0,
            Stat::DamagingAilmentDuration(v) => v.0,
            Stat::DamagingAilmentsDealDamageFaster(v) => v.0,
            Stat::DarknessPerLevel(v) => v.0,
            Stat::DarknessRefreshRate(v) => v.0,
            Stat::DazeBuildUp(v) => v.0,
            Stat::DazeDuration(v) => v.0,
            Stat::DeadeyeAccuracyUnaffectedByRange(v) => v.0,
            Stat::DeadeyeMovementSpeedPenaltyFinalWhilePerformingAction(v) => v.0,
            Stat::DeadeyeProjectileDamageFinalMaxAsDistanceTravelledDecreases(v) => v.0,
            Stat::DeadeyeProjectileDamageFinalMaxAsDistanceTravelledIncreases(v) => v.0,
            Stat::DebuffTimePassed(v) => v.0,
            Stat::DecimatingStrike(v) => v.0,
            Stat::DefencesWhileWieldingStaff(v) => v.0,
            Stat::DefendWithArmourAgainstCriticalStrikes(v) => v.0,
            Stat::DefendWithArmourAgainstRangedAttacks(v) => v.0,
            Stat::DefendWithOfArmourWhileNotOnLowEnergyShield(v) => v.0,
            Stat::Dexterity(v) => v.0,
            Stat::DisplayPassiveAttributeText(v) => v.0,
            Stat::DistanceScaledAccuracyRatingPenalty(v) => v.0,
            Stat::DoubleNumberOfPoisonYouCanInflict(v) => v.0,
            Stat::DoubleTabletEffectChanceWhenOpeningAMap(v) => v.0,
            Stat::DrainFocusOfDamageDealtOnHit(v) => v.0,
            Stat::DummyStatDisplayNothing(v) => v.0,
            Stat::ElectrocutedEnemyDamageTaken(v) => v.0,
            Stat::ElementalDamage(v) => v.0,
            Stat::ElementalDamageCanInflictBleeding(v) => v.0,
            Stat::ElementalDamageIfEnemyChilledRecently(v) => v.0,
            Stat::ElementalDamageIfEnemyIgnitedRecently(v) => v.0,
            Stat::ElementalDamageIfEnemyShockedRecently(v) => v.0,
            Stat::ElementalDamageIfHaveCritRecently(v) => v.0,
            Stat::ElementalDamageTakenRecoupedAsLife(v) => v.0,
            Stat::ElementalDamageWithAttackSkills(v) => v.0,
            Stat::ElementalDamageWithAttackSkillsWhileUsingFlask(v) => v.0,
            Stat::ElementalStormCooldownRecoverySpeedFinal(v) => v.0,
            Stat::ElementalistChillMaximumMagnitudeOverride(v) => v.0,
            Stat::EmpoweredAttackDamage(v) => v.0,
            Stat::EmpoweredAttackHitDamageStunMultiplier(v) => v.0,
            Stat::EnduranceChargeDuration(v) => v.0,
            Stat::EnemiesAreMaimedForXSecondsAfterBecomingUnpinned(v) => v.0,
            Stat::EnemiesChaosResistanceWhileCursed(v) => v.0,
            Stat::EnemiesCursedByYouHaveLifeRegenerationRate(v) => v.0,
            Stat::EnemiesInPresenceCooldownRecovery(v) => v.0,
            Stat::EnemiesNearMarkedEnemyAreBlinded(v) => v.0,
            Stat::EnemiesYouCurseCannotRechargeEnergyShield(v) => v.0,
            Stat::EnergyGenerated(v) => v.0,
            Stat::EnergyShieldDelay(v) => v.0,
            Stat::EnergyShieldDelayIfStunnedRecently(v) => v.0,
            Stat::EnergyShieldDelayWhenNotOnFullLife(v) => v.0,
            Stat::EnergyShieldFromFocus(v) => v.0,
            Stat::EnergyShieldFromHelmet(v) => v.0,
            Stat::EnergyShieldGainedOnBlock(v) => v.0,
            Stat::EnergyShieldIfConsumedPowerChargeRecently(v) => v.0,
            Stat::EnergyShieldRechargeRate(v) => v.0,
            Stat::EnergyShieldRecoveryRate(v) => v.0,
            Stat::EnergyShieldRecoveryRateIfNotHitRecently(v) => v.0,
            Stat::EvasionAndPhysicalDamageReductionRating(v) => v.0,
            Stat::EvasionIfHitRecently(v) => v.0,
            Stat::EvasionRating(v) => v.0,
            Stat::EvasionRatingAlsoReducesPhysicalDamage(v) => v.0,
            Stat::EvasionRatingIfConsumedFrenzyChargeRecently(v) => v.0,
            Stat::EvasionRatingIfHaveNotBeenHitRecently(v) => v.0,
            Stat::EvasionRatingIfYouDodgeRolledRecently(v) => v.0,
            Stat::EvasionRatingIfYouHaveHitAnEnemyRecently(v) => v.0,
            Stat::EvasionRatingToGainAsArmour(v) => v.0,
            Stat::EvasionRatingWhenOnFullLife(v) => v.0,
            Stat::EvasionRatingWhileSurrounded(v) => v.0,
            Stat::EvasionRatingWhileYouHaveEnergyShield(v) => v.0,
            Stat::ExpeditionMonstersLogbookChance(v) => v.0,
            Stat::ExposureYouInflictLowersAffectedResistanceByExtra(v) => v.0,
            Stat::ExtraDamageRollsWithLightningDamageOnNonCriticalHits(v) => v.0,
            Stat::FasterBleed(v) => v.0,
            Stat::FasterBurn(v) => v.0,
            Stat::FinalRepeatOfSpellsAreaOfEffect(v) => v.0,
            Stat::FireDamage(v) => v.0,
            Stat::FireDamageWhileAffectedByHeraldOfAsh(v) => v.0,
            Stat::FireExposureEffect(v) => v.0,
            Stat::FireExposureYouInflictLowersFireResistanceByExtra(v) => v.0,
            Stat::FlailAttackSpeed(v) => v.0,
            Stat::FlailCriticalStrikeChance(v) => v.0,
            Stat::FlailCriticalStrikeMultiplier(v) => v.0,
            Stat::FlailDamage(v) => v.0,
            Stat::FlaskChargesGained(v) => v.0,
            Stat::FlaskChargesUsed(v) => v.0,
            Stat::FlaskDuration(v) => v.0,
            Stat::FlaskEffect(v) => v.0,
            Stat::FlaskLifeAndManaRecoveryWhileUsingCharm(v) => v.0,
            Stat::FlaskLifeAndManaToRecover(v) => v.0,
            Stat::FlaskLifeRecoveryRate(v) => v.0,
            Stat::FlaskLifeToRecover(v) => v.0,
            Stat::FlaskManaChargesUsed(v) => v.0,
            Stat::FlaskManaToRecover(v) => v.0,
            Stat::FlasksChanceToNotConsumeCharges(v) => v.0,
            Stat::FocusDecayDelayMs(v) => v.0,
            Stat::FocusDecayPerMinute(v) => v.0,
            Stat::FreezeDuration(v) => v.0,
            Stat::FreezeThreshold(v) => v.0,
            Stat::GainAccuracyRatingEqualToIntelligence(v) => v.0,
            Stat::GainAccuracyRatingEqualToStrength(v) => v.0,
            Stat::GainArcaneSurgeOnCritChance(v) => v.0,
            Stat::GainDamageAsChaosFromUnreservedDarkness(v) => v.0,
            Stat::GainEnduranceChargeOnHeavyStunningRareOrUniqueEnemy(v) => v.0,
            Stat::GainGuardFlaskChargeWhenHitByEnemyChance(v) => v.0,
            Stat::GainLifeFromBodyEs(v) => v.0,
            Stat::GainMaxRageOnRageGainFromHitChance(v) => v.0,
            Stat::GainMaximumEnduranceChargesOnEnduranceChargeGainedChance(v) => v.0,
            Stat::GainMaximumEnergyShieldAsFreezeThreshold(v) => v.0,
            Stat::GainMaximumFrenzyChargesOnFrenzyChargeGainedChance(v) => v.0,
            Stat::GainMaximumPowerChargesOnPowerChargeGainedChance(v) => v.0,
            Stat::GainTailwindStackOnSkillUse(v) => v.0,
            Stat::GainUnboundAilmentStacks(v) => v.0,
            Stat::GainXRageOnHitWithAxes(v) => v.0,
            Stat::GainXRageOnMeleeHit(v) => v.0,
            Stat::GainXRageWhenHit(v) => v.0,
            Stat::GemRequirementsCanBeSatisfiedByHighestAttribute(v) => v.0,
            Stat::GemlingDoubleBasicAttributeBonuses(v) => v.0,
            Stat::GemlingSkillCostFinal(v) => v.0,
            Stat::GenerateXChargesForCharmsPerMinute(v) => v.0,
            Stat::GenerateXChargesForLifeFlasksPerMinute(v) => v.0,
            Stat::GenerateXChargesForManaFlasksPerMinute(v) => v.0,
            Stat::GlobalChanceToBlindOnHit(v) => v.0,
            Stat::GlobalDefences(v) => v.0,
            Stat::GlobalGemAttributeRequirementsFinalFromGemling(v) => v.0,
            Stat::GlobalItemAttributeRequirements(v) => v.0,
            Stat::GrenadeFuseDuration(v) => v.0,
            Stat::GrenadeSkillAreaOfEffect(v) => v.0,
            Stat::GrenadeSkillChanceToExplodeTwice(v) => v.0,
            Stat::GrenadeSkillCooldownCount(v) => v.0,
            Stat::GrenadeSkillCooldownSpeed(v) => v.0,
            Stat::GrenadeSkillDamage(v) => v.0,
            Stat::GrenadeSkillNumberOfAdditionalProjectiles(v) => v.0,
            Stat::GuardFlaskEffect(v) => v.0,
            Stat::HeavyStunPoiseDecayRate(v) => v.0,
            Stat::HeavyStunsHaveCullingStrike(v) => v.0,
            Stat::HellhoundTakesDamageBeforeYou(v) => v.0,
            Stat::HeraldSkillsManaReservation(v) => v.0,
            Stat::HinderDuration(v) => v.0,
            Stat::HitDamageElectrocuteMultiplier(v) => v.0,
            Stat::HitDamageElectrocuteMultiplierVsShockedEnemies(v) => v.0,
            Stat::HitDamageFreezeMultiplier(v) => v.0,
            Stat::HitDamagePinMultiplier(v) => v.0,
            Stat::HitDamageStunMultiplier(v) => v.0,
            Stat::HitDamageStunMultiplierVsEnemiesAtCloseRange(v) => v.0,
            Stat::HitDamageStunMultiplierVsEnemiesOnLowLife(v) => v.0,
            Stat::HitDamageStunMultiplierWithCrits(v) => v.0,
            Stat::HitDamageVsChilledEnemies(v) => v.0,
            Stat::HitDamageVsEnemiesAffectedByAilments(v) => v.0,
            Stat::HitDamageVsIgnitedEnemies(v) => v.0,
            Stat::HitForMaxLifeEsOnMaxInfernalFlame(v) => v.0,
            Stat::HitsIgnoreElementalResistancesVsFrozenEnemies(v) => v.0,
            Stat::IceCrystalMaximumLife(v) => v.0,
            Stat::IgniteChance(v) => v.0,
            Stat::IgniteDuration(v) => v.0,
            Stat::IgniteEffectOnSelf(v) => v.0,
            Stat::IgniteShockChillDuration(v) => v.0,
            Stat::IgnitesApplyFireResistance(v) => v.0,
            Stat::InfernalFlameInsteadOfMana(v) => v.0,
            Stat::InfernalistBurnLifeAndEsPerSecondIfCritRecently(v) => v.0,
            Stat::InfernalistCriticalStrikeMultiplierFinal(v) => v.0,
            Stat::InflictFireExposureOnHitsThatHeavyStun(v) => v.0,
            Stat::InflictWitheredForXSecondsOnUnwitheredEnemiesWhenTheyEnterYourPresence(v) => v.0,
            Stat::Intelligence(v) => v.0,
            Stat::JaggedGroundDuration(v) => v.0,
            Stat::JaggedGroundEffect(v) => v.0,
            Stat::JaggedGroundEnemyDamageTaken(v) => v.0,
            Stat::KeystoneAcrobatics(v) => v.0,
            Stat::KeystoneAncestralBond(v) => v.0,
            Stat::KeystoneAvatarOfFire(v) => v.0,
            Stat::KeystoneBloodMagic(v) => v.0,
            Stat::KeystoneBulwark(v) => v.0,
            Stat::KeystoneChaosInoculation(v) => v.0,
            Stat::KeystoneChargeCycle(v) => v.0,
            Stat::KeystoneConduit(v) => v.0,
            Stat::KeystoneDanceWithDeath(v) => v.0,
            Stat::KeystoneEldritchBattery(v) => v.0,
            Stat::KeystoneElementalEquilibrium(v) => v.0,
            Stat::KeystoneEternalYouth(v) => v.0,
            Stat::KeystoneGiantsBlood(v) => v.0,
            Stat::KeystoneGlancingBlows(v) => v.0,
            Stat::KeystoneHeartstopper(v) => v.0,
            Stat::KeystoneHexMaster(v) => v.0,
            Stat::KeystoneIronReflexes(v) => v.0,
            Stat::KeystoneManaShield(v) => v.0,
            Stat::KeystoneOasis(v) => v.0,
            Stat::KeystonePainAttunement(v) => v.0,
            Stat::KeystoneUnwaveringStance(v) => v.0,
            Stat::KeystoneVaalPact(v) => v.0,
            Stat::KeystoneZealotsOath(v) => v.0,
            Stat::KnockbackChanceAtCloseRange(v) => v.0,
            Stat::KnockbackDistance(v) => v.0,
            Stat::KnockbackOnCritWithQuarterstaff(v) => v.0,
            Stat::LeechIsInstant(v) => v.0,
            Stat::LifeFlaskChargesGained(v) => v.0,
            Stat::LifeFlaskEffectsAreNotRemovedAtFullLife(v) => v.0,
            Stat::LifeGainedOnBlock(v) => v.0,
            Stat::LifeRecoveryFromFlasksWhileOnLowLife(v) => v.0,
            Stat::LifeRecoveryRate(v) => v.0,
            Stat::LifeRegenerateRatePerSecondWhileTotemActive(v) => v.0,
            Stat::LifeRegenerationRate(v) => v.0,
            Stat::LifeRegenerationRatePerMinute(v) => v.0,
            Stat::LifeRegenerationRatePerMinuteIfHaveBeenHitRecently(v) => v.0,
            Stat::LifeRegenerationRatePerMinuteWhenOnLowLife(v) => v.0,
            Stat::LifeRegenerationRatePerMinuteWhileAffectedByDamagingAilment(v) => v.0,
            Stat::LifeRegenerationRatePerMinuteWhileStationary(v) => v.0,
            Stat::LifeRegenerationRatePerMinuteWhileSurrounded(v) => v.0,
            Stat::LifeRegenerationRateWhileMoving(v) => v.0,
            Stat::LifeRegenerationRateWhileOnLowLife(v) => v.0,
            Stat::LifeRegenerationRateWhileStationary(v) => v.0,
            Stat::LifeRegenerationRateWhileUsingLifeFlask(v) => v.0,
            Stat::LifeRemnantsGainPerGlobe(v) => v.0,
            Stat::LifeReservedByStat(v) => v.0,
            Stat::LightRadius(v) => v.0,
            Stat::LightningDamage(v) => v.0,
            Stat::LightningDamageWhileAffectedByHeraldOfThunder(v) => v.0,
            Stat::LightningExposureEffect(v) => v.0,
            Stat::LightningHitAndDotDamageTakenAsFire(v) => v.0,
            Stat::LightningPenetrationWhileOnLowMana(v) => v.0,
            Stat::LightningSkillAdditionalChainChance(v) => v.0,
            Stat::LinkSkillBuffEffect(v) => v.0,
            Stat::LinkSkillCastSpeed(v) => v.0,
            Stat::LinkSkillDuration(v) => v.0,
            Stat::LinkSkillsCanTargetMinions(v) => v.0,
            Stat::LinkToXAdditionalRandomAllies(v) => v.0,
            Stat::LoseAllTailwindWhenHit(v) => v.0,
            Stat::LoseOfInfernalFlameOnReachingMax(v) => v.0,
            Stat::LoseOfLifeAndEnergyShieldWhenYouUseAChaosSkill(v) => v.0,
            Stat::LoseOfMaxInfernalFlamePerMinute(v) => v.0,
            Stat::MaceDamage(v) => v.0,
            Stat::MaceHitDamageStunMultiplier(v) => v.0,
            Stat::MaceSlamAftershockChance(v) => v.0,
            Stat::MaceStrikeAftershockChance(v) => v.0,
            Stat::MaimOnHit(v) => v.0,
            Stat::MaimOnHitVsPoisonedEnemies(v) => v.0,
            Stat::ManaCostWhileNotLowMana(v) => v.0,
            Stat::ManaFlaskChargesGained(v) => v.0,
            Stat::ManaGainedOnBlock(v) => v.0,
            Stat::ManaLeechAppliesRecoveryToEnergyShieldAlso(v) => v.0,
            Stat::ManaRecoveryRate(v) => v.0,
            Stat::ManaRecoveryRateWhileAffectedByAManaFlask(v) => v.0,
            Stat::ManaRegenerationRate(v) => v.0,
            Stat::ManaRegenerationRateIfEnemyShockedRecently(v) => v.0,
            Stat::ManaRegenerationRateWhileMoving(v) => v.0,
            Stat::ManaRegenerationRateWhileNotOnLowMana(v) => v.0,
            Stat::ManaRegenerationRateWhileStationary(v) => v.0,
            Stat::MapAfflictionEncounterBossChance(v) => v.0,
            Stat::MapAfflictionRewardProgressOnKill(v) => v.0,
            Stat::MapAfflictionSecondaryWaveAcceleration(v) => v.0,
            Stat::MapBasicCurrencyDropChanceInSwampAndWaterBiome(v) => v.0,
            Stat::MapBossAreaChanceToBeCorrupted(v) => v.0,
            Stat::MapBossDamage(v) => v.0,
            Stat::MapBossDroppedItemQuantity(v) => v.0,
            Stat::MapBossExperienceFinal(v) => v.0,
            Stat::MapBossItemRarity(v) => v.0,
            Stat::MapBossMaximumLife(v) => v.0,
            Stat::MapBossingDifficulty(v) => v.0,
            Stat::MapBreachChanceToBeGuardedByMagicPack(v) => v.0,
            Stat::MapBreachChestsDropDoubleSplintersChance(v) => v.0,
            Stat::MapBreachChestsFinal(v) => v.0,
            Stat::MapBreachDomainDifficulty(v) => v.0,
            Stat::MapBreachHandsInflictWakingNightmare(v) => v.0,
            Stat::MapBreachMonsterQuantity(v) => v.0,
            Stat::MapBreachMonsterSplinterQuantity(v) => v.0,
            Stat::MapBreachRaresCatalystFullStackChance(v) => v.0,
            Stat::MapBreachRaresHaveSoulEater(v) => v.0,
            Stat::MapBreachTimePassed(v) => v.0,
            Stat::MapDeliriumAdditionalRewardTypeChance(v) => v.0,
            Stat::MapDeliriumBossLife(v) => v.0,
            Stat::MapDeliriumBossSplinterAmount(v) => v.0,
            Stat::MapDeliriumDaemonDamage(v) => v.0,
            Stat::MapDeliriumDifficultyScalingFromMirrorIsDouble(v) => v.0,
            Stat::MapDeliriumDoodadsFinal(v) => v.0,
            Stat::MapDroppedMapsRarity(v) => v.0,
            Stat::MapDuplicateXRareMonsters(v) => v.0,
            Stat::MapExpeditionArtifactQuantity(v) => v.0,
            Stat::MapExpeditionChestMarkerCount(v) => v.0,
            Stat::MapExpeditionChestsDespawnAfterXSeconds(v) => v.0,
            Stat::MapExpeditionEliteMarkerCount(v) => v.0,
            Stat::MapExpeditionFuseBurnTime(v) => v.0,
            Stat::MapExpeditionRareMonsters(v) => v.0,
            Stat::MapExpeditionRelicModEffect(v) => v.0,
            Stat::MapExpeditionVendorRerollCurrencyQuantity(v) => v.0,
            Stat::MapExpeditionXExtraRelicPrefixes(v) => v.0,
            Stat::MapExpeditionXExtraRelicSuffixes(v) => v.0,
            Stat::MapFinalBossMapKeyOfAtLeastSameTierAsCurrentMapDropChance(v) => v.0,
            Stat::MapGoldDropChanceInMountainBiome(v) => v.0,
            Stat::MapItemDropQuantity(v) => v.0,
            Stat::MapItemDropRarity(v) => v.0,
            Stat::MapJewelDropChanceInForestBiome(v) => v.0,
            Stat::MapKillingRareMonstersPausesDeliriumMirrorTimerForXSeconds(v) => v.0,
            Stat::MapLogbookDifficulty(v) => v.0,
            Stat::MapMagicChestAmount(v) => v.0,
            Stat::MapMagicPackSize(v) => v.0,
            Stat::MapMapItemDropChance(v) => v.0,
            Stat::MapMapsDropWithDistilledEmotionsAppliedChance(v) => v.0,
            Stat::MapModEffect(v) => v.0,
            Stat::MapModEffectPerMod(v) => v.0,
            Stat::MapModEffectPerTowerAffectingArea(v) => v.0,
            Stat::MapMonolithChance(v) => v.0,
            Stat::MapMonsterTre(v) => v.0,
            Stat::MapNonUniqueDeliriumMonstersSplinterAmount(v) => v.0,
            Stat::MapNumberOfMagicPacks(v) => v.0,
            Stat::MapNumberOfRarePacks(v) => v.0,
            Stat::MapPackSize(v) => v.0,
            Stat::MapPinnacleBossAdditionalUniqueDropChance(v) => v.0,
            Stat::MapPinnacleBossDifficulty(v) => v.0,
            Stat::MapPinnacleBossDropsXCorruptedRareTablets(v) => v.0,
            Stat::MapPinnacleBossDropsXWaystones(v) => v.0,
            Stat::MapPinnacleBossItemDroppedRarityFinal(v) => v.0,
            Stat::MapPinnacleBossRareSocketCurrencyChance(v) => v.0,
            Stat::MapPinnacleBossSpecialGemDropChance(v) => v.0,
            Stat::MapPlayerDamageTakenVsBreachMonsters(v) => v.0,
            Stat::MapPlayerShrineBuffEffectOnSelf(v) => v.0,
            Stat::MapPlayerShrineEffectDuration(v) => v.0,
            Stat::MapRareChestAmount(v) => v.0,
            Stat::MapRitualAdditionalDaemon(v) => v.0,
            Stat::MapRitualAdditionalRewardRerolls(v) => v.0,
            Stat::MapRitualAdditionalWildwoodPacks(v) => v.0,
            Stat::MapRitualContainsWildwoodWisp(v) => v.0,
            Stat::MapRitualDaemonDamage(v) => v.0,
            Stat::MapRitualDeferRewardTributeCost(v) => v.0,
            Stat::MapRitualDeferredRewardsAreOfferedAgainSooner(v) => v.0,
            Stat::MapRitualEncounterCountIsFour(v) => v.0,
            Stat::MapRitualMagicMonsters(v) => v.0,
            Stat::MapRitualMonsterDamageForEachTimeRevived(v) => v.0,
            Stat::MapRitualMonsterSpawningSpeed(v) => v.0,
            Stat::MapRitualMonsterTankinessForEachTimeRevived(v) => v.0,
            Stat::MapRitualNoRevivePenalty(v) => v.0,
            Stat::MapRitualOmenChance(v) => v.0,
            Stat::MapRitualRareMonsters(v) => v.0,
            Stat::MapRitualRewardsRerollCostFinal(v) => v.0,
            Stat::MapRitualVoodooKingKeyChance(v) => v.0,
            Stat::MapSanctumAndUltimatumKeyDropChanceInDesertBiome(v) => v.0,
            Stat::MapShrineChance(v) => v.0,
            Stat::MapSimulacrumDifficulty(v) => v.0,
            Stat::MapSocketCurrencyDropChanceInGrassBiome(v) => v.0,
            Stat::MapStrongboxChance(v) => v.0,
            Stat::MapStrongboxModEffect(v) => v.0,
            Stat::MapTierBonusPermillage(v) => v.0,
            Stat::MapTowerAugmentQuantity(v) => v.0,
            Stat::MapVoodooKingDifficulty(v) => v.0,
            Stat::MapsBossDropAdditionalBonusMapChance(v) => v.0,
            Stat::MapsWithBossesAdditionalEssence(v) => v.0,
            Stat::MapsWithBossesAdditionalShrine(v) => v.0,
            Stat::MapsWithBossesAdditionalStrongbox(v) => v.0,
            Stat::MapsWithBossesAreIrradiated(v) => v.0,
            Stat::MarkEffect(v) => v.0,
            Stat::MarkSkillCastSpeed(v) => v.0,
            Stat::MarkSkillDuration(v) => v.0,
            Stat::MarkSkillManaCost(v) => v.0,
            Stat::MarkedEnemiesCannotDealCriticalStrikes(v) => v.0,
            Stat::MarkedEnemyAccuracyRating(v) => v.0,
            Stat::MarkedEnemyDamageTaken(v) => v.0,
            Stat::MasterOfElementsEvasionRatingFinal(v) => v.0,
            Stat::MasteryChanceToEvadeMeleeAttacksFinal(v) => v.0,
            Stat::MaxDemonFormStacks(v) => v.0,
            Stat::MaxEnduranceCharges(v) => v.0,
            Stat::MaxFrenzyCharges(v) => v.0,
            Stat::MaxJadeStacks(v) => v.0,
            Stat::MaxPowerCharges(v) => v.0,
            Stat::MaximumDarkness(v) => v.0,
            Stat::MaximumEnergyShield(v) => v.0,
            Stat::MaximumEnergyShieldFromBodyArmour(v) => v.0,
            Stat::MaximumLife(v) => v.0,
            Stat::MaximumLifeAsFocus(v) => v.0,
            Stat::MaximumLifeManaAndEnergyShield(v) => v.0,
            Stat::MaximumLifeToGainAsMaximumEnergyShield(v) => v.0,
            Stat::MaximumMana(v) => v.0,
            Stat::MaximumManaGainedOnKill(v) => v.0,
            Stat::MaximumRage(v) => v.0,
            Stat::MaximumRageWhileWieldingAxe(v) => v.0,
            Stat::MeleeAttackSpeed(v) => v.0,
            Stat::MeleeCriticalStrikeChance(v) => v.0,
            Stat::MeleeCriticalStrikeChanceWhenOnFullLife(v) => v.0,
            Stat::MeleeDamage(v) => v.0,
            Stat::MeleeDamageAtCloseRange(v) => v.0,
            Stat::MeleeDamageVsHeavyStunnedEnemies(v) => v.0,
            Stat::MeleeDamageVsImmobilisedEnemies(v) => v.0,
            Stat::MeleeDamageWhenOnFullLife(v) => v.0,
            Stat::MeleeHitDamageStunMultiplier(v) => v.0,
            Stat::MeleeRange(v) => v.0,
            Stat::MinionAccuracyRating(v) => v.0,
            Stat::MinionAdditionalPhysicalDamageReduction(v) => v.0,
            Stat::MinionAttackAndCastSpeed(v) => v.0,
            Stat::MinionChaosResistance(v) => v.0,
            Stat::MinionColdDamageResistance(v) => v.0,
            Stat::MinionCooldownRecovery(v) => v.0,
            Stat::MinionCriticalStrikeChance(v) => v.0,
            Stat::MinionCriticalStrikeMultiplier(v) => v.0,
            Stat::MinionDamage(v) => v.0,
            Stat::MinionDamageTakenRecoupedAsTheirLife(v) => v.0,
            Stat::MinionDamageWhileYouHaveAtLeastTwoDifferentActiveOfferings(v) => v.0,
            Stat::MinionElementalResistance(v) => v.0,
            Stat::MinionEvasionRating(v) => v.0,
            Stat::MinionFireDamageResistance(v) => v.0,
            Stat::MinionLifeRecoveryRate(v) => v.0,
            Stat::MinionLifeRegenerationRatePerMinute(v) => v.0,
            Stat::MinionLightningDamageResistance(v) => v.0,
            Stat::MinionMaximumAllElementalResistances(v) => v.0,
            Stat::MinionMaximumLife(v) => v.0,
            Stat::MinionMaximumLifeToGainAsMaximumEnergyShield(v) => v.0,
            Stat::MinionMovementSpeed(v) => v.0,
            Stat::MinionReservation(v) => v.0,
            Stat::MinionResummonSpeed(v) => v.0,
            Stat::MinionSkillAreaOfEffect(v) => v.0,
            Stat::MinionsDealOfPhysicalDamageAsAdditionalChaosDamage(v) => v.0,
            Stat::MinionsGainYourDexterity(v) => v.0,
            Stat::MinionsGetAmuletStatsInsteadOfYou(v) => v.0,
            Stat::MinionsHaveChanceToInflictWitherOnHit(v) => v.0,
            Stat::MovementSpeedDuringFlaskEffect(v) => v.0,
            Stat::MovementSpeedIfCastAMarkSpellRecently(v) => v.0,
            Stat::MovementSpeedIfEnemyKilledRecently(v) => v.0,
            Stat::MovementSpeedIfPinnedEnemyRecently(v) => v.0,
            Stat::MovementSpeedWhileDualWielding(v) => v.0,
            Stat::MovementSpeedWhileUsingCharm(v) => v.0,
            Stat::MovementSpeedWhileYouHaveEnergyShield(v) => v.0,
            Stat::NonDamagingAilmentEffect(v) => v.0,
            Stat::NonDamagingAilmentEffectWithCriticalStrikes(v) => v.0,
            Stat::NonSkillBaseAllDamageToGainAsChaos(v) => v.0,
            Stat::NonSkillBaseAllDamageToGainAsCold(v) => v.0,
            Stat::NonSkillBaseAllDamageToGainAsFire(v) => v.0,
            Stat::NonSkillBaseAllDamageToGainAsLightning(v) => v.0,
            Stat::NonSkillBaseAllDamageToGainAsPhysical(v) => v.0,
            Stat::NonSkillBaseLightningDamageToGainAsCold(v) => v.0,
            Stat::NonSkillBasePhysicalDamageToGainAsChaos(v) => v.0,
            Stat::NonSkillBasePhysicalDamageToGainAsFire(v) => v.0,
            Stat::NonSkillColdDamageToGainAsFireVsFrozenEnemies(v) => v.0,
            Stat::NotableKnockbackDistanceFinalForBlockedHits(v) => v.0,
            Stat::NumAdditionalSkillSlots(v) => v.0,
            Stat::NumCharmSlots(v) => v.0,
            Stat::NumberOfAdditionalMarksAllowed(v) => v.0,
            Stat::NumberOfAdditionalPoisonStacks(v) => v.0,
            Stat::NumberOfAdditionalProjectiles(v) => v.0,
            Stat::NumberOfInfernalFamiliarsAllowed(v) => v.0,
            Stat::OfferingAreaOfEffect(v) => v.0,
            Stat::OfferingDuration(v) => v.0,
            Stat::OfferingLife(v) => v.0,
            Stat::OneHandedAttackAilmentChance(v) => v.0,
            Stat::OneHandedAttackSpeed(v) => v.0,
            Stat::OneHandedMeleeAccuracyRating(v) => v.0,
            Stat::OneHandedMeleeAttackSpeed(v) => v.0,
            Stat::OneHandedMeleeCriticalStrikeChance(v) => v.0,
            Stat::OneHandedMeleeCriticalStrikeMultiplier(v) => v.0,
            Stat::PassiveTreeMaceDamageFinalVsHeavyStunnedEnemies(v) => v.0,
            Stat::PathfinderAscendancyPoisonOnEnemiesYouKillSpreadToEnemiesWithinX(v) => v.0,
            Stat::PathfinderPoisonDurationFinal(v) => v.0,
            Stat::PhysicalAttackDamage(v) => v.0,
            Stat::PhysicalDamage(v) => v.0,
            Stat::PhysicalDamageFromHitsTakenAsRandomElement(v) => v.0,
            Stat::PhysicalDamagePreventedRecoupedAsLife(v) => v.0,
            Stat::PhysicalDamageReductionRating(v) => v.0,
            Stat::PhysicalDamageTakenRecoupedAsLife(v) => v.0,
            Stat::PhysicalHitAndDotDamageTakenAsChaos(v) => v.0,
            Stat::PlacingTrapsCooldownRecovery(v) => v.0,
            Stat::PoisonDurationPerPoisonAppliedRecently(v) => v.0,
            Stat::PoisonEffectVsNonPoisonedEnemies(v) => v.0,
            Stat::PowerChargeDuration(v) => v.0,
            Stat::ProjectileAilmentChance(v) => v.0,
            Stat::ProjectileDamage(v) => v.0,
            Stat::ProjectileHitDamageStunMultiplier(v) => v.0,
            Stat::QuarterstaffAccuracyRating(v) => v.0,
            Stat::QuarterstaffAttackSpeed(v) => v.0,
            Stat::QuarterstaffCriticalStrikeChance(v) => v.0,
            Stat::QuarterstaffCriticalStrikeMultiplier(v) => v.0,
            Stat::QuarterstaffDamage(v) => v.0,
            Stat::QuarterstaffDazeBuildUp(v) => v.0,
            Stat::QuarterstaffHitDamageFreezeMultiplier(v) => v.0,
            Stat::QuarterstaffHitDamageStunMultiplier(v) => v.0,
            Stat::QuarterstaffSkillsThatConsumePowerChargesCountAsConsumingXAdditionalPowerCharges(v) => v.0,
            Stat::QuiverModEffect(v) => v.0,
            Stat::RageDecaySpeed(v) => v.0,
            Stat::RageLossDelayMs(v) => v.0,
            Stat::ReapplyEnemyShockOnConsumingEnemyShockChance(v) => v.0,
            Stat::RecoupElementalDamageAsEnergyShield(v) => v.0,
            Stat::RecoupSpeed(v) => v.0,
            Stat::RecoverLifeOnHeavyStunningRareOrUniqueEnemy(v) => v.0,
            Stat::RecoverLifePerEnduranceChargeConsumed(v) => v.0,
            Stat::RecoverLifeWhenYouCreateAnOffering(v) => v.0,
            Stat::RecoverLifeWhenYouUseALifeFlaskWhileOnLowLife(v) => v.0,
            Stat::RecoverManaWhenYouInvokeASpell(v) => v.0,
            Stat::RecoverMaximumLifeOnEnemyKilledChance(v) => v.0,
            Stat::RecoverMaximumLifeOnKill(v) => v.0,
            Stat::RecoverMaximumLifeOnKillingPoisonedEnemy(v) => v.0,
            Stat::RecoverMaximumLifeOnManaFlaskUse(v) => v.0,
            Stat::RecoverMaximumManaOnCharmUse(v) => v.0,
            Stat::RecoverMaximumManaOnKill(v) => v.0,
            Stat::RecoverXLifeOnBlock(v) => v.0,
            Stat::ReduceEnemyElementalResistance(v) => v.0,
            Stat::RefreshIgniteDurationOnCriticalStrikeChance(v) => v.0,
            Stat::ReloadSpeed(v) => v.0,
            Stat::RemoveCurseOnManaFlaskUse(v) => v.0,
            Stat::ResoluteTechnique(v) => v.0,
            Stat::RestoreLifeAndManaOnWarcry(v) => v.0,
            Stat::ShieldArmour(v) => v.0,
            Stat::ShieldEvasionRating(v) => v.0,
            Stat::ShockChance(v) => v.0,
            Stat::ShockChanceVsElectrocutedEnemies(v) => v.0,
            Stat::ShockDuration(v) => v.0,
            Stat::ShockEffect(v) => v.0,
            Stat::ShockEffectWithCriticalStrikes(v) => v.0,
            Stat::SkillAreaOfEffectIfEnemyKilledRecently(v) => v.0,
            Stat::SkillAreaOfEffectWhenUnarmed(v) => v.0,
            Stat::SkillCostBaseLifeEqualToBaseMana(v) => v.0,
            Stat::SkillEffectDuration(v) => v.0,
            Stat::SkillSpeed(v) => v.0,
            Stat::SlamAftershockChance(v) => v.0,
            Stat::SlamSkillAreaOfEffect(v) => v.0,
            Stat::SlowsHaveNoPotencyOnYou(v) => v.0,
            Stat::SmallPassivesEffect(v) => v.0,
            Stat::SorceryWardStrength(v) => v.0,
            Stat::SpawnDefenderWithTotem(v) => v.0,
            Stat::SpearAttackSpeed(v) => v.0,
            Stat::SpearCriticalStrikeChance(v) => v.0,
            Stat::SpearDamage(v) => v.0,
            Stat::SpellAreaDamage(v) => v.0,
            Stat::SpellAreaOfEffect(v) => v.0,
            Stat::SpellCriticalStrikeChance(v) => v.0,
            Stat::SpellCriticalStrikeChanceWhileWieldingStaff(v) => v.0,
            Stat::SpellCriticalStrikeMultiplierWhileWieldingStaff(v) => v.0,
            Stat::SpellDamage(v) => v.0,
            Stat::SpellDamageIfHaveCritRecently(v) => v.0,
            Stat::SpellDamageWhileEsFull(v) => v.0,
            Stat::SpellDamageWhileWieldingMeleeWeapon(v) => v.0,
            Stat::SpellSkillGemLevel(v) => v.0,
            Stat::SpellSkillProjectileSpeed(v) => v.0,
            Stat::SpellStaffDamage(v) => v.0,
            Stat::Spirit(v) => v.0,
            Stat::StaffAttackAreaOfEffect(v) => v.0,
            Stat::StormweaverChillEffectFinal(v) => v.0,
            Stat::StormweaverShockDurationFinal(v) => v.0,
            Stat::Strength(v) => v.0,
            Stat::StunThreshold(v) => v.0,
            Stat::StunThresholdBasedOnEnergyShieldInsteadOfLife(v) => v.0,
            Stat::StunThresholdDuringEmpoweredAttacks(v) => v.0,
            Stat::StunThresholdFromBaseArmourFromEquipment(v) => v.0,
            Stat::StunThresholdFromLowestOfBaseHelmetEvasionRatingAndArmour(v) => v.0,
            Stat::StunThresholdFromMaximumEnergyShield(v) => v.0,
            Stat::StunThresholdPerNumberOfTimesStunnedRecently(v) => v.0,
            Stat::StunThresholdPerRage(v) => v.0,
            Stat::StunThresholdPerStrength(v) => v.0,
            Stat::StunThresholdWhenNotStunnedRecently(v) => v.0,
            Stat::StunThresholdWhenOnFullLife(v) => v.0,
            Stat::SummonTotemCastSpeed(v) => v.0,
            Stat::SupportAnticipationChargeGainFrequency(v) => v.0,
            Stat::SupportGemLimit(v) => v.0,
            Stat::SwordAttackSpeed(v) => v.0,
            Stat::SwordDamage(v) => v.0,
            Stat::TabletEffectWhenOpeningAMap(v) => v.0,
            Stat::ThornsDamage(v) => v.0,
            Stat::ThornsDamageIfBlockedRecently(v) => v.0,
            Stat::TitanDamageFinalAgainstHeavyStunnedEnemies(v) => v.0,
            Stat::TitanExpandedMainInventory(v) => v.0,
            Stat::TitanMaximumLifeFinal(v) => v.0,
            Stat::TotemAdditionalPhysicalDamageReduction(v) => v.0,
            Stat::TotemDamage(v) => v.0,
            Stat::TotemDuration(v) => v.0,
            Stat::TotemElementalResistance(v) => v.0,
            Stat::TotemLife(v) => v.0,
            Stat::TotemPlacementRange(v) => v.0,
            Stat::TotemSkillAttackSpeed(v) => v.0,
            Stat::TotemSkillCastSpeed(v) => v.0,
            Stat::TotemsAttackSpeedPerActiveTotem(v) => v.0,
            Stat::TotemsRegenerateLifePerMinute(v) => v.0,
            Stat::TotemsSpellsCastSpeedPerActiveTotem(v) => v.0,
            Stat::TrapCriticalStrikeChance(v) => v.0,
            Stat::TrapDamage(v) => v.0,
            Stat::TrapThrowingSpeed(v) => v.0,
            Stat::TriggerElementalStormOnCrit(v) => v.0,
            Stat::TriggerSkillsRefundHalfEnergySpentChance(v) => v.0,
            Stat::TriggerWildStrikeOnAttackCrit(v) => v.0,
            Stat::TriggeredSpellSpellDamage(v) => v.0,
            Stat::TwoHandedMeleeAccuracyRating(v) => v.0,
            Stat::UnaffectedByChillDuringDodgeRoll(v) => v.0,
            Stat::UnaffectedByChillWhileManaLeeching(v) => v.0,
            Stat::UnarmedAttackSkillMeleeDashRange(v) => v.0,
            Stat::UnarmedAttackSpeed(v) => v.0,
            Stat::WarbringerOverbreakArmour(v) => v.0,
            Stat::WarcriesBypassCooldown(v) => v.0,
            Stat::WarcryCooldownSpeed(v) => v.0,
            Stat::WarcryDamage(v) => v.0,
            Stat::WarcryEmpowersNextXMeleeAttacks(v) => v.0,
            Stat::WarcrySkillAreaOfEffect(v) => v.0,
            Stat::WarcrySpeed(v) => v.0,
            Stat::WeaponSwapSpeed(v) => v.0,
            Stat::WhileUsingSwordReduceEnemyBlock(v) => v.0,
            Stat::WitchPassiveMaximumLightningDamageFinal(v) => v.0,
            Stat::WitchhunterArmourEvasionFinal(v) => v.0,
            Stat::WitchhunterUpToDamageFinalAgainstTargetsWithMissingFocus(v) => v.0,
            Stat::WitheredEffect(v) => v.0,
            Stat::WorldMapUniqueMapsVisibleXUnitsBeyondLightRadius(v) => v.0,
            Stat::XFasterStartOfSorceryWardRecovery(v) => v.0,
            Stat::YouAndAlliesInPresenceAllDamageCanIgniteWhileNotOnLowInfernalFlame(v) => v.0,
            Stat::YouAndAlliesInPresenceNonSkillBaseAllDamageToGainAsFireWhileOnHighInfernalFlame(v) => v.0,
            Stat::YouGainLifeWhenOneOfYourMinionsIsRevived(v) => v.0,
            Stat::Unknown(_, v) => *v,
        }
    }
}

impl<'de> Deserialize<'de> for Stat {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where D: Deserializer<'de>,
    {
        let key_value: HashMap<String, u16> = Deserialize::deserialize(deserializer)?;
        for (k, v) in key_value.into_iter() {
            return Ok(match k.as_str() {
                "accuracy_rating_+%" => Stat::AccuracyRating(PlusPercentage(v as f32)),
                "accuracy_rating_+%_equal_to_%_attack_critical_strike_chance" => Stat::AccuracyRatingEqualToAttackCriticalStrikeChance(Other(v as f32)),
                "accuracy_rating_vs_bleeding_enemies" => Stat::AccuracyRatingVsBleedingEnemies(Other(v as f32)),
                "accuracy_rating_+%_vs_enemies_in_close_range" => Stat::AccuracyRatingVsEnemiesInCloseRange(Other(v as f32)),
                "accuracy_rating_+%_vs_rare_or_unique_enemy" => Stat::AccuracyRatingVsRareOrUniqueEnemy(Other(v as f32)),
                "accuracy_rating_while_dual_wielding_+%" => Stat::AccuracyRatingWhileDualWielding(PlusPercentage(v as f32)),
                "additional_all_attributes" => Stat::AdditionalAllAttributes(Other(v as f32)),
                "additional_critical_strike_chance_permyriad_with_herald_skills" => Stat::AdditionalCriticalStrikeChancePermyriadWithHeraldSkills(Other(v as f32)),
                "additional_maximum_all_elemental_resistances_%" => Stat::AdditionalMaximumAllElementalResistances(Other(v as f32)),
                "additional_physical_damage_reduction_%_per_jade" => Stat::AdditionalPhysicalDamageReductionPerJade(Other(v as f32)),
                "additive_armour_modifiers_apply_to_energy_shield_recharge_rate_at_%_value" => Stat::AdditiveArmourModifiersApplyToEnergyShieldRechargeRateAtValue(Other(v as f32)),
                "aftershock_area_of_effect_+%" => Stat::AftershockAreaOfEffect(PlusPercentage(v as f32)),
                "aggravate_bleeding_older_than_ms_on_hit" => Stat::AggravateBleedingOlderThanMsOnHit(Other(v as f32)),
                "aggravate_bleeding_on_attack_crit_chance_%" => Stat::AggravateBleedingOnAttackCritChance(Other(v as f32)),
                "aggravate_bleeding_on_exerted_attack_hit_chance_%" => Stat::AggravateBleedingOnExertedAttackHitChance(Other(v as f32)),
                "aggravate_bleeding_when_inflicted_vs_enemies_on_jagged_ground_chance_%" => Stat::AggravateBleedingWhenInflictedVsEnemiesOnJaggedGroundChance(Other(v as f32)),
                "ailment_chance_+%" => Stat::AilmentChance(PlusPercentage(v as f32)),
                "ailment_chance_+%_vs_rare_or_unique_enemy" => Stat::AilmentChanceVsRareOrUniqueEnemy(Other(v as f32)),
                "ailment_effect_+%" => Stat::AilmentEffect(PlusPercentage(v as f32)),
                "ailment_threshold_+%" => Stat::AilmentThreshold(PlusPercentage(v as f32)),
                "ailment_threshold_+_from_lowest_of_base_boots_evasion_rating_and_armour" => Stat::AilmentThresholdFromLowestOfBaseBootsEvasionRatingAndArmour(Other(v as f32)),
                "ailment_threshold_+_per_dexterity" => Stat::AilmentThresholdPerDexterity(Other(v as f32)),
                "all_attributes_+%" => Stat::AllAttributes(PlusPercentage(v as f32)),
                "all_damage_can_chill" => Stat::AllDamageCanChill(Other(v as f32)),
                "all_damage_can_shock" => Stat::AllDamageCanShock(Other(v as f32)),
                "all_skill_gem_level_+" => Stat::AllSkillGemLevel(Plus(v as f32)),
                "all_skill_gem_quality_+" => Stat::AllSkillGemQuality(Plus(v as f32)),
                "allies_in_presence_accuracy_rating" => Stat::AlliesInPresenceAccuracyRating(Other(v as f32)),
                "allies_in_presence_attack_speed_+%" => Stat::AlliesInPresenceAttackSpeed(PlusPercentage(v as f32)),
                "allies_in_presence_life_regeneration_rate_per_minute_equal_to_your_maximum_life_%" => Stat::AlliesInPresenceLifeRegenerationRatePerMinuteEqualToYourMaximumLife(Other(v as f32)),
                "ancestral_slam_every_other_slam" => Stat::AncestralSlamEveryOtherSlam(Other(v as f32)),
                "arcane_surge_effect_on_self_+%" => Stat::ArcaneSurgeEffectOnSelf(PlusPercentage(v as f32)),
                "area_damage_+%" => Stat::AreaDamage(PlusPercentage(v as f32)),
                "area_of_effect_+%_if_enemy_stunned_with_two_handed_melee_weapon_recently" => Stat::AreaOfEffectIfEnemyStunnedWithTwoHandedMeleeWeaponRecently(Other(v as f32)),
                "area_of_effect_+%_if_have_stunned_an_enemy_recently" => Stat::AreaOfEffectIfHaveStunnedAnEnemyRecently(Other(v as f32)),
                "area_of_effect_+%_with_herald_skills" => Stat::AreaOfEffectWithHeraldSkills(Other(v as f32)),
                "area_skill_knockback_chance_%" => Stat::AreaSkillKnockbackChance(Other(v as f32)),
                "armour_and_evasion_on_low_life_+%" => Stat::ArmourAndEvasionOnLowLife(PlusPercentage(v as f32)),
                "armour_break_amount_+%" => Stat::ArmourBreakAmount(PlusPercentage(v as f32)),
                "armour_break_amount_+%_vs_enemies_affected_by_ailments" => Stat::ArmourBreakAmountVsEnemiesAffectedByAilments(Other(v as f32)),
                "armour_break_damage_%_dealt_as_armour_break" => Stat::ArmourBreakDamageDealtAsArmourBreak(Other(v as f32)),
                "armour_break_duration_+%" => Stat::ArmourBreakDuration(PlusPercentage(v as f32)),
                "armour_break_equal_to_%_physical_damage_dealt_on_critical_strike_with_spells" => Stat::ArmourBreakEqualToPhysicalDamageDealtOnCriticalStrikeWithSpells(Other(v as f32)),
                "armour_break_%_of_armour_on_heavy_stunning" => Stat::ArmourBreakOfArmourOnHeavyStunning(Other(v as f32)),
                "armour_evasion_+%_while_leeching" => Stat::ArmourEvasionWhileLeeching(Other(v as f32)),
                "armour_+_from_%_strength_requirements_from_boots_gloves_helmets" => Stat::ArmourFromStrengthRequirementsFromBootsGlovesHelmets(Other(v as f32)),
                "armour_+%_if_consumed_endurance_charge_recently" => Stat::ArmourIfConsumedEnduranceChargeRecently(Other(v as f32)),
                "armour_+%_if_have_been_hit_recently" => Stat::ArmourIfHaveBeenHitRecently(Other(v as f32)),
                "armour_+%_if_hit_enemy_with_melee_attack_recently" => Stat::ArmourIfHitEnemyWithMeleeAttackRecently(Other(v as f32)),
                "armour_+%_if_you_havent_been_hit_recently" => Stat::ArmourIfYouHaventBeenHitRecently(Other(v as f32)),
                "armour_+%_per_rage" => Stat::ArmourPerRage(Other(v as f32)),
                "armour_+%_while_surrounded" => Stat::ArmourWhileSurrounded(Other(v as f32)),
                "arrow_base_number_of_targets_to_pierce" => Stat::ArrowBaseNumberOfTargetsToPierce(Other(v as f32)),
                "arrow_critical_strike_chance_+%_max_as_distance_travelled_increases" => Stat::ArrowCriticalStrikeChanceMaxAsDistanceTravelledIncreases(Other(v as f32)),
                "arrow_speed_additive_modifiers_also_apply_to_bow_damage" => Stat::ArrowSpeedAdditiveModifiersAlsoApplyToBowDamage(Other(v as f32)),
                "ascendancy_beidats_gaze_mana_+_per_X_maximum_life" => Stat::AscendancyBeidatsGazeManaPerXMaximumLife(Other(v as f32)),
                "ascendancy_beidats_hand_energy_shield_+_per_X_maximum_life" => Stat::AscendancyBeidatsHandEnergyShieldPerXMaximumLife(Other(v as f32)),
                "ascendancy_beidats_will_spirit_+_per_X_maximum_life" => Stat::AscendancyBeidatsWillSpiritPerXMaximumLife(Other(v as f32)),
                "ascendancy_chronomancer_apex_of_the_moment_base_slow_aura_value" => Stat::AscendancyChronomancerApexOfTheMomentBaseSlowAuraValue(Other(v as f32)),
                "ascendancy_energy_generated_+%_final" => Stat::AscendancyEnergyGeneratedFinal(Other(v as f32)),
                "ascendancy_pathfinder_flask_charges_gained_+%_final" => Stat::AscendancyPathfinderFlaskChargesGainedFinal(Other(v as f32)),
                "ascendancy_titan_damage_reduction_rating_from_body_armour_+%_final" => Stat::AscendancyTitanDamageReductionRatingFromBodyArmourFinal(Other(v as f32)),
                "ascendancy_warbringer_block_chance_+%_final" => Stat::AscendancyWarbringerBlockChanceFinal(Other(v as f32)),
                "atlas_keystone_corruption_roulette" => Stat::AtlasKeystoneCorruptionRoulette(Other(v as f32)),
                "atlas_keystone_extreme_archaeology" => Stat::AtlasKeystoneExtremeArchaeology(Other(v as f32)),
                "atlas_keystone_prefix_or_suffix_mod_effect_+%_final" => Stat::AtlasKeystonePrefixOrSuffixModEffectFinal(Other(v as f32)),
                "attack_additional_critical_strike_chance_permyriad" => Stat::AttackAdditionalCriticalStrikeChancePermyriad(Other(v as f32)),
                "attack_and_cast_speed_+%" => Stat::AttackAndCastSpeed(PlusPercentage(v as f32)),
                "attack_and_cast_speed_+%_on_placing_totem" => Stat::AttackAndCastSpeedOnPlacingTotem(Other(v as f32)),
                "attack_and_cast_speed_+%_while_affected_by_a_mana_flask" => Stat::AttackAndCastSpeedWhileAffectedByAManaFlask(Other(v as f32)),
                "attack_and_cast_speed_+%_with_elemental_skills" => Stat::AttackAndCastSpeedWithElementalSkills(Other(v as f32)),
                "attack_and_cast_speed_+%_with_lightning_skills" => Stat::AttackAndCastSpeedWithLightningSkills(Other(v as f32)),
                "attack_area_damage_+%" => Stat::AttackAreaDamage(PlusPercentage(v as f32)),
                "attack_area_of_effect_+%" => Stat::AttackAreaOfEffect(PlusPercentage(v as f32)),
                "attack_critical_strike_chance_+%" => Stat::AttackCriticalStrikeChance(PlusPercentage(v as f32)),
                "attack_critical_strike_multiplier_+" => Stat::AttackCriticalStrikeMultiplier(Plus(v as f32)),
                "attack_damage_+%" => Stat::AttackDamage(PlusPercentage(v as f32)),
                "attack_damage_vs_bleeding_enemies_+%" => Stat::AttackDamageVsBleedingEnemies(PlusPercentage(v as f32)),
                "attack_damage_+%_vs_rare_or_unique_enemy" => Stat::AttackDamageVsRareOrUniqueEnemy(Other(v as f32)),
                "attack_damage_+%_when_on_full_life" => Stat::AttackDamageWhenOnFullLife(Other(v as f32)),
                "attack_damage_+%_when_on_low_life" => Stat::AttackDamageWhenOnLowLife(Other(v as f32)),
                "attack_damage_+%_while_ally_in_presence" => Stat::AttackDamageWhileAllyInPresence(Other(v as f32)),
                "attack_damage_+%_while_surrounded" => Stat::AttackDamageWhileSurrounded(Other(v as f32)),
                "attack_mana_cost_+%" => Stat::AttackManaCost(PlusPercentage(v as f32)),
                "attack_skills_additional_totems_allowed" => Stat::AttackSkillsAdditionalTotemsAllowed(Other(v as f32)),
                "attack_skills_damage_+%_while_holding_shield" => Stat::AttackSkillsDamageWhileHoldingShield(Other(v as f32)),
                "attack_speed_+%" => Stat::AttackSpeed(PlusPercentage(v as f32)),
                "attack_speed_+%_during_flask_effect" => Stat::AttackSpeedDuringFlaskEffect(Other(v as f32)),
                "attack_speed_+%_if_enemy_killed_recently" => Stat::AttackSpeedIfEnemyKilledRecently(Other(v as f32)),
                "attack_speed_+%_if_have_been_hit_recently" => Stat::AttackSpeedIfHaveBeenHitRecently(Other(v as f32)),
                "attack_speed_+%_if_rare_or_unique_enemy_nearby" => Stat::AttackSpeedIfRareOrUniqueEnemyNearby(Other(v as f32)),
                "attack_speed_+%_if_you_have_not_attacked_recently" => Stat::AttackSpeedIfYouHaveNotAttackedRecently(Other(v as f32)),
                "attack_speed_while_dual_wielding_+%" => Stat::AttackSpeedWhileDualWielding(PlusPercentage(v as f32)),
                "attack_speed_+%_while_holding_shield" => Stat::AttackSpeedWhileHoldingShield(Other(v as f32)),
                "attack_speed_+%_while_surrounded" => Stat::AttackSpeedWhileSurrounded(Other(v as f32)),
                "attacks_chance_to_blind_on_hit_%" => Stat::AttacksChanceToBlindOnHit(Other(v as f32)),
                "aura_effect_+%" => Stat::AuraEffect(PlusPercentage(v as f32)),
                "axe_attack_speed_+%" => Stat::AxeAttackSpeed(PlusPercentage(v as f32)),
                "axe_damage_+%" => Stat::AxeDamage(PlusPercentage(v as f32)),
                "base_aggravate_bleeding_on_attack_hit_chance_%" => Stat::BaseAggravateBleedingOnAttackHitChance(Other(v as f32)),
                "base_all_ailment_duration_on_self_+%" => Stat::BaseAllAilmentDurationOnSelf(PlusPercentage(v as f32)),
                "base_armour_%_applies_to_fire_damage" => Stat::BaseArmourAppliesToFireDamage(Other(v as f32)),
                "base_attack_damage_penetrates_elemental_resist_%" => Stat::BaseAttackDamagePenetratesElementalResist(Other(v as f32)),
                "base_bleed_duration_+%" => Stat::BaseBleedDuration(PlusPercentage(v as f32)),
                "base_bleeding_effect_+%" => Stat::BaseBleedingEffect(PlusPercentage(v as f32)),
                "base_block_%_damage_taken" => Stat::BaseBlockDamageTaken(Other(v as f32)),
                "base_body_armour_permyriad_to_gain_as_physical_thorns_damage" => Stat::BaseBodyArmourPermyriadToGainAsPhysicalThornsDamage(Other(v as f32)),
                "base_cast_speed_+%" => Stat::BaseCastSpeed(PlusPercentage(v as f32)),
                "base_chance_to_inflict_bleeding_%" => Stat::BaseChanceToInflictBleeding(Other(v as f32)),
                "base_chance_to_not_consume_corpse_%" => Stat::BaseChanceToNotConsumeCorpse(Other(v as f32)),
                "base_chance_to_pierce_%" => Stat::BaseChanceToPierce(Other(v as f32)),
                "base_chance_to_poison_on_hit_%" => Stat::BaseChanceToPoisonOnHit(Other(v as f32)),
                "base_chance_to_poison_on_hit_%_vs_non_poisoned_enemies" => Stat::BaseChanceToPoisonOnHitVsNonPoisonedEnemies(Other(v as f32)),
                "base_chaos_damage_resistance_%" => Stat::BaseChaosDamageResistance(Other(v as f32)),
                "base_cold_damage_resistance_%" => Stat::BaseColdDamageResistance(Other(v as f32)),
                "base_cooldown_speed_+%" => Stat::BaseCooldownSpeed(PlusPercentage(v as f32)),
                "base_cost_+%" => Stat::BaseCost(PlusPercentage(v as f32)),
                "base_critical_strike_multiplier_+" => Stat::BaseCriticalStrikeMultiplier(Plus(v as f32)),
                "base_curse_duration_+%" => Stat::BaseCurseDuration(PlusPercentage(v as f32)),
                "base_damage_removed_from_mana_before_life_%" => Stat::BaseDamageRemovedFromManaBeforeLife(Other(v as f32)),
                "base_damaging_ailment_effect_+%" => Stat::BaseDamagingAilmentEffect(PlusPercentage(v as f32)),
                "base_darkness" => Stat::BaseDarkness(Other(v as f32)),
                "base_darkness_refresh_rate_ms" => Stat::BaseDarknessRefreshRateMs(Other(v as f32)),
                "base_debuff_slow_magnitude_+%" => Stat::BaseDebuffSlowMagnitude(PlusPercentage(v as f32)),
                "base_dexterity" => Stat::BaseDexterity(Other(v as f32)),
                "base_dexterity_and_intelligence" => Stat::BaseDexterityAndIntelligence(Other(v as f32)),
                "base_elemental_status_ailment_duration_+%" => Stat::BaseElementalStatusAilmentDuration(PlusPercentage(v as f32)),
                "base_enemy_critical_strike_chance_+%_against_self" => Stat::BaseEnemyCriticalStrikeChanceAgainstSelf(Other(v as f32)),
                "base_evasion_rating" => Stat::BaseEvasionRating(Other(v as f32)),
                "base_fire_damage_resistance_%" => Stat::BaseFireDamageResistance(Other(v as f32)),
                "base_frenzy_charge_duration_+%" => Stat::BaseFrenzyChargeDuration(PlusPercentage(v as f32)),
                "base_ignite_effect_+%" => Stat::BaseIgniteEffect(PlusPercentage(v as f32)),
                "base_intelligence" => Stat::BaseIntelligence(Other(v as f32)),
                "base_life_gained_on_enemy_death" => Stat::BaseLifeGainedOnEnemyDeath(Other(v as f32)),
                "base_life_leech_amount_+%" => Stat::BaseLifeLeechAmount(PlusPercentage(v as f32)),
                "base_life_leech_does_not_stop_at_full_life" => Stat::BaseLifeLeechDoesNotStopAtFullLife(Other(v as f32)),
                "base_life_leech_from_all_spell_damage_permyriad" => Stat::BaseLifeLeechFromAllSpellDamagePermyriad(Other(v as f32)),
                "base_life_leech_rate_+%" => Stat::BaseLifeLeechRate(PlusPercentage(v as f32)),
                "base_mana_cost_-%" => Stat::BaseManaCost(MinusPercentage(v as f32)),
                "base_mana_leech_amount_+%" => Stat::BaseManaLeechAmount(PlusPercentage(v as f32)),
                "base_mana_leech_is_instant" => Stat::BaseManaLeechIsInstant(Other(v as f32)),
                "base_maximum_chaos_damage_resistance_%" => Stat::BaseMaximumChaosDamageResistance(Other(v as f32)),
                "base_maximum_cold_damage_resistance_%" => Stat::BaseMaximumColdDamageResistance(Other(v as f32)),
                "base_maximum_energy_shield" => Stat::BaseMaximumEnergyShield(Other(v as f32)),
                "base_maximum_fire_damage_resistance_%" => Stat::BaseMaximumFireDamageResistance(Other(v as f32)),
                "base_maximum_life" => Stat::BaseMaximumLife(Other(v as f32)),
                "base_maximum_lightning_damage_resistance_%" => Stat::BaseMaximumLightningDamageResistance(Other(v as f32)),
                "base_maximum_mana" => Stat::BaseMaximumMana(Other(v as f32)),
                "base_movement_velocity_+%" => Stat::BaseMovementVelocity(PlusPercentage(v as f32)),
                "base_penetrate_elemental_resistances_%" => Stat::BasePenetrateElementalResistances(Other(v as f32)),
                "base_physical_damage_reduction_rating" => Stat::BasePhysicalDamageReductionRating(Other(v as f32)),
                "base_poison_duration_+%" => Stat::BasePoisonDuration(PlusPercentage(v as f32)),
                "base_poison_effect_+%" => Stat::BasePoisonEffect(PlusPercentage(v as f32)),
                "base_projectile_speed_+%" => Stat::BaseProjectileSpeed(PlusPercentage(v as f32)),
                "base_reduce_enemy_cold_resistance_%" => Stat::BaseReduceEnemyColdResistance(Other(v as f32)),
                "base_reduce_enemy_fire_resistance_%" => Stat::BaseReduceEnemyFireResistance(Other(v as f32)),
                "base_reduce_enemy_lightning_resistance_%" => Stat::BaseReduceEnemyLightningResistance(Other(v as f32)),
                "base_resist_all_elements_%" => Stat::BaseResistAllElements(Other(v as f32)),
                "base_self_critical_strike_multiplier_-%" => Stat::BaseSelfCriticalStrikeMultiplier(MinusPercentage(v as f32)),
                "base_self_freeze_duration_-%" => Stat::BaseSelfFreezeDuration(MinusPercentage(v as f32)),
                "base_self_ignite_duration_-%" => Stat::BaseSelfIgniteDuration(MinusPercentage(v as f32)),
                "base_self_shock_duration_-%" => Stat::BaseSelfShockDuration(MinusPercentage(v as f32)),
                "base_should_have_arcane_surge_from_stat" => Stat::BaseShouldHaveArcaneSurgeFromStat(Other(v as f32)),
                "base_skill_area_of_effect_+%" => Stat::BaseSkillAreaOfEffect(PlusPercentage(v as f32)),
                "base_skill_cost_life_instead_of_mana_%" => Stat::BaseSkillCostLifeInsteadOfMana(Other(v as f32)),
                "base_slow_potency_+%" => Stat::BaseSlowPotency(PlusPercentage(v as f32)),
                "base_spell_critical_strike_chance_override_permyriad" => Stat::BaseSpellCriticalStrikeChanceOverridePermyriad(Other(v as f32)),
                "base_spell_critical_strike_multiplier_+" => Stat::BaseSpellCriticalStrikeMultiplier(Plus(v as f32)),
                "base_strength" => Stat::BaseStrength(Other(v as f32)),
                "base_strength_and_dexterity" => Stat::BaseStrengthAndDexterity(Other(v as f32)),
                "base_strength_and_intelligence" => Stat::BaseStrengthAndIntelligence(Other(v as f32)),
                "base_stun_recovery_+%" => Stat::BaseStunRecovery(PlusPercentage(v as f32)),
                "base_thorns_critical_strike_chance" => Stat::BaseThornsCriticalStrikeChance(Other(v as f32)),
                "base_thorns_critical_strike_multiplier_+" => Stat::BaseThornsCriticalStrikeMultiplier(Plus(v as f32)),
                "bleed_on_crit_%" => Stat::BleedOnCrit(Other(v as f32)),
                "bleed_on_crit_%_with_attacks" => Stat::BleedOnCritWithAttacks(Other(v as f32)),
                "blind_effect_+%" => Stat::BlindEffect(PlusPercentage(v as f32)),
                "blind_enemies_when_they_stun_you" => Stat::BlindEnemiesWhenTheyStunYou(Other(v as f32)),
                "block_chance_+%" => Stat::BlockChance(PlusPercentage(v as f32)),
                "block_chance_from_equipped_shield_is_%" => Stat::BlockChanceFromEquippedShieldIs(Other(v as f32)),
                "block_chance_+%_if_blocked_with_active_block_recently" => Stat::BlockChanceIfBlockedWithActiveBlockRecently(Other(v as f32)),
                "block_recovery_+%" => Stat::BlockRecovery(PlusPercentage(v as f32)),
                "body_armour_+%" => Stat::BodyArmour(PlusPercentage(v as f32)),
                "body_armour_evasion_rating_+%" => Stat::BodyArmourEvasionRating(PlusPercentage(v as f32)),
                "bow_accuracy_rating_+%" => Stat::BowAccuracyRating(PlusPercentage(v as f32)),
                "bow_attack_speed_+%" => Stat::BowAttackSpeed(PlusPercentage(v as f32)),
                "bow_critical_strike_multiplier_+" => Stat::BowCriticalStrikeMultiplier(Plus(v as f32)),
                "bow_damage_+%" => Stat::BowDamage(PlusPercentage(v as f32)),
                "breach_flame_effects_doubled" => Stat::BreachFlameEffectsDoubled(Other(v as f32)),
                "buff_time_passed_+%_only_buff_category" => Stat::BuffTimePassedOnlyBuffCategory(Other(v as f32)),
                "buildup_jade_every_x_ms" => Stat::BuildupJadeEveryXMs(Other(v as f32)),
                "can_apply_additional_chill" => Stat::CanApplyAdditionalChill(Other(v as f32)),
                "can_apply_additional_shock" => Stat::CanApplyAdditionalShock(Other(v as f32)),
                "can_block_all_hits_while_shield_is_lowered" => Stat::CanBlockAllHitsWhileShieldIsLowered(Other(v as f32)),
                "cannot_be_blinded_while_on_full_life" => Stat::CannotBeBlindedWhileOnFullLife(Other(v as f32)),
                "cannot_gain_spirit_from_equipment" => Stat::CannotGainSpiritFromEquipment(Other(v as f32)),
                "cannot_recharge_energy_shield" => Stat::CannotRechargeEnergyShield(Other(v as f32)),
                "cast_speed_for_cold_skills_+%" => Stat::CastSpeedForColdSkills(PlusPercentage(v as f32)),
                "cast_speed_+%_if_have_crit_recently" => Stat::CastSpeedIfHaveCritRecently(Other(v as f32)),
                "cast_speed_+%_per_num_unique_spells_cast_recently" => Stat::CastSpeedPerNumUniqueSpellsCastRecently(Other(v as f32)),
                "cast_speed_+%_when_on_full_life" => Stat::CastSpeedWhenOnFullLife(Other(v as f32)),
                "cast_speed_+%_when_on_low_life" => Stat::CastSpeedWhenOnLowLife(Other(v as f32)),
                "cast_speed_+%_while_holding_staff" => Stat::CastSpeedWhileHoldingStaff(Other(v as f32)),
                "chance_for_skills_to_avoid_cooldown_%" => Stat::ChanceForSkillsToAvoidCooldown(Other(v as f32)),
                "chance_%_to_create_shocking_ground_on_shock" => Stat::ChanceToCreateShockingGroundOnShock(Other(v as f32)),
                "chance_to_double_armour_effect_on_hit_%" => Stat::ChanceToDoubleArmourEffectOnHit(Other(v as f32)),
                "chance_%_to_double_effect_of_removing_frenzy_charges" => Stat::ChanceToDoubleEffectOfRemovingFrenzyCharges(Other(v as f32)),
                "chance_to_fork_extra_projectile_%" => Stat::ChanceToForkExtraProjectile(Other(v as f32)),
                "chance_to_gain_onslaught_on_kill_with_axes_%" => Stat::ChanceToGainOnslaughtOnKillWithAxes(Other(v as f32)),
                "chance_to_poison_on_critical_strike_with_dagger_%" => Stat::ChanceToPoisonOnCriticalStrikeWithDagger(Other(v as f32)),
                "chance_to_summon_two_totems_%" => Stat::ChanceToSummonTwoTotems(Other(v as f32)),
                "chaos_damage_+%" => Stat::ChaosDamage(PlusPercentage(v as f32)),
                "chaos_damage_resistance_is_doubled" => Stat::ChaosDamageResistanceIsDoubled(Other(v as f32)),
                "chaos_skill_gem_level_+" => Stat::ChaosSkillGemLevel(Plus(v as f32)),
                "charges_gained_+%" => Stat::ChargesGained(PlusPercentage(v as f32)),
                "charm_charges_gained_+%" => Stat::CharmChargesGained(PlusPercentage(v as f32)),
                "charm_charges_used_+%" => Stat::CharmChargesUsed(PlusPercentage(v as f32)),
                "charm_duration_+%" => Stat::CharmDuration(PlusPercentage(v as f32)),
                "charm_effect_+%" => Stat::CharmEffect(PlusPercentage(v as f32)),
                "charms_%_chance_on_use_to_use_another_charm_without_consuming_charges" => Stat::CharmsChanceOnUseToUseAnotherCharmWithoutConsumingCharges(Other(v as f32)),
                "charms_%_chance_to_not_consume_charges" => Stat::CharmsChanceToNotConsumeCharges(Other(v as f32)),
                "chill_and_freeze_duration_+%" => Stat::ChillAndFreezeDuration(PlusPercentage(v as f32)),
                "chill_duration_+%" => Stat::ChillDuration(PlusPercentage(v as f32)),
                "chill_effect_+%" => Stat::ChillEffect(PlusPercentage(v as f32)),
                "chill_effectiveness_on_self_+%" => Stat::ChillEffectivenessOnSelf(PlusPercentage(v as f32)),
                "claw_accuracy_rating_+%" => Stat::ClawAccuracyRating(PlusPercentage(v as f32)),
                "claw_attack_speed_+%" => Stat::ClawAttackSpeed(PlusPercentage(v as f32)),
                "claw_critical_strike_chance_+%" => Stat::ClawCriticalStrikeChance(PlusPercentage(v as f32)),
                "claw_damage_+%" => Stat::ClawDamage(PlusPercentage(v as f32)),
                "cold_damage_+%" => Stat::ColdDamage(PlusPercentage(v as f32)),
                "cold_damage_+%_while_affected_by_herald_of_ice" => Stat::ColdDamageWhileAffectedByHeraldOfIce(Other(v as f32)),
                "cold_exposure_effect_+%" => Stat::ColdExposureEffect(PlusPercentage(v as f32)),
                "cold_exposure_you_inflict_lowers_cold_resistance_by_extra_%" => Stat::ColdExposureYouInflictLowersColdResistanceByExtra(Other(v as f32)),
                "cold_hit_and_dot_damage_%_taken_as_fire" => Stat::ColdHitAndDotDamageTakenAsFire(Other(v as f32)),
                "cold_skill_gem_level_+" => Stat::ColdSkillGemLevel(Plus(v as f32)),
                "convert_all_life_leech_to_energy_shield_leech" => Stat::ConvertAllLifeLeechToEnergyShieldLeech(Other(v as f32)),
                "corpses_in_your_presence_explode_dealing_%_maximum_life_physical_damage_on_warcry" => Stat::CorpsesInYourPresenceExplodeDealingMaximumLifePhysicalDamageOnWarcry(Other(v as f32)),
                "create_chilling_ground_on_freeze" => Stat::CreateChillingGroundOnFreeze(Other(v as f32)),
                "critical_hit_bleeding_effect_+%" => Stat::CriticalHitBleedingEffect(PlusPercentage(v as f32)),
                "critical_hit_damage_bonus_+%_if_consumed_power_charge_recently" => Stat::CriticalHitDamageBonusIfConsumedPowerChargeRecently(Other(v as f32)),
                "critical_hit_damaging_ailment_effect_+%" => Stat::CriticalHitDamagingAilmentEffect(PlusPercentage(v as f32)),
                "critical_hit_ignite_effect_+%" => Stat::CriticalHitIgniteEffect(PlusPercentage(v as f32)),
                "critical_strike_chance_+%" => Stat::CriticalStrikeChance(PlusPercentage(v as f32)),
                "critical_strike_chance_against_enemies_on_full_life_+%" => Stat::CriticalStrikeChanceAgainstEnemiesOnFullLife(PlusPercentage(v as f32)),
                "critical_strike_chance_+%_if_enemy_killed_recently" => Stat::CriticalStrikeChanceIfEnemyKilledRecently(Other(v as f32)),
                "critical_strike_chance_+%_if_have_not_crit_recently" => Stat::CriticalStrikeChanceIfHaveNotCritRecently(Other(v as f32)),
                "critical_strike_chance_+%_vs_bleeding_enemies" => Stat::CriticalStrikeChanceVsBleedingEnemies(Other(v as f32)),
                "critical_strike_chance_+%_vs_dazed_enemies" => Stat::CriticalStrikeChanceVsDazedEnemies(Other(v as f32)),
                "critical_strike_chance_+%_vs_enemies_with_lightning_exposure" => Stat::CriticalStrikeChanceVsEnemiesWithLightningExposure(Other(v as f32)),
                "critical_strike_chance_+%_vs_enemies_without_elemental_status_ailments" => Stat::CriticalStrikeChanceVsEnemiesWithoutElementalStatusAilments(Other(v as f32)),
                "critical_strike_chance_+%_vs_shocked_enemies" => Stat::CriticalStrikeChanceVsShockedEnemies(Other(v as f32)),
                "critical_strike_chance_while_dual_wielding_+%" => Stat::CriticalStrikeChanceWhileDualWielding(PlusPercentage(v as f32)),
                "critical_strike_multiplier_+_during_any_flask_effect" => Stat::CriticalStrikeMultiplierDuringAnyFlaskEffect(Other(v as f32)),
                "critical_strike_multiplier_+_if_gained_power_charge_recently" => Stat::CriticalStrikeMultiplierIfGainedPowerChargeRecently(Other(v as f32)),
                "critical_strike_multiplier_+_if_have_dealt_non_crit_recently" => Stat::CriticalStrikeMultiplierIfHaveDealtNonCritRecently(Other(v as f32)),
                "critical_strike_multiplier_+_if_have_not_dealt_critical_strike_recently" => Stat::CriticalStrikeMultiplierIfHaveNotDealtCriticalStrikeRecently(Other(v as f32)),
                "critical_strike_multiplier_+_vs_burning_enemies" => Stat::CriticalStrikeMultiplierVsBurningEnemies(Other(v as f32)),
                "critical_strike_multiplier_vs_enemies_on_full_life_+" => Stat::CriticalStrikeMultiplierVsEnemiesOnFullLife(Plus(v as f32)),
                "critical_strike_multiplier_+_vs_stunned_enemies" => Stat::CriticalStrikeMultiplierVsStunnedEnemies(Other(v as f32)),
                "critical_strike_multiplier_with_dagger_+" => Stat::CriticalStrikeMultiplierWithDagger(Plus(v as f32)),
                "critical_strikes_ignore_positive_elemental_resistances" => Stat::CriticalStrikesIgnorePositiveElementalResistances(Other(v as f32)),
                "crossbow_attack_%_chance_to_not_consume_ammo" => Stat::CrossbowAttackChanceToNotConsumeAmmo(Other(v as f32)),
                "crossbow_attack_speed_+%" => Stat::CrossbowAttackSpeed(PlusPercentage(v as f32)),
                "crossbow_critical_strike_chance_+%" => Stat::CrossbowCriticalStrikeChance(PlusPercentage(v as f32)),
                "crossbow_critical_strike_multiplier_+" => Stat::CrossbowCriticalStrikeMultiplier(Plus(v as f32)),
                "crossbow_damage_+%" => Stat::CrossbowDamage(PlusPercentage(v as f32)),
                "crushing_blow" => Stat::CrushingBlow(Other(v as f32)),
                "culling_strike_threshold_+%" => Stat::CullingStrikeThreshold(PlusPercentage(v as f32)),
                "culling_strike_vs_marked_enemy" => Stat::CullingStrikeVsMarkedEnemy(Other(v as f32)),
                "curse_area_of_effect_+%" => Stat::CurseAreaOfEffect(PlusPercentage(v as f32)),
                "curse_delay_+%" => Stat::CurseDelay(PlusPercentage(v as f32)),
                "curse_effect_+%" => Stat::CurseEffect(PlusPercentage(v as f32)),
                "curse_effect_on_self_+%" => Stat::CurseEffectOnSelf(PlusPercentage(v as f32)),
                "curses_never_expire" => Stat::CursesNeverExpire(Other(v as f32)),
                "dagger_attack_speed_+%" => Stat::DaggerAttackSpeed(PlusPercentage(v as f32)),
                "dagger_critical_strike_chance_+%" => Stat::DaggerCriticalStrikeChance(PlusPercentage(v as f32)),
                "dagger_damage_+%" => Stat::DaggerDamage(PlusPercentage(v as f32)),
                "damage_+%" => Stat::Damage(PlusPercentage(v as f32)),
                "damage_+%_against_enemies_with_fully_broken_armour" => Stat::DamageAgainstEnemiesWithFullyBrokenArmour(Other(v as f32)),
                "damage_+%_if_triggered_skill_recently" => Stat::DamageIfTriggeredSkillRecently(Other(v as f32)),
                "damage_+%_if_you_have_consumed_a_corpse_recently" => Stat::DamageIfYouHaveConsumedACorpseRecently(Other(v as f32)),
                "damage_+%_per_active_curse_on_self" => Stat::DamagePerActiveCurseOnSelf(Other(v as f32)),
                "damage_+%_per_different_warcry_used_recently" => Stat::DamagePerDifferentWarcryUsedRecently(Other(v as f32)),
                "damage_+%_per_enemy_elemental_ailment" => Stat::DamagePerEnemyElementalAilment(Other(v as f32)),
                "damage_+%_per_warcry_used_recently" => Stat::DamagePerWarcryUsedRecently(Other(v as f32)),
                "damage_removed_from_your_nearest_totem_before_life_or_es_%" => Stat::DamageRemovedFromYourNearestTotemBeforeLifeOrEs(Other(v as f32)),
                "damage_taken_+%_final_per_tailwind" => Stat::DamageTakenFinalPerTailwind(Other(v as f32)),
                "damage_taken_goes_to_mana_%" => Stat::DamageTakenGoesToMana(Other(v as f32)),
                "damage_taken_+%_on_low_life" => Stat::DamageTakenOnLowLife(Other(v as f32)),
                "damage_+%_to_rare_and_unique_enemies" => Stat::DamageToRareAndUniqueEnemies(Other(v as f32)),
                "damage_+%_vs_burning_enemies" => Stat::DamageVsBurningEnemies(Other(v as f32)),
                "damage_+%_vs_dazed_enemies" => Stat::DamageVsDazedEnemies(Other(v as f32)),
                "damage_+%_vs_enemies_affected_by_status_ailments" => Stat::DamageVsEnemiesAffectedByStatusAilments(Other(v as f32)),
                "damage_+%_vs_enemies_on_full_life" => Stat::DamageVsEnemiesOnFullLife(Other(v as f32)),
                "damage_vs_enemies_on_low_life_+%" => Stat::DamageVsEnemiesOnLowLife(PlusPercentage(v as f32)),
                "damage_+%_vs_frozen_enemies" => Stat::DamageVsFrozenEnemies(Other(v as f32)),
                "damage_+%_vs_hindered_enemies" => Stat::DamageVsHinderedEnemies(Other(v as f32)),
                "damage_vs_shocked_enemies_+%" => Stat::DamageVsShockedEnemies(PlusPercentage(v as f32)),
                "damage_+%_while_affected_by_a_herald" => Stat::DamageWhileAffectedByAHerald(Other(v as f32)),
                "damage_while_dual_wielding_+%" => Stat::DamageWhileDualWielding(PlusPercentage(v as f32)),
                "damage_+%_while_totem_active" => Stat::DamageWhileTotemActive(Other(v as f32)),
                "damage_+%_while_unarmed" => Stat::DamageWhileUnarmed(Other(v as f32)),
                "damage_+%_while_using_charm" => Stat::DamageWhileUsingCharm(Other(v as f32)),
                "damage_+%_while_wielding_wand" => Stat::DamageWhileWieldingWand(Other(v as f32)),
                "damage_+%_with_daggers_against_full_life_enemies" => Stat::DamageWithDaggersAgainstFullLifeEnemies(Other(v as f32)),
                "damage_+%_with_herald_skills" => Stat::DamageWithHeraldSkills(Other(v as f32)),
                "damage_with_hits_is_lucky_vs_enemies_on_low_life" => Stat::DamageWithHitsIsLuckyVsEnemiesOnLowLife(Other(v as f32)),
                "damage_with_hits_is_lucky_vs_heavy_stunned_enemies" => Stat::DamageWithHitsIsLuckyVsHeavyStunnedEnemies(Other(v as f32)),
                "damage_+%_with_one_handed_weapons" => Stat::DamageWithOneHandedWeapons(Other(v as f32)),
                "damage_+%_with_two_handed_weapons" => Stat::DamageWithTwoHandedWeapons(Other(v as f32)),
                "damaging_ailment_duration_+%" => Stat::DamagingAilmentDuration(PlusPercentage(v as f32)),
                "damaging_ailments_deal_damage_+%_faster" => Stat::DamagingAilmentsDealDamageFaster(Other(v as f32)),
                "darkness_per_level" => Stat::DarknessPerLevel(Other(v as f32)),
                "darkness_refresh_rate_+%" => Stat::DarknessRefreshRate(PlusPercentage(v as f32)),
                "daze_build_up_+%" => Stat::DazeBuildUp(PlusPercentage(v as f32)),
                "daze_duration_+%" => Stat::DazeDuration(PlusPercentage(v as f32)),
                "deadeye_accuracy_unaffected_by_range" => Stat::DeadeyeAccuracyUnaffectedByRange(Other(v as f32)),
                "deadeye_movement_speed_penalty_+%_final_while_performing_action" => Stat::DeadeyeMovementSpeedPenaltyFinalWhilePerformingAction(Other(v as f32)),
                "deadeye_projectile_damage_+%_final_max_as_distance_travelled_decreases" => Stat::DeadeyeProjectileDamageFinalMaxAsDistanceTravelledDecreases(Other(v as f32)),
                "deadeye_projectile_damage_+%_final_max_as_distance_travelled_increases" => Stat::DeadeyeProjectileDamageFinalMaxAsDistanceTravelledIncreases(Other(v as f32)),
                "debuff_time_passed_+%" => Stat::DebuffTimePassed(PlusPercentage(v as f32)),
                "decimating_strike" => Stat::DecimatingStrike(Other(v as f32)),
                "defences_+%_while_wielding_staff" => Stat::DefencesWhileWieldingStaff(Other(v as f32)),
                "defend_with_%_armour_against_critical_strikes" => Stat::DefendWithArmourAgainstCriticalStrikes(Other(v as f32)),
                "defend_with_%_armour_against_ranged_attacks" => Stat::DefendWithArmourAgainstRangedAttacks(Other(v as f32)),
                "defend_with_%_of_armour_while_not_on_low_energy_shield" => Stat::DefendWithOfArmourWhileNotOnLowEnergyShield(Other(v as f32)),
                "dexterity_+%" => Stat::Dexterity(PlusPercentage(v as f32)),
                "display_passive_attribute_text" => Stat::DisplayPassiveAttributeText(Other(v as f32)),
                "distance_scaled_accuracy_rating_penalty_+%" => Stat::DistanceScaledAccuracyRatingPenalty(PlusPercentage(v as f32)),
                "double_number_of_poison_you_can_inflict" => Stat::DoubleNumberOfPoisonYouCanInflict(Other(v as f32)),
                "double_tablet_effect_chance_%_when_opening_a_map" => Stat::DoubleTabletEffectChanceWhenOpeningAMap(Other(v as f32)),
                "drain_focus_%_of_damage_dealt_on_hit" => Stat::DrainFocusOfDamageDealtOnHit(Other(v as f32)),
                "dummy_stat_display_nothing" => Stat::DummyStatDisplayNothing(Other(v as f32)),
                "electrocuted_enemy_damage_taken_+%" => Stat::ElectrocutedEnemyDamageTaken(PlusPercentage(v as f32)),
                "elemental_damage_+%" => Stat::ElementalDamage(PlusPercentage(v as f32)),
                "elemental_damage_can_inflict_bleeding" => Stat::ElementalDamageCanInflictBleeding(Other(v as f32)),
                "elemental_damage_+%_if_enemy_chilled_recently" => Stat::ElementalDamageIfEnemyChilledRecently(Other(v as f32)),
                "elemental_damage_+%_if_enemy_ignited_recently" => Stat::ElementalDamageIfEnemyIgnitedRecently(Other(v as f32)),
                "elemental_damage_+%_if_enemy_shocked_recently" => Stat::ElementalDamageIfEnemyShockedRecently(Other(v as f32)),
                "elemental_damage_+%_if_have_crit_recently" => Stat::ElementalDamageIfHaveCritRecently(Other(v as f32)),
                "elemental_damage_taken_%_recouped_as_life" => Stat::ElementalDamageTakenRecoupedAsLife(Other(v as f32)),
                "elemental_damage_with_attack_skills_+%" => Stat::ElementalDamageWithAttackSkills(PlusPercentage(v as f32)),
                "elemental_damage_with_attack_skills_+%_while_using_flask" => Stat::ElementalDamageWithAttackSkillsWhileUsingFlask(Other(v as f32)),
                "elemental_storm_cooldown_recovery_speed_+%_final" => Stat::ElementalStormCooldownRecoverySpeedFinal(Other(v as f32)),
                "elementalist_chill_maximum_magnitude_override" => Stat::ElementalistChillMaximumMagnitudeOverride(Other(v as f32)),
                "empowered_attack_damage_+%" => Stat::EmpoweredAttackDamage(PlusPercentage(v as f32)),
                "empowered_attack_hit_damage_stun_multiplier_+%" => Stat::EmpoweredAttackHitDamageStunMultiplier(PlusPercentage(v as f32)),
                "endurance_charge_duration_+%" => Stat::EnduranceChargeDuration(PlusPercentage(v as f32)),
                "enemies_are_maimed_for_x_seconds_after_becoming_unpinned" => Stat::EnemiesAreMaimedForXSecondsAfterBecomingUnpinned(Other(v as f32)),
                "enemies_chaos_resistance_%_while_cursed" => Stat::EnemiesChaosResistanceWhileCursed(Other(v as f32)),
                "enemies_cursed_by_you_have_life_regeneration_rate_+%" => Stat::EnemiesCursedByYouHaveLifeRegenerationRate(PlusPercentage(v as f32)),
                "enemies_in_presence_cooldown_recovery_+%" => Stat::EnemiesInPresenceCooldownRecovery(PlusPercentage(v as f32)),
                "enemies_near_marked_enemy_are_blinded" => Stat::EnemiesNearMarkedEnemyAreBlinded(Other(v as f32)),
                "enemies_you_curse_cannot_recharge_energy_shield" => Stat::EnemiesYouCurseCannotRechargeEnergyShield(Other(v as f32)),
                "energy_generated_+%" => Stat::EnergyGenerated(PlusPercentage(v as f32)),
                "energy_shield_delay_-%" => Stat::EnergyShieldDelay(MinusPercentage(v as f32)),
                "energy_shield_delay_-%_if_stunned_recently" => Stat::EnergyShieldDelayIfStunnedRecently(Other(v as f32)),
                "energy_shield_delay_-%_when_not_on_full_life" => Stat::EnergyShieldDelayWhenNotOnFullLife(Other(v as f32)),
                "energy_shield_from_focus_+%" => Stat::EnergyShieldFromFocus(PlusPercentage(v as f32)),
                "energy_shield_from_helmet_+%" => Stat::EnergyShieldFromHelmet(PlusPercentage(v as f32)),
                "energy_shield_gained_on_block" => Stat::EnergyShieldGainedOnBlock(Other(v as f32)),
                "energy_shield_+%_if_consumed_power_charge_recently" => Stat::EnergyShieldIfConsumedPowerChargeRecently(Other(v as f32)),
                "energy_shield_recharge_rate_+%" => Stat::EnergyShieldRechargeRate(PlusPercentage(v as f32)),
                "energy_shield_recovery_rate_+%" => Stat::EnergyShieldRecoveryRate(PlusPercentage(v as f32)),
                "energy_shield_recovery_rate_+%_if_not_hit_recently" => Stat::EnergyShieldRecoveryRateIfNotHitRecently(Other(v as f32)),
                "evasion_and_physical_damage_reduction_rating_+%" => Stat::EvasionAndPhysicalDamageReductionRating(PlusPercentage(v as f32)),
                "evasion_+%_if_hit_recently" => Stat::EvasionIfHitRecently(Other(v as f32)),
                "evasion_rating_+%" => Stat::EvasionRating(PlusPercentage(v as f32)),
                "evasion_rating_also_reduces_physical_damage" => Stat::EvasionRatingAlsoReducesPhysicalDamage(Other(v as f32)),
                "evasion_rating_+%_if_consumed_frenzy_charge_recently" => Stat::EvasionRatingIfConsumedFrenzyChargeRecently(Other(v as f32)),
                "evasion_rating_+%_if_have_not_been_hit_recently" => Stat::EvasionRatingIfHaveNotBeenHitRecently(Other(v as f32)),
                "evasion_rating_+%_if_you_dodge_rolled_recently" => Stat::EvasionRatingIfYouDodgeRolledRecently(Other(v as f32)),
                "evasion_rating_+%_if_you_have_hit_an_enemy_recently" => Stat::EvasionRatingIfYouHaveHitAnEnemyRecently(Other(v as f32)),
                "evasion_rating_%_to_gain_as_armour" => Stat::EvasionRatingToGainAsArmour(Other(v as f32)),
                "evasion_rating_+%_when_on_full_life" => Stat::EvasionRatingWhenOnFullLife(Other(v as f32)),
                "evasion_rating_+%_while_surrounded" => Stat::EvasionRatingWhileSurrounded(Other(v as f32)),
                "evasion_rating_+%_while_you_have_energy_shield" => Stat::EvasionRatingWhileYouHaveEnergyShield(Other(v as f32)),
                "expedition_monsters_logbook_chance_+%" => Stat::ExpeditionMonstersLogbookChance(PlusPercentage(v as f32)),
                "exposure_you_inflict_lowers_affected_resistance_by_extra_%" => Stat::ExposureYouInflictLowersAffectedResistanceByExtra(Other(v as f32)),
                "extra_damage_rolls_with_lightning_damage_on_non_critical_hits" => Stat::ExtraDamageRollsWithLightningDamageOnNonCriticalHits(Other(v as f32)),
                "faster_bleed_%" => Stat::FasterBleed(Other(v as f32)),
                "faster_burn_%" => Stat::FasterBurn(Other(v as f32)),
                "final_repeat_of_spells_area_of_effect_+%" => Stat::FinalRepeatOfSpellsAreaOfEffect(PlusPercentage(v as f32)),
                "fire_damage_+%" => Stat::FireDamage(PlusPercentage(v as f32)),
                "fire_damage_+%_while_affected_by_herald_of_ash" => Stat::FireDamageWhileAffectedByHeraldOfAsh(Other(v as f32)),
                "fire_exposure_effect_+%" => Stat::FireExposureEffect(PlusPercentage(v as f32)),
                "fire_exposure_you_inflict_lowers_fire_resistance_by_extra_%" => Stat::FireExposureYouInflictLowersFireResistanceByExtra(Other(v as f32)),
                "flail_attack_speed_+%" => Stat::FlailAttackSpeed(PlusPercentage(v as f32)),
                "flail_critical_strike_chance_+%" => Stat::FlailCriticalStrikeChance(PlusPercentage(v as f32)),
                "flail_critical_strike_multiplier_+" => Stat::FlailCriticalStrikeMultiplier(Plus(v as f32)),
                "flail_damage_+%" => Stat::FlailDamage(PlusPercentage(v as f32)),
                "flask_charges_gained_+%" => Stat::FlaskChargesGained(PlusPercentage(v as f32)),
                "flask_charges_used_+%" => Stat::FlaskChargesUsed(PlusPercentage(v as f32)),
                "flask_duration_+%" => Stat::FlaskDuration(PlusPercentage(v as f32)),
                "flask_effect_+%" => Stat::FlaskEffect(PlusPercentage(v as f32)),
                "flask_life_and_mana_recovery_+%_while_using_charm" => Stat::FlaskLifeAndManaRecoveryWhileUsingCharm(Other(v as f32)),
                "flask_life_and_mana_to_recover_+%" => Stat::FlaskLifeAndManaToRecover(PlusPercentage(v as f32)),
                "flask_life_recovery_rate_+%" => Stat::FlaskLifeRecoveryRate(PlusPercentage(v as f32)),
                "flask_life_to_recover_+%" => Stat::FlaskLifeToRecover(PlusPercentage(v as f32)),
                "flask_mana_charges_used_+%" => Stat::FlaskManaChargesUsed(PlusPercentage(v as f32)),
                "flask_mana_to_recover_+%" => Stat::FlaskManaToRecover(PlusPercentage(v as f32)),
                "flasks_%_chance_to_not_consume_charges" => Stat::FlasksChanceToNotConsumeCharges(Other(v as f32)),
                "focus_decay_delay_ms" => Stat::FocusDecayDelayMs(Other(v as f32)),
                "focus_decay_%_per_minute" => Stat::FocusDecayPerMinute(Other(v as f32)),
                "freeze_duration_+%" => Stat::FreezeDuration(PlusPercentage(v as f32)),
                "freeze_threshold_+%" => Stat::FreezeThreshold(PlusPercentage(v as f32)),
                "gain_accuracy_rating_equal_to_intelligence" => Stat::GainAccuracyRatingEqualToIntelligence(Other(v as f32)),
                "gain_accuracy_rating_equal_to_strength" => Stat::GainAccuracyRatingEqualToStrength(Other(v as f32)),
                "gain_arcane_surge_on_crit_%_chance" => Stat::GainArcaneSurgeOnCritChance(Other(v as f32)),
                "gain_%_damage_as_chaos_from_unreserved_darkness" => Stat::GainDamageAsChaosFromUnreservedDarkness(Other(v as f32)),
                "gain_endurance_charge_on_heavy_stunning_rare_or_unique_enemy" => Stat::GainEnduranceChargeOnHeavyStunningRareOrUniqueEnemy(Other(v as f32)),
                "gain_guard_flask_charge_when_hit_by_enemy_chance_%" => Stat::GainGuardFlaskChargeWhenHitByEnemyChance(Other(v as f32)),
                "gain_%_life_from_body_es" => Stat::GainLifeFromBodyEs(Other(v as f32)),
                "gain_max_rage_on_rage_gain_from_hit_%_chance" => Stat::GainMaxRageOnRageGainFromHitChance(Other(v as f32)),
                "gain_maximum_endurance_charges_on_endurance_charge_gained_%_chance" => Stat::GainMaximumEnduranceChargesOnEnduranceChargeGainedChance(Other(v as f32)),
                "gain_%_maximum_energy_shield_as_freeze_threshold_+" => Stat::GainMaximumEnergyShieldAsFreezeThreshold(Plus(v as f32)),
                "gain_maximum_frenzy_charges_on_frenzy_charge_gained_%_chance" => Stat::GainMaximumFrenzyChargesOnFrenzyChargeGainedChance(Other(v as f32)),
                "gain_maximum_power_charges_on_power_charge_gained_%_chance" => Stat::GainMaximumPowerChargesOnPowerChargeGainedChance(Other(v as f32)),
                "gain_tailwind_stack_on_skill_use" => Stat::GainTailwindStackOnSkillUse(Other(v as f32)),
                "gain_unbound_ailment_stacks" => Stat::GainUnboundAilmentStacks(Other(v as f32)),
                "gain_x_rage_on_hit_with_axes" => Stat::GainXRageOnHitWithAxes(Other(v as f32)),
                "gain_x_rage_on_melee_hit" => Stat::GainXRageOnMeleeHit(Other(v as f32)),
                "gain_x_rage_when_hit" => Stat::GainXRageWhenHit(Other(v as f32)),
                "gem_requirements_can_be_satisfied_by_highest_attribute" => Stat::GemRequirementsCanBeSatisfiedByHighestAttribute(Other(v as f32)),
                "gemling_double_basic_attribute_bonuses" => Stat::GemlingDoubleBasicAttributeBonuses(Other(v as f32)),
                "gemling_skill_cost_+%_final" => Stat::GemlingSkillCostFinal(Other(v as f32)),
                "generate_x_charges_for_charms_per_minute" => Stat::GenerateXChargesForCharmsPerMinute(Other(v as f32)),
                "generate_x_charges_for_life_flasks_per_minute" => Stat::GenerateXChargesForLifeFlasksPerMinute(Other(v as f32)),
                "generate_x_charges_for_mana_flasks_per_minute" => Stat::GenerateXChargesForManaFlasksPerMinute(Other(v as f32)),
                "global_chance_to_blind_on_hit_%" => Stat::GlobalChanceToBlindOnHit(Other(v as f32)),
                "global_defences_+%" => Stat::GlobalDefences(PlusPercentage(v as f32)),
                "global_gem_attribute_requirements_+%_final_from_gemling" => Stat::GlobalGemAttributeRequirementsFinalFromGemling(Other(v as f32)),
                "global_item_attribute_requirements_+%" => Stat::GlobalItemAttributeRequirements(PlusPercentage(v as f32)),
                "grenade_fuse_duration_+%" => Stat::GrenadeFuseDuration(PlusPercentage(v as f32)),
                "grenade_skill_area_of_effect_+%" => Stat::GrenadeSkillAreaOfEffect(PlusPercentage(v as f32)),
                "grenade_skill_%_chance_to_explode_twice" => Stat::GrenadeSkillChanceToExplodeTwice(Other(v as f32)),
                "grenade_skill_cooldown_count_+" => Stat::GrenadeSkillCooldownCount(Plus(v as f32)),
                "grenade_skill_cooldown_speed_+%" => Stat::GrenadeSkillCooldownSpeed(PlusPercentage(v as f32)),
                "grenade_skill_damage_+%" => Stat::GrenadeSkillDamage(PlusPercentage(v as f32)),
                "grenade_skill_number_of_additional_projectiles" => Stat::GrenadeSkillNumberOfAdditionalProjectiles(Other(v as f32)),
                "guard_flask_effect_+%" => Stat::GuardFlaskEffect(PlusPercentage(v as f32)),
                "heavy_stun_poise_decay_rate_+%" => Stat::HeavyStunPoiseDecayRate(PlusPercentage(v as f32)),
                "heavy_stuns_have_culling_strike" => Stat::HeavyStunsHaveCullingStrike(Other(v as f32)),
                "hellhound_takes_%_damage_before_you" => Stat::HellhoundTakesDamageBeforeYou(Other(v as f32)),
                "herald_skills_mana_reservation_+%" => Stat::HeraldSkillsManaReservation(PlusPercentage(v as f32)),
                "hinder_duration_+%" => Stat::HinderDuration(PlusPercentage(v as f32)),
                "hit_damage_electrocute_multiplier_+%" => Stat::HitDamageElectrocuteMultiplier(PlusPercentage(v as f32)),
                "hit_damage_electrocute_multiplier_+%_vs_shocked_enemies" => Stat::HitDamageElectrocuteMultiplierVsShockedEnemies(Other(v as f32)),
                "hit_damage_freeze_multiplier_+%" => Stat::HitDamageFreezeMultiplier(PlusPercentage(v as f32)),
                "hit_damage_pin_multiplier_+%" => Stat::HitDamagePinMultiplier(PlusPercentage(v as f32)),
                "hit_damage_stun_multiplier_+%" => Stat::HitDamageStunMultiplier(PlusPercentage(v as f32)),
                "hit_damage_stun_multiplier_+%_vs_enemies_at_close_range" => Stat::HitDamageStunMultiplierVsEnemiesAtCloseRange(Other(v as f32)),
                "hit_damage_stun_multiplier_+%_vs_enemies_on_low_life" => Stat::HitDamageStunMultiplierVsEnemiesOnLowLife(Other(v as f32)),
                "hit_damage_stun_multiplier_+%_with_crits" => Stat::HitDamageStunMultiplierWithCrits(Other(v as f32)),
                "hit_damage_+%_vs_chilled_enemies" => Stat::HitDamageVsChilledEnemies(Other(v as f32)),
                "hit_damage_+%_vs_enemies_affected_by_ailments" => Stat::HitDamageVsEnemiesAffectedByAilments(Other(v as f32)),
                "hit_damage_+%_vs_ignited_enemies" => Stat::HitDamageVsIgnitedEnemies(Other(v as f32)),
                "hit_for_%_max_life_es_on_max_infernal_flame" => Stat::HitForMaxLifeEsOnMaxInfernalFlame(Other(v as f32)),
                "hits_ignore_elemental_resistances_vs_frozen_enemies" => Stat::HitsIgnoreElementalResistancesVsFrozenEnemies(Other(v as f32)),
                "ice_crystal_maximum_life_+%" => Stat::IceCrystalMaximumLife(PlusPercentage(v as f32)),
                "ignite_chance_+%" => Stat::IgniteChance(PlusPercentage(v as f32)),
                "ignite_duration_+%" => Stat::IgniteDuration(PlusPercentage(v as f32)),
                "ignite_effect_on_self_+%" => Stat::IgniteEffectOnSelf(PlusPercentage(v as f32)),
                "ignite_shock_chill_duration_+%" => Stat::IgniteShockChillDuration(PlusPercentage(v as f32)),
                "ignites_apply_fire_resistance_+" => Stat::IgnitesApplyFireResistance(Plus(v as f32)),
                "infernal_flame_instead_of_mana" => Stat::InfernalFlameInsteadOfMana(Other(v as f32)),
                "infernalist_burn_life_and_es_%_per_second_if_crit_recently" => Stat::InfernalistBurnLifeAndEsPerSecondIfCritRecently(Other(v as f32)),
                "infernalist_critical_strike_multiplier_+%_final" => Stat::InfernalistCriticalStrikeMultiplierFinal(Other(v as f32)),
                "inflict_fire_exposure_on_hits_that_heavy_stun" => Stat::InflictFireExposureOnHitsThatHeavyStun(Other(v as f32)),
                "inflict_withered_for_x_seconds_on_unwithered_enemies_when_they_enter_your_presence" => Stat::InflictWitheredForXSecondsOnUnwitheredEnemiesWhenTheyEnterYourPresence(Other(v as f32)),
                "intelligence_+%" => Stat::Intelligence(PlusPercentage(v as f32)),
                "jagged_ground_duration_+%" => Stat::JaggedGroundDuration(PlusPercentage(v as f32)),
                "jagged_ground_effect_+%" => Stat::JaggedGroundEffect(PlusPercentage(v as f32)),
                "jagged_ground_enemy_damage_taken_+%" => Stat::JaggedGroundEnemyDamageTaken(PlusPercentage(v as f32)),
                "keystone_acrobatics" => Stat::KeystoneAcrobatics(Other(v as f32)),
                "keystone_ancestral_bond" => Stat::KeystoneAncestralBond(Other(v as f32)),
                "keystone_avatar_of_fire" => Stat::KeystoneAvatarOfFire(Other(v as f32)),
                "keystone_blood_magic" => Stat::KeystoneBloodMagic(Other(v as f32)),
                "keystone_bulwark" => Stat::KeystoneBulwark(Other(v as f32)),
                "keystone_chaos_inoculation" => Stat::KeystoneChaosInoculation(Other(v as f32)),
                "keystone_charge_cycle" => Stat::KeystoneChargeCycle(Other(v as f32)),
                "keystone_conduit" => Stat::KeystoneConduit(Other(v as f32)),
                "keystone_dance_with_death" => Stat::KeystoneDanceWithDeath(Other(v as f32)),
                "keystone_eldritch_battery" => Stat::KeystoneEldritchBattery(Other(v as f32)),
                "keystone_elemental_equilibrium" => Stat::KeystoneElementalEquilibrium(Other(v as f32)),
                "keystone_eternal_youth" => Stat::KeystoneEternalYouth(Other(v as f32)),
                "keystone_giants_blood" => Stat::KeystoneGiantsBlood(Other(v as f32)),
                "keystone_glancing_blows" => Stat::KeystoneGlancingBlows(Other(v as f32)),
                "keystone_heartstopper" => Stat::KeystoneHeartstopper(Other(v as f32)),
                "keystone_hex_master" => Stat::KeystoneHexMaster(Other(v as f32)),
                "keystone_iron_reflexes" => Stat::KeystoneIronReflexes(Other(v as f32)),
                "keystone_mana_shield" => Stat::KeystoneManaShield(Other(v as f32)),
                "keystone_oasis" => Stat::KeystoneOasis(Other(v as f32)),
                "keystone_pain_attunement" => Stat::KeystonePainAttunement(Other(v as f32)),
                "keystone_unwavering_stance" => Stat::KeystoneUnwaveringStance(Other(v as f32)),
                "keystone_vaal_pact" => Stat::KeystoneVaalPact(Other(v as f32)),
                "keystone_zealots_oath" => Stat::KeystoneZealotsOath(Other(v as f32)),
                "knockback_chance_%_at_close_range" => Stat::KnockbackChanceAtCloseRange(Other(v as f32)),
                "knockback_distance_+%" => Stat::KnockbackDistance(PlusPercentage(v as f32)),
                "knockback_on_crit_with_quarterstaff" => Stat::KnockbackOnCritWithQuarterstaff(Other(v as f32)),
                "leech_%_is_instant" => Stat::LeechIsInstant(Other(v as f32)),
                "life_flask_charges_gained_+%" => Stat::LifeFlaskChargesGained(PlusPercentage(v as f32)),
                "life_flask_effects_are_not_removed_at_full_life" => Stat::LifeFlaskEffectsAreNotRemovedAtFullLife(Other(v as f32)),
                "life_gained_on_block" => Stat::LifeGainedOnBlock(Other(v as f32)),
                "life_recovery_+%_from_flasks_while_on_low_life" => Stat::LifeRecoveryFromFlasksWhileOnLowLife(Other(v as f32)),
                "life_recovery_rate_+%" => Stat::LifeRecoveryRate(PlusPercentage(v as f32)),
                "life_regenerate_rate_per_second_%_while_totem_active" => Stat::LifeRegenerateRatePerSecondWhileTotemActive(Other(v as f32)),
                "life_regeneration_rate_+%" => Stat::LifeRegenerationRate(PlusPercentage(v as f32)),
                "life_regeneration_rate_per_minute_%" => Stat::LifeRegenerationRatePerMinute(Other(v as f32)),
                "life_regeneration_rate_per_minute_%_if_have_been_hit_recently" => Stat::LifeRegenerationRatePerMinuteIfHaveBeenHitRecently(Other(v as f32)),
                "life_regeneration_rate_per_minute_%_when_on_low_life" => Stat::LifeRegenerationRatePerMinuteWhenOnLowLife(Other(v as f32)),
                "life_regeneration_rate_per_minute_%_while_affected_by_damaging_ailment" => Stat::LifeRegenerationRatePerMinuteWhileAffectedByDamagingAilment(Other(v as f32)),
                "life_regeneration_rate_per_minute_%_while_stationary" => Stat::LifeRegenerationRatePerMinuteWhileStationary(Other(v as f32)),
                "life_regeneration_rate_per_minute_%_while_surrounded" => Stat::LifeRegenerationRatePerMinuteWhileSurrounded(Other(v as f32)),
                "life_regeneration_rate_+%_while_moving" => Stat::LifeRegenerationRateWhileMoving(Other(v as f32)),
                "life_regeneration_rate_+%_while_on_low_life" => Stat::LifeRegenerationRateWhileOnLowLife(Other(v as f32)),
                "life_regeneration_rate_+%_while_stationary" => Stat::LifeRegenerationRateWhileStationary(Other(v as f32)),
                "life_regeneration_rate_+%_while_using_life_flask" => Stat::LifeRegenerationRateWhileUsingLifeFlask(Other(v as f32)),
                "life_remnants_gain_per_globe" => Stat::LifeRemnantsGainPerGlobe(Other(v as f32)),
                "life_reserved_by_stat_%" => Stat::LifeReservedByStat(Other(v as f32)),
                "light_radius_+%" => Stat::LightRadius(PlusPercentage(v as f32)),
                "lightning_damage_+%" => Stat::LightningDamage(PlusPercentage(v as f32)),
                "lightning_damage_+%_while_affected_by_herald_of_thunder" => Stat::LightningDamageWhileAffectedByHeraldOfThunder(Other(v as f32)),
                "lightning_exposure_effect_+%" => Stat::LightningExposureEffect(PlusPercentage(v as f32)),
                "lightning_hit_and_dot_damage_%_taken_as_fire" => Stat::LightningHitAndDotDamageTakenAsFire(Other(v as f32)),
                "lightning_penetration_%_while_on_low_mana" => Stat::LightningPenetrationWhileOnLowMana(Other(v as f32)),
                "lightning_skill_additional_chain_chance_%" => Stat::LightningSkillAdditionalChainChance(Other(v as f32)),
                "link_skill_buff_effect_+%" => Stat::LinkSkillBuffEffect(PlusPercentage(v as f32)),
                "link_skill_cast_speed_+%" => Stat::LinkSkillCastSpeed(PlusPercentage(v as f32)),
                "link_skill_duration_+%" => Stat::LinkSkillDuration(PlusPercentage(v as f32)),
                "link_skills_can_target_minions" => Stat::LinkSkillsCanTargetMinions(Other(v as f32)),
                "link_to_X_additional_random_allies" => Stat::LinkToXAdditionalRandomAllies(Other(v as f32)),
                "lose_all_tailwind_when_hit" => Stat::LoseAllTailwindWhenHit(Other(v as f32)),
                "lose_%_of_infernal_flame_on_reaching_max" => Stat::LoseOfInfernalFlameOnReachingMax(Other(v as f32)),
                "lose_%_of_life_and_energy_shield_when_you_use_a_chaos_skill" => Stat::LoseOfLifeAndEnergyShieldWhenYouUseAChaosSkill(Other(v as f32)),
                "lose_%_of_max_infernal_flame_per_minute" => Stat::LoseOfMaxInfernalFlamePerMinute(Other(v as f32)),
                "mace_damage_+%" => Stat::MaceDamage(PlusPercentage(v as f32)),
                "mace_hit_damage_stun_multiplier_+%" => Stat::MaceHitDamageStunMultiplier(PlusPercentage(v as f32)),
                "mace_slam_aftershock_chance_%" => Stat::MaceSlamAftershockChance(Other(v as f32)),
                "mace_strike_aftershock_chance_%" => Stat::MaceStrikeAftershockChance(Other(v as f32)),
                "maim_on_hit_%" => Stat::MaimOnHit(Other(v as f32)),
                "maim_on_hit_%_vs_poisoned_enemies" => Stat::MaimOnHitVsPoisonedEnemies(Other(v as f32)),
                "mana_cost_+%_while_not_low_mana" => Stat::ManaCostWhileNotLowMana(Other(v as f32)),
                "mana_flask_charges_gained_+%" => Stat::ManaFlaskChargesGained(PlusPercentage(v as f32)),
                "mana_gained_on_block" => Stat::ManaGainedOnBlock(Other(v as f32)),
                "mana_leech_applies_recovery_to_energy_shield_also" => Stat::ManaLeechAppliesRecoveryToEnergyShieldAlso(Other(v as f32)),
                "mana_recovery_rate_+%" => Stat::ManaRecoveryRate(PlusPercentage(v as f32)),
                "mana_recovery_rate_+%_while_affected_by_a_mana_flask" => Stat::ManaRecoveryRateWhileAffectedByAManaFlask(Other(v as f32)),
                "mana_regeneration_rate_+%" => Stat::ManaRegenerationRate(PlusPercentage(v as f32)),
                "mana_regeneration_rate_+%_if_enemy_shocked_recently" => Stat::ManaRegenerationRateIfEnemyShockedRecently(Other(v as f32)),
                "mana_regeneration_rate_+%_while_moving" => Stat::ManaRegenerationRateWhileMoving(Other(v as f32)),
                "mana_regeneration_rate_+%_while_not_on_low_mana" => Stat::ManaRegenerationRateWhileNotOnLowMana(Other(v as f32)),
                "mana_regeneration_rate_+%_while_stationary" => Stat::ManaRegenerationRateWhileStationary(Other(v as f32)),
                "map_affliction_encounter_boss_chance_+%" => Stat::MapAfflictionEncounterBossChance(PlusPercentage(v as f32)),
                "map_affliction_reward_progress_on_kill_+%" => Stat::MapAfflictionRewardProgressOnKill(PlusPercentage(v as f32)),
                "map_affliction_secondary_wave_acceleration_+%" => Stat::MapAfflictionSecondaryWaveAcceleration(PlusPercentage(v as f32)),
                "map_basic_currency_drop_chance_+%_in_swamp_and_water_biome" => Stat::MapBasicCurrencyDropChanceInSwampAndWaterBiome(Other(v as f32)),
                "map_boss_area_chance_to_be_corrupted_%" => Stat::MapBossAreaChanceToBeCorrupted(Other(v as f32)),
                "map_boss_damage_+%" => Stat::MapBossDamage(PlusPercentage(v as f32)),
                "map_boss_dropped_item_quantity_+%" => Stat::MapBossDroppedItemQuantity(PlusPercentage(v as f32)),
                "map_boss_experience_+%_final" => Stat::MapBossExperienceFinal(Other(v as f32)),
                "map_boss_item_rarity_+%" => Stat::MapBossItemRarity(PlusPercentage(v as f32)),
                "map_boss_maximum_life_+%" => Stat::MapBossMaximumLife(PlusPercentage(v as f32)),
                "map_bossing_difficulty_+" => Stat::MapBossingDifficulty(Plus(v as f32)),
                "map_breach_chance_to_be_guarded_by_magic_pack_%" => Stat::MapBreachChanceToBeGuardedByMagicPack(Other(v as f32)),
                "map_breach_chests_drop_double_splinters_chance_%" => Stat::MapBreachChestsDropDoubleSplintersChance(Other(v as f32)),
                "map_breach_chests_+%_final" => Stat::MapBreachChestsFinal(Other(v as f32)),
                "map_breach_domain_difficulty_+" => Stat::MapBreachDomainDifficulty(Plus(v as f32)),
                "map_breach_hands_inflict_waking_nightmare" => Stat::MapBreachHandsInflictWakingNightmare(Other(v as f32)),
                "map_breach_monster_quantity_+%" => Stat::MapBreachMonsterQuantity(PlusPercentage(v as f32)),
                "map_breach_monster_splinter_quantity_+%" => Stat::MapBreachMonsterSplinterQuantity(PlusPercentage(v as f32)),
                "map_breach_rares_catalyst_full_stack_chance_%" => Stat::MapBreachRaresCatalystFullStackChance(Other(v as f32)),
                "map_breach_rares_have_soul_eater" => Stat::MapBreachRaresHaveSoulEater(Other(v as f32)),
                "map_breach_time_passed_+%" => Stat::MapBreachTimePassed(PlusPercentage(v as f32)),
                "map_delirium_additional_reward_type_chance_%" => Stat::MapDeliriumAdditionalRewardTypeChance(Other(v as f32)),
                "map_delirium_boss_life_+%" => Stat::MapDeliriumBossLife(PlusPercentage(v as f32)),
                "map_delirium_boss_splinter_amount_+%" => Stat::MapDeliriumBossSplinterAmount(PlusPercentage(v as f32)),
                "map_delirium_daemon_damage_+%" => Stat::MapDeliriumDaemonDamage(PlusPercentage(v as f32)),
                "map_delirium_difficulty_scaling_from_mirror_is_double" => Stat::MapDeliriumDifficultyScalingFromMirrorIsDouble(Other(v as f32)),
                "map_delirium_doodads_+%_final" => Stat::MapDeliriumDoodadsFinal(Other(v as f32)),
                "map_dropped_maps_rarity_+%" => Stat::MapDroppedMapsRarity(PlusPercentage(v as f32)),
                "map_duplicate_x_rare_monsters" => Stat::MapDuplicateXRareMonsters(Other(v as f32)),
                "map_expedition_artifact_quantity_+%" => Stat::MapExpeditionArtifactQuantity(PlusPercentage(v as f32)),
                "map_expedition_chest_marker_count_+" => Stat::MapExpeditionChestMarkerCount(Plus(v as f32)),
                "map_expedition_chests_despawn_after_X_seconds" => Stat::MapExpeditionChestsDespawnAfterXSeconds(Other(v as f32)),
                "map_expedition_elite_marker_count_+%" => Stat::MapExpeditionEliteMarkerCount(PlusPercentage(v as f32)),
                "map_expedition_fuse_burn_time_+%" => Stat::MapExpeditionFuseBurnTime(PlusPercentage(v as f32)),
                "map_expedition_rare_monsters_+%" => Stat::MapExpeditionRareMonsters(PlusPercentage(v as f32)),
                "map_expedition_relic_mod_effect_+%" => Stat::MapExpeditionRelicModEffect(PlusPercentage(v as f32)),
                "map_expedition_vendor_reroll_currency_quantity_+%" => Stat::MapExpeditionVendorRerollCurrencyQuantity(PlusPercentage(v as f32)),
                "map_expedition_x_extra_relic_prefixes" => Stat::MapExpeditionXExtraRelicPrefixes(Other(v as f32)),
                "map_expedition_x_extra_relic_suffixes" => Stat::MapExpeditionXExtraRelicSuffixes(Other(v as f32)),
                "map_final_boss_map_key_of_at_least_same_tier_as_current_map_drop_chance_%" => Stat::MapFinalBossMapKeyOfAtLeastSameTierAsCurrentMapDropChance(Other(v as f32)),
                "map_gold_drop_chance_+%_in_mountain_biome" => Stat::MapGoldDropChanceInMountainBiome(Other(v as f32)),
                "map_item_drop_quantity_+%" => Stat::MapItemDropQuantity(PlusPercentage(v as f32)),
                "map_item_drop_rarity_+%" => Stat::MapItemDropRarity(PlusPercentage(v as f32)),
                "map_jewel_drop_chance_+%_in_forest_biome" => Stat::MapJewelDropChanceInForestBiome(Other(v as f32)),
                "map_killing_rare_monsters_pauses_delirium_mirror_timer_for_x_seconds" => Stat::MapKillingRareMonstersPausesDeliriumMirrorTimerForXSeconds(Other(v as f32)),
                "map_logbook_difficulty_+" => Stat::MapLogbookDifficulty(Plus(v as f32)),
                "map_magic_chest_amount_+%" => Stat::MapMagicChestAmount(PlusPercentage(v as f32)),
                "map_magic_pack_size_+%" => Stat::MapMagicPackSize(PlusPercentage(v as f32)),
                "map_map_item_drop_chance_+%" => Stat::MapMapItemDropChance(PlusPercentage(v as f32)),
                "map_maps_drop_with_distilled_emotions_applied_chance_%" => Stat::MapMapsDropWithDistilledEmotionsAppliedChance(Other(v as f32)),
                "map_mod_effect_+%" => Stat::MapModEffect(PlusPercentage(v as f32)),
                "map_mod_effect_+%_per_mod" => Stat::MapModEffectPerMod(Other(v as f32)),
                "map_mod_effect_+%_per_tower_affecting_area" => Stat::MapModEffectPerTowerAffectingArea(Other(v as f32)),
                "map_monolith_chance_%" => Stat::MapMonolithChance(Other(v as f32)),
                "map_monster_tre_+%" => Stat::MapMonsterTre(PlusPercentage(v as f32)),
                "map_non_unique_delirium_monsters_splinter_amount_+%" => Stat::MapNonUniqueDeliriumMonstersSplinterAmount(PlusPercentage(v as f32)),
                "map_number_of_magic_packs_+%" => Stat::MapNumberOfMagicPacks(PlusPercentage(v as f32)),
                "map_number_of_rare_packs_+%" => Stat::MapNumberOfRarePacks(PlusPercentage(v as f32)),
                "map_pack_size_+%" => Stat::MapPackSize(PlusPercentage(v as f32)),
                "map_pinnacle_boss_additional_unique_drop_chance_%" => Stat::MapPinnacleBossAdditionalUniqueDropChance(Other(v as f32)),
                "map_pinnacle_boss_difficulty_+" => Stat::MapPinnacleBossDifficulty(Plus(v as f32)),
                "map_pinnacle_boss_drops_X_corrupted_rare_tablets" => Stat::MapPinnacleBossDropsXCorruptedRareTablets(Other(v as f32)),
                "map_pinnacle_boss_drops_X_waystones" => Stat::MapPinnacleBossDropsXWaystones(Other(v as f32)),
                "map_pinnacle_boss_item_dropped_rarity_+%_final" => Stat::MapPinnacleBossItemDroppedRarityFinal(Other(v as f32)),
                "map_pinnacle_boss_rare_socket_currency_chance_%" => Stat::MapPinnacleBossRareSocketCurrencyChance(Other(v as f32)),
                "map_pinnacle_boss_special_gem_drop_chance_%" => Stat::MapPinnacleBossSpecialGemDropChance(Other(v as f32)),
                "map_player_damage_taken_+%_vs_breach_monsters" => Stat::MapPlayerDamageTakenVsBreachMonsters(Other(v as f32)),
                "map_player_shrine_buff_effect_on_self_+%" => Stat::MapPlayerShrineBuffEffectOnSelf(PlusPercentage(v as f32)),
                "map_player_shrine_effect_duration_+%" => Stat::MapPlayerShrineEffectDuration(PlusPercentage(v as f32)),
                "map_rare_chest_amount_+%" => Stat::MapRareChestAmount(PlusPercentage(v as f32)),
                "map_ritual_additional_daemon" => Stat::MapRitualAdditionalDaemon(Other(v as f32)),
                "map_ritual_additional_reward_rerolls" => Stat::MapRitualAdditionalRewardRerolls(Other(v as f32)),
                "map_ritual_additional_wildwood_packs" => Stat::MapRitualAdditionalWildwoodPacks(Other(v as f32)),
                "map_ritual_contains_wildwood_wisp" => Stat::MapRitualContainsWildwoodWisp(Other(v as f32)),
                "map_ritual_daemon_damage_+%" => Stat::MapRitualDaemonDamage(PlusPercentage(v as f32)),
                "map_ritual_defer_reward_tribute_cost_+%" => Stat::MapRitualDeferRewardTributeCost(PlusPercentage(v as f32)),
                "map_ritual_deferred_rewards_are_offered_again_+%_sooner" => Stat::MapRitualDeferredRewardsAreOfferedAgainSooner(Other(v as f32)),
                "map_ritual_encounter_count_is_four" => Stat::MapRitualEncounterCountIsFour(Other(v as f32)),
                "map_ritual_magic_monsters_+%" => Stat::MapRitualMagicMonsters(PlusPercentage(v as f32)),
                "map_ritual_monster_damage_+%_for_each_time_revived" => Stat::MapRitualMonsterDamageForEachTimeRevived(Other(v as f32)),
                "map_ritual_monster_spawning_speed_+%" => Stat::MapRitualMonsterSpawningSpeed(PlusPercentage(v as f32)),
                "map_ritual_monster_tankiness_+%_for_each_time_revived" => Stat::MapRitualMonsterTankinessForEachTimeRevived(Other(v as f32)),
                "map_ritual_no_revive_penalty" => Stat::MapRitualNoRevivePenalty(Other(v as f32)),
                "map_ritual_omen_chance_+%" => Stat::MapRitualOmenChance(PlusPercentage(v as f32)),
                "map_ritual_rare_monsters_+%" => Stat::MapRitualRareMonsters(PlusPercentage(v as f32)),
                "map_ritual_rewards_reroll_cost_+%_final" => Stat::MapRitualRewardsRerollCostFinal(Other(v as f32)),
                "map_ritual_voodoo_king_key_chance_+%" => Stat::MapRitualVoodooKingKeyChance(PlusPercentage(v as f32)),
                "map_sanctum_and_ultimatum_key_drop_chance_+%_in_desert_biome" => Stat::MapSanctumAndUltimatumKeyDropChanceInDesertBiome(Other(v as f32)),
                "map_shrine_chance_%" => Stat::MapShrineChance(Other(v as f32)),
                "map_simulacrum_difficulty_+" => Stat::MapSimulacrumDifficulty(Plus(v as f32)),
                "map_socket_currency_drop_chance_+%_in_grass_biome" => Stat::MapSocketCurrencyDropChanceInGrassBiome(Other(v as f32)),
                "map_strongbox_chance_%" => Stat::MapStrongboxChance(Other(v as f32)),
                "map_strongbox_mod_effect_+%" => Stat::MapStrongboxModEffect(PlusPercentage(v as f32)),
                "map_tier_bonus_permillage" => Stat::MapTierBonusPermillage(Other(v as f32)),
                "map_tower_augment_quantity_+%" => Stat::MapTowerAugmentQuantity(PlusPercentage(v as f32)),
                "map_voodoo_king_difficulty_+" => Stat::MapVoodooKingDifficulty(Plus(v as f32)),
                "maps_boss_drop_additional_bonus_map_chance_%" => Stat::MapsBossDropAdditionalBonusMapChance(Other(v as f32)),
                "maps_with_bosses_additional_essence_+" => Stat::MapsWithBossesAdditionalEssence(Plus(v as f32)),
                "maps_with_bosses_additional_shrine_+" => Stat::MapsWithBossesAdditionalShrine(Plus(v as f32)),
                "maps_with_bosses_additional_strongbox_+" => Stat::MapsWithBossesAdditionalStrongbox(Plus(v as f32)),
                "maps_with_bosses_are_irradiated" => Stat::MapsWithBossesAreIrradiated(Other(v as f32)),
                "mark_effect_+%" => Stat::MarkEffect(PlusPercentage(v as f32)),
                "mark_skill_cast_speed_+%" => Stat::MarkSkillCastSpeed(PlusPercentage(v as f32)),
                "mark_skill_duration_+%" => Stat::MarkSkillDuration(PlusPercentage(v as f32)),
                "mark_skill_mana_cost_+%" => Stat::MarkSkillManaCost(PlusPercentage(v as f32)),
                "marked_enemies_cannot_deal_critical_strikes" => Stat::MarkedEnemiesCannotDealCriticalStrikes(Other(v as f32)),
                "marked_enemy_accuracy_rating_+%" => Stat::MarkedEnemyAccuracyRating(PlusPercentage(v as f32)),
                "marked_enemy_damage_taken_+%" => Stat::MarkedEnemyDamageTaken(PlusPercentage(v as f32)),
                "master_of_elements_evasion_rating_+%_final" => Stat::MasterOfElementsEvasionRatingFinal(Other(v as f32)),
                "mastery_chance_to_evade_melee_attacks_+%_final" => Stat::MasteryChanceToEvadeMeleeAttacksFinal(Other(v as f32)),
                "max_demon_form_stacks" => Stat::MaxDemonFormStacks(Other(v as f32)),
                "max_endurance_charges" => Stat::MaxEnduranceCharges(Other(v as f32)),
                "max_frenzy_charges" => Stat::MaxFrenzyCharges(Other(v as f32)),
                "max_jade_stacks" => Stat::MaxJadeStacks(Other(v as f32)),
                "max_power_charges" => Stat::MaxPowerCharges(Other(v as f32)),
                "maximum_darkness_+%" => Stat::MaximumDarkness(PlusPercentage(v as f32)),
                "maximum_energy_shield_+%" => Stat::MaximumEnergyShield(PlusPercentage(v as f32)),
                "maximum_energy_shield_from_body_armour_+%" => Stat::MaximumEnergyShieldFromBodyArmour(PlusPercentage(v as f32)),
                "maximum_life_+%" => Stat::MaximumLife(PlusPercentage(v as f32)),
                "%_maximum_life_as_focus" => Stat::MaximumLifeAsFocus(Other(v as f32)),
                "maximum_life_mana_and_energy_shield_+%" => Stat::MaximumLifeManaAndEnergyShield(PlusPercentage(v as f32)),
                "maximum_life_%_to_gain_as_maximum_energy_shield" => Stat::MaximumLifeToGainAsMaximumEnergyShield(Other(v as f32)),
                "maximum_mana_+%" => Stat::MaximumMana(PlusPercentage(v as f32)),
                "maximum_mana_%_gained_on_kill" => Stat::MaximumManaGainedOnKill(Other(v as f32)),
                "maximum_rage" => Stat::MaximumRage(Other(v as f32)),
                "maximum_rage_+_while_wielding_axe" => Stat::MaximumRageWhileWieldingAxe(Other(v as f32)),
                "melee_attack_speed_+%" => Stat::MeleeAttackSpeed(PlusPercentage(v as f32)),
                "melee_critical_strike_chance_+%" => Stat::MeleeCriticalStrikeChance(PlusPercentage(v as f32)),
                "melee_critical_strike_chance_+%_when_on_full_life" => Stat::MeleeCriticalStrikeChanceWhenOnFullLife(Other(v as f32)),
                "melee_damage_+%" => Stat::MeleeDamage(PlusPercentage(v as f32)),
                "melee_damage_+%_at_close_range" => Stat::MeleeDamageAtCloseRange(Other(v as f32)),
                "melee_damage_+%_vs_heavy_stunned_enemies" => Stat::MeleeDamageVsHeavyStunnedEnemies(Other(v as f32)),
                "melee_damage_+%_vs_immobilised_enemies" => Stat::MeleeDamageVsImmobilisedEnemies(Other(v as f32)),
                "melee_damage_+%_when_on_full_life" => Stat::MeleeDamageWhenOnFullLife(Other(v as f32)),
                "melee_hit_damage_stun_multiplier_+%" => Stat::MeleeHitDamageStunMultiplier(PlusPercentage(v as f32)),
                "melee_range_+" => Stat::MeleeRange(Plus(v as f32)),
                "minion_accuracy_rating" => Stat::MinionAccuracyRating(Other(v as f32)),
                "minion_additional_physical_damage_reduction_%" => Stat::MinionAdditionalPhysicalDamageReduction(Other(v as f32)),
                "minion_attack_and_cast_speed_+%" => Stat::MinionAttackAndCastSpeed(PlusPercentage(v as f32)),
                "minion_chaos_resistance_%" => Stat::MinionChaosResistance(Other(v as f32)),
                "minion_cold_damage_resistance_%" => Stat::MinionColdDamageResistance(Other(v as f32)),
                "minion_cooldown_recovery_+%" => Stat::MinionCooldownRecovery(PlusPercentage(v as f32)),
                "minion_critical_strike_chance_+%" => Stat::MinionCriticalStrikeChance(PlusPercentage(v as f32)),
                "minion_critical_strike_multiplier_+" => Stat::MinionCriticalStrikeMultiplier(Plus(v as f32)),
                "minion_damage_+%" => Stat::MinionDamage(PlusPercentage(v as f32)),
                "minion_damage_taken_%_recouped_as_their_life" => Stat::MinionDamageTakenRecoupedAsTheirLife(Other(v as f32)),
                "minion_damage_+%_while_you_have_at_least_two_different_active_offerings" => Stat::MinionDamageWhileYouHaveAtLeastTwoDifferentActiveOfferings(Other(v as f32)),
                "minion_elemental_resistance_%" => Stat::MinionElementalResistance(Other(v as f32)),
                "minion_evasion_rating_+%" => Stat::MinionEvasionRating(PlusPercentage(v as f32)),
                "minion_fire_damage_resistance_%" => Stat::MinionFireDamageResistance(Other(v as f32)),
                "minion_life_recovery_rate_+%" => Stat::MinionLifeRecoveryRate(PlusPercentage(v as f32)),
                "minion_life_regeneration_rate_per_minute_%" => Stat::MinionLifeRegenerationRatePerMinute(Other(v as f32)),
                "minion_lightning_damage_resistance_%" => Stat::MinionLightningDamageResistance(Other(v as f32)),
                "minion_maximum_all_elemental_resistances_%" => Stat::MinionMaximumAllElementalResistances(Other(v as f32)),
                "minion_maximum_life_+%" => Stat::MinionMaximumLife(PlusPercentage(v as f32)),
                "minion_maximum_life_%_to_gain_as_maximum_energy_shield" => Stat::MinionMaximumLifeToGainAsMaximumEnergyShield(Other(v as f32)),
                "minion_movement_speed_+%" => Stat::MinionMovementSpeed(PlusPercentage(v as f32)),
                "minion_reservation_+%" => Stat::MinionReservation(PlusPercentage(v as f32)),
                "minion_resummon_speed_+%" => Stat::MinionResummonSpeed(PlusPercentage(v as f32)),
                "minion_skill_area_of_effect_+%" => Stat::MinionSkillAreaOfEffect(PlusPercentage(v as f32)),
                "minions_deal_%_of_physical_damage_as_additional_chaos_damage" => Stat::MinionsDealOfPhysicalDamageAsAdditionalChaosDamage(Other(v as f32)),
                "minions_gain_your_dexterity" => Stat::MinionsGainYourDexterity(Other(v as f32)),
                "minions_get_amulet_stats_instead_of_you" => Stat::MinionsGetAmuletStatsInsteadOfYou(Other(v as f32)),
                "minions_have_%_chance_to_inflict_wither_on_hit" => Stat::MinionsHaveChanceToInflictWitherOnHit(Other(v as f32)),
                "movement_speed_+%_during_flask_effect" => Stat::MovementSpeedDuringFlaskEffect(Other(v as f32)),
                "movement_speed_+%_if_cast_a_mark_spell_recently" => Stat::MovementSpeedIfCastAMarkSpellRecently(Other(v as f32)),
                "movement_speed_+%_if_enemy_killed_recently" => Stat::MovementSpeedIfEnemyKilledRecently(Other(v as f32)),
                "movement_speed_+%_if_pinned_enemy_recently" => Stat::MovementSpeedIfPinnedEnemyRecently(Other(v as f32)),
                "movement_speed_+%_while_dual_wielding" => Stat::MovementSpeedWhileDualWielding(Other(v as f32)),
                "movement_speed_+%_while_using_charm" => Stat::MovementSpeedWhileUsingCharm(Other(v as f32)),
                "movement_speed_+%_while_you_have_energy_shield" => Stat::MovementSpeedWhileYouHaveEnergyShield(Other(v as f32)),
                "non_damaging_ailment_effect_+%" => Stat::NonDamagingAilmentEffect(PlusPercentage(v as f32)),
                "non_damaging_ailment_effect_+%_with_critical_strikes" => Stat::NonDamagingAilmentEffectWithCriticalStrikes(Other(v as f32)),
                "non_skill_base_all_damage_%_to_gain_as_chaos" => Stat::NonSkillBaseAllDamageToGainAsChaos(Other(v as f32)),
                "non_skill_base_all_damage_%_to_gain_as_cold" => Stat::NonSkillBaseAllDamageToGainAsCold(Other(v as f32)),
                "non_skill_base_all_damage_%_to_gain_as_fire" => Stat::NonSkillBaseAllDamageToGainAsFire(Other(v as f32)),
                "non_skill_base_all_damage_%_to_gain_as_lightning" => Stat::NonSkillBaseAllDamageToGainAsLightning(Other(v as f32)),
                "non_skill_base_all_damage_%_to_gain_as_physical" => Stat::NonSkillBaseAllDamageToGainAsPhysical(Other(v as f32)),
                "non_skill_base_lightning_damage_%_to_gain_as_cold" => Stat::NonSkillBaseLightningDamageToGainAsCold(Other(v as f32)),
                "non_skill_base_physical_damage_%_to_gain_as_chaos" => Stat::NonSkillBasePhysicalDamageToGainAsChaos(Other(v as f32)),
                "non_skill_base_physical_damage_%_to_gain_as_fire" => Stat::NonSkillBasePhysicalDamageToGainAsFire(Other(v as f32)),
                "non_skill_cold_damage_%_to_gain_as_fire_vs_frozen_enemies" => Stat::NonSkillColdDamageToGainAsFireVsFrozenEnemies(Other(v as f32)),
                "notable_knockback_distance_+%_final_for_blocked_hits" => Stat::NotableKnockbackDistanceFinalForBlockedHits(Other(v as f32)),
                "num_additional_skill_slots" => Stat::NumAdditionalSkillSlots(Other(v as f32)),
                "num_charm_slots" => Stat::NumCharmSlots(Other(v as f32)),
                "number_of_additional_marks_allowed" => Stat::NumberOfAdditionalMarksAllowed(Other(v as f32)),
                "number_of_additional_poison_stacks" => Stat::NumberOfAdditionalPoisonStacks(Other(v as f32)),
                "number_of_additional_projectiles" => Stat::NumberOfAdditionalProjectiles(Other(v as f32)),
                "number_of_infernal_familiars_allowed" => Stat::NumberOfInfernalFamiliarsAllowed(Other(v as f32)),
                "offering_area_of_effect_+%" => Stat::OfferingAreaOfEffect(PlusPercentage(v as f32)),
                "offering_duration_+%" => Stat::OfferingDuration(PlusPercentage(v as f32)),
                "offering_life_+%" => Stat::OfferingLife(PlusPercentage(v as f32)),
                "one_handed_attack_ailment_chance_+%" => Stat::OneHandedAttackAilmentChance(PlusPercentage(v as f32)),
                "one_handed_attack_speed_+%" => Stat::OneHandedAttackSpeed(PlusPercentage(v as f32)),
                "one_handed_melee_accuracy_rating_+%" => Stat::OneHandedMeleeAccuracyRating(PlusPercentage(v as f32)),
                "one_handed_melee_attack_speed_+%" => Stat::OneHandedMeleeAttackSpeed(PlusPercentage(v as f32)),
                "one_handed_melee_critical_strike_chance_+%" => Stat::OneHandedMeleeCriticalStrikeChance(PlusPercentage(v as f32)),
                "one_handed_melee_critical_strike_multiplier_+" => Stat::OneHandedMeleeCriticalStrikeMultiplier(Plus(v as f32)),
                "passive_tree_mace_damage_+%_final_vs_heavy_stunned_enemies" => Stat::PassiveTreeMaceDamageFinalVsHeavyStunnedEnemies(Other(v as f32)),
                "pathfinder_ascendancy_poison_on_enemies_you_kill_spread_to_enemies_within_x" => Stat::PathfinderAscendancyPoisonOnEnemiesYouKillSpreadToEnemiesWithinX(Other(v as f32)),
                "pathfinder_poison_duration_+%_final" => Stat::PathfinderPoisonDurationFinal(Other(v as f32)),
                "physical_attack_damage_+%" => Stat::PhysicalAttackDamage(PlusPercentage(v as f32)),
                "physical_damage_+%" => Stat::PhysicalDamage(PlusPercentage(v as f32)),
                "physical_damage_from_hits_%_taken_as_random_element" => Stat::PhysicalDamageFromHitsTakenAsRandomElement(Other(v as f32)),
                "physical_damage_prevented_recouped_as_life_%" => Stat::PhysicalDamagePreventedRecoupedAsLife(Other(v as f32)),
                "physical_damage_reduction_rating_+%" => Stat::PhysicalDamageReductionRating(PlusPercentage(v as f32)),
                "physical_damage_taken_recouped_as_life_%" => Stat::PhysicalDamageTakenRecoupedAsLife(Other(v as f32)),
                "physical_hit_and_dot_damage_%_taken_as_chaos" => Stat::PhysicalHitAndDotDamageTakenAsChaos(Other(v as f32)),
                "placing_traps_cooldown_recovery_+%" => Stat::PlacingTrapsCooldownRecovery(PlusPercentage(v as f32)),
                "poison_duration_+%_per_poison_applied_recently" => Stat::PoisonDurationPerPoisonAppliedRecently(Other(v as f32)),
                "poison_effect_+%_vs_non_poisoned_enemies" => Stat::PoisonEffectVsNonPoisonedEnemies(Other(v as f32)),
                "power_charge_duration_+%" => Stat::PowerChargeDuration(PlusPercentage(v as f32)),
                "projectile_ailment_chance_+%" => Stat::ProjectileAilmentChance(PlusPercentage(v as f32)),
                "projectile_damage_+%" => Stat::ProjectileDamage(PlusPercentage(v as f32)),
                "projectile_hit_damage_stun_multiplier_+%" => Stat::ProjectileHitDamageStunMultiplier(PlusPercentage(v as f32)),
                "quarterstaff_accuracy_rating_+%" => Stat::QuarterstaffAccuracyRating(PlusPercentage(v as f32)),
                "quarterstaff_attack_speed_+%" => Stat::QuarterstaffAttackSpeed(PlusPercentage(v as f32)),
                "quarterstaff_critical_strike_chance_+%" => Stat::QuarterstaffCriticalStrikeChance(PlusPercentage(v as f32)),
                "quarterstaff_critical_strike_multiplier_+" => Stat::QuarterstaffCriticalStrikeMultiplier(Plus(v as f32)),
                "quarterstaff_damage_+%" => Stat::QuarterstaffDamage(PlusPercentage(v as f32)),
                "quarterstaff_daze_build_up_+%" => Stat::QuarterstaffDazeBuildUp(PlusPercentage(v as f32)),
                "quarterstaff_hit_damage_freeze_multiplier_+%" => Stat::QuarterstaffHitDamageFreezeMultiplier(PlusPercentage(v as f32)),
                "quarterstaff_hit_damage_stun_multiplier_+%" => Stat::QuarterstaffHitDamageStunMultiplier(PlusPercentage(v as f32)),
                "quarterstaff_skills_that_consume_power_charges_count_as_consuming_x_additional_power_charges" => Stat::QuarterstaffSkillsThatConsumePowerChargesCountAsConsumingXAdditionalPowerCharges(Other(v as f32)),
                "quiver_mod_effect_+%" => Stat::QuiverModEffect(PlusPercentage(v as f32)),
                "rage_decay_speed_+%" => Stat::RageDecaySpeed(PlusPercentage(v as f32)),
                "rage_loss_delay_ms" => Stat::RageLossDelayMs(Other(v as f32)),
                "reapply_enemy_shock_on_consuming_enemy_shock_chance_%" => Stat::ReapplyEnemyShockOnConsumingEnemyShockChance(Other(v as f32)),
                "recoup_%_elemental_damage_as_energy_shield" => Stat::RecoupElementalDamageAsEnergyShield(Other(v as f32)),
                "recoup_speed_+%" => Stat::RecoupSpeed(PlusPercentage(v as f32)),
                "recover_%_life_on_heavy_stunning_rare_or_unique_enemy" => Stat::RecoverLifeOnHeavyStunningRareOrUniqueEnemy(Other(v as f32)),
                "recover_%_life_per_endurance_charge_consumed" => Stat::RecoverLifePerEnduranceChargeConsumed(Other(v as f32)),
                "recover_%_life_when_you_create_an_offering" => Stat::RecoverLifeWhenYouCreateAnOffering(Other(v as f32)),
                "recover_%_life_when_you_use_a_life_flask_while_on_low_life" => Stat::RecoverLifeWhenYouUseALifeFlaskWhileOnLowLife(Other(v as f32)),
                "recover_%_mana_when_you_invoke_a_spell" => Stat::RecoverManaWhenYouInvokeASpell(Other(v as f32)),
                "recover_maximum_life_on_enemy_killed_chance_%" => Stat::RecoverMaximumLifeOnEnemyKilledChance(Other(v as f32)),
                "recover_%_maximum_life_on_kill" => Stat::RecoverMaximumLifeOnKill(Other(v as f32)),
                "recover_%_maximum_life_on_killing_poisoned_enemy" => Stat::RecoverMaximumLifeOnKillingPoisonedEnemy(Other(v as f32)),
                "recover_%_maximum_life_on_mana_flask_use" => Stat::RecoverMaximumLifeOnManaFlaskUse(Other(v as f32)),
                "recover_%_maximum_mana_on_charm_use" => Stat::RecoverMaximumManaOnCharmUse(Other(v as f32)),
                "recover_%_maximum_mana_on_kill" => Stat::RecoverMaximumManaOnKill(Other(v as f32)),
                "recover_X_life_on_block" => Stat::RecoverXLifeOnBlock(Other(v as f32)),
                "reduce_enemy_elemental_resistance_%" => Stat::ReduceEnemyElementalResistance(Other(v as f32)),
                "refresh_ignite_duration_on_critical_strike_chance_%" => Stat::RefreshIgniteDurationOnCriticalStrikeChance(Other(v as f32)),
                "reload_speed_+%" => Stat::ReloadSpeed(PlusPercentage(v as f32)),
                "remove_curse_on_mana_flask_use" => Stat::RemoveCurseOnManaFlaskUse(Other(v as f32)),
                "resolute_technique" => Stat::ResoluteTechnique(Other(v as f32)),
                "restore_life_and_mana_on_warcry_%" => Stat::RestoreLifeAndManaOnWarcry(Other(v as f32)),
                "shield_armour_+%" => Stat::ShieldArmour(PlusPercentage(v as f32)),
                "shield_evasion_rating_+%" => Stat::ShieldEvasionRating(PlusPercentage(v as f32)),
                "shock_chance_+%" => Stat::ShockChance(PlusPercentage(v as f32)),
                "shock_chance_+%_vs_electrocuted_enemies" => Stat::ShockChanceVsElectrocutedEnemies(Other(v as f32)),
                "shock_duration_+%" => Stat::ShockDuration(PlusPercentage(v as f32)),
                "shock_effect_+%" => Stat::ShockEffect(PlusPercentage(v as f32)),
                "shock_effect_+%_with_critical_strikes" => Stat::ShockEffectWithCriticalStrikes(Other(v as f32)),
                "skill_area_of_effect_+%_if_enemy_killed_recently" => Stat::SkillAreaOfEffectIfEnemyKilledRecently(Other(v as f32)),
                "skill_area_of_effect_when_unarmed_+%" => Stat::SkillAreaOfEffectWhenUnarmed(PlusPercentage(v as f32)),
                "skill_cost_base_life_equal_to_base_mana" => Stat::SkillCostBaseLifeEqualToBaseMana(Other(v as f32)),
                "skill_effect_duration_+%" => Stat::SkillEffectDuration(PlusPercentage(v as f32)),
                "skill_speed_+%" => Stat::SkillSpeed(PlusPercentage(v as f32)),
                "slam_aftershock_chance_%" => Stat::SlamAftershockChance(Other(v as f32)),
                "slam_skill_area_of_effect_+%" => Stat::SlamSkillAreaOfEffect(PlusPercentage(v as f32)),
                "slows_have_no_potency_on_you" => Stat::SlowsHaveNoPotencyOnYou(Other(v as f32)),
                "small_passives_effect_+%" => Stat::SmallPassivesEffect(PlusPercentage(v as f32)),
                "sorcery_ward_+%_strength" => Stat::SorceryWardStrength(Other(v as f32)),
                "spawn_defender_with_totem" => Stat::SpawnDefenderWithTotem(Other(v as f32)),
                "spear_attack_speed_+%" => Stat::SpearAttackSpeed(PlusPercentage(v as f32)),
                "spear_critical_strike_chance_+%" => Stat::SpearCriticalStrikeChance(PlusPercentage(v as f32)),
                "spear_damage_+%" => Stat::SpearDamage(PlusPercentage(v as f32)),
                "spell_area_damage_+%" => Stat::SpellAreaDamage(PlusPercentage(v as f32)),
                "spell_area_of_effect_+%" => Stat::SpellAreaOfEffect(PlusPercentage(v as f32)),
                "spell_critical_strike_chance_+%" => Stat::SpellCriticalStrikeChance(PlusPercentage(v as f32)),
                "spell_critical_strike_chance_+%_while_wielding_staff" => Stat::SpellCriticalStrikeChanceWhileWieldingStaff(Other(v as f32)),
                "spell_critical_strike_multiplier_+_while_wielding_staff" => Stat::SpellCriticalStrikeMultiplierWhileWieldingStaff(Other(v as f32)),
                "spell_damage_+%" => Stat::SpellDamage(PlusPercentage(v as f32)),
                "spell_damage_+%_if_have_crit_recently" => Stat::SpellDamageIfHaveCritRecently(Other(v as f32)),
                "spell_damage_+%_while_es_full" => Stat::SpellDamageWhileEsFull(Other(v as f32)),
                "spell_damage_+%_while_wielding_melee_weapon" => Stat::SpellDamageWhileWieldingMeleeWeapon(Other(v as f32)),
                "spell_skill_gem_level_+" => Stat::SpellSkillGemLevel(Plus(v as f32)),
                "spell_skill_projectile_speed_+%" => Stat::SpellSkillProjectileSpeed(PlusPercentage(v as f32)),
                "spell_staff_damage_+%" => Stat::SpellStaffDamage(PlusPercentage(v as f32)),
                "spirit_+%" => Stat::Spirit(PlusPercentage(v as f32)),
                "staff_attack_area_of_effect_+%" => Stat::StaffAttackAreaOfEffect(PlusPercentage(v as f32)),
                "stormweaver_chill_effect_+%_final" => Stat::StormweaverChillEffectFinal(Other(v as f32)),
                "stormweaver_shock_duration_+%_final" => Stat::StormweaverShockDurationFinal(Other(v as f32)),
                "strength_+%" => Stat::Strength(PlusPercentage(v as f32)),
                "stun_threshold_+%" => Stat::StunThreshold(PlusPercentage(v as f32)),
                "stun_threshold_based_on_%_energy_shield_instead_of_life" => Stat::StunThresholdBasedOnEnergyShieldInsteadOfLife(Other(v as f32)),
                "stun_threshold_+%_during_empowered_attacks" => Stat::StunThresholdDuringEmpoweredAttacks(Other(v as f32)),
                "stun_threshold_+_from_%_base_armour_from_equipment" => Stat::StunThresholdFromBaseArmourFromEquipment(Other(v as f32)),
                "stun_threshold_+_from_lowest_of_base_helmet_evasion_rating_and_armour" => Stat::StunThresholdFromLowestOfBaseHelmetEvasionRatingAndArmour(Other(v as f32)),
                "stun_threshold_+_from_%_maximum_energy_shield" => Stat::StunThresholdFromMaximumEnergyShield(Other(v as f32)),
                "stun_threshold_+%_per_number_of_times_stunned_recently" => Stat::StunThresholdPerNumberOfTimesStunnedRecently(Other(v as f32)),
                "stun_threshold_+%_per_rage" => Stat::StunThresholdPerRage(Other(v as f32)),
                "stun_threshold_+_per_strength" => Stat::StunThresholdPerStrength(Other(v as f32)),
                "stun_threshold_+%_when_not_stunned_recently" => Stat::StunThresholdWhenNotStunnedRecently(Other(v as f32)),
                "stun_threshold_+%_when_on_full_life" => Stat::StunThresholdWhenOnFullLife(Other(v as f32)),
                "summon_totem_cast_speed_+%" => Stat::SummonTotemCastSpeed(PlusPercentage(v as f32)),
                "support_anticipation_charge_gain_frequency_+%" => Stat::SupportAnticipationChargeGainFrequency(PlusPercentage(v as f32)),
                "support_gem_limit_+" => Stat::SupportGemLimit(Plus(v as f32)),
                "sword_attack_speed_+%" => Stat::SwordAttackSpeed(PlusPercentage(v as f32)),
                "sword_damage_+%" => Stat::SwordDamage(PlusPercentage(v as f32)),
                "tablet_effect_+%_when_opening_a_map" => Stat::TabletEffectWhenOpeningAMap(Other(v as f32)),
                "thorns_damage_+%" => Stat::ThornsDamage(PlusPercentage(v as f32)),
                "thorns_damage_+%_if_blocked_recently" => Stat::ThornsDamageIfBlockedRecently(Other(v as f32)),
                "titan_damage_+%_final_against_heavy_stunned_enemies" => Stat::TitanDamageFinalAgainstHeavyStunnedEnemies(Other(v as f32)),
                "titan_expanded_main_inventory" => Stat::TitanExpandedMainInventory(Other(v as f32)),
                "titan_maximum_life_+%_final" => Stat::TitanMaximumLifeFinal(Other(v as f32)),
                "totem_additional_physical_damage_reduction_%" => Stat::TotemAdditionalPhysicalDamageReduction(Other(v as f32)),
                "totem_damage_+%" => Stat::TotemDamage(PlusPercentage(v as f32)),
                "totem_duration_+%" => Stat::TotemDuration(PlusPercentage(v as f32)),
                "totem_elemental_resistance_%" => Stat::TotemElementalResistance(Other(v as f32)),
                "totem_life_+%" => Stat::TotemLife(PlusPercentage(v as f32)),
                "totem_placement_range_+%" => Stat::TotemPlacementRange(PlusPercentage(v as f32)),
                "totem_skill_attack_speed_+%" => Stat::TotemSkillAttackSpeed(PlusPercentage(v as f32)),
                "totem_skill_cast_speed_+%" => Stat::TotemSkillCastSpeed(PlusPercentage(v as f32)),
                "totems_attack_speed_+%_per_active_totem" => Stat::TotemsAttackSpeedPerActiveTotem(Other(v as f32)),
                "totems_regenerate_%_life_per_minute" => Stat::TotemsRegenerateLifePerMinute(Other(v as f32)),
                "totems_spells_cast_speed_+%_per_active_totem" => Stat::TotemsSpellsCastSpeedPerActiveTotem(Other(v as f32)),
                "trap_critical_strike_chance_+%" => Stat::TrapCriticalStrikeChance(PlusPercentage(v as f32)),
                "trap_damage_+%" => Stat::TrapDamage(PlusPercentage(v as f32)),
                "trap_throwing_speed_+%" => Stat::TrapThrowingSpeed(PlusPercentage(v as f32)),
                "trigger_elemental_storm_on_crit" => Stat::TriggerElementalStormOnCrit(Other(v as f32)),
                "trigger_skills_refund_half_energy_spent_chance_%" => Stat::TriggerSkillsRefundHalfEnergySpentChance(Other(v as f32)),
                "trigger_wild_strike_on_attack_crit" => Stat::TriggerWildStrikeOnAttackCrit(Other(v as f32)),
                "triggered_spell_spell_damage_+%" => Stat::TriggeredSpellSpellDamage(PlusPercentage(v as f32)),
                "two_handed_melee_accuracy_rating_+%" => Stat::TwoHandedMeleeAccuracyRating(PlusPercentage(v as f32)),
                "unaffected_by_chill_during_dodge_roll" => Stat::UnaffectedByChillDuringDodgeRoll(Other(v as f32)),
                "unaffected_by_chill_while_mana_leeching" => Stat::UnaffectedByChillWhileManaLeeching(Other(v as f32)),
                "unarmed_attack_skill_melee_dash_range_+%" => Stat::UnarmedAttackSkillMeleeDashRange(PlusPercentage(v as f32)),
                "unarmed_attack_speed_+%" => Stat::UnarmedAttackSpeed(PlusPercentage(v as f32)),
                "warbringer_overbreak_armour" => Stat::WarbringerOverbreakArmour(Other(v as f32)),
                "warcries_bypass_cooldown" => Stat::WarcriesBypassCooldown(Other(v as f32)),
                "warcry_cooldown_speed_+%" => Stat::WarcryCooldownSpeed(PlusPercentage(v as f32)),
                "warcry_damage_+%" => Stat::WarcryDamage(PlusPercentage(v as f32)),
                "warcry_empowers_next_x_melee_attacks" => Stat::WarcryEmpowersNextXMeleeAttacks(Other(v as f32)),
                "warcry_skill_area_of_effect_+%" => Stat::WarcrySkillAreaOfEffect(PlusPercentage(v as f32)),
                "warcry_speed_+%" => Stat::WarcrySpeed(PlusPercentage(v as f32)),
                "weapon_swap_speed_+%" => Stat::WeaponSwapSpeed(PlusPercentage(v as f32)),
                "while_using_sword_reduce_enemy_block_%" => Stat::WhileUsingSwordReduceEnemyBlock(Other(v as f32)),
                "witch_passive_maximum_lightning_damage_+%_final" => Stat::WitchPassiveMaximumLightningDamageFinal(Other(v as f32)),
                "witchhunter_armour_evasion_+%_final" => Stat::WitchhunterArmourEvasionFinal(Other(v as f32)),
                "witchhunter_up_to_damage_+%_final_against_targets_with_missing_focus" => Stat::WitchhunterUpToDamageFinalAgainstTargetsWithMissingFocus(Other(v as f32)),
                "withered_effect_+%" => Stat::WitheredEffect(PlusPercentage(v as f32)),
                "world_map_unique_maps_visible_X_units_beyond_light_radius" => Stat::WorldMapUniqueMapsVisibleXUnitsBeyondLightRadius(Other(v as f32)),
                "x%_faster_start_of_sorcery_ward_recovery" => Stat::XFasterStartOfSorceryWardRecovery(Other(v as f32)),
                "you_and_allies_in_presence_all_damage_can_ignite_while_not_on_low_infernal_flame" => Stat::YouAndAlliesInPresenceAllDamageCanIgniteWhileNotOnLowInfernalFlame(Other(v as f32)),
                "you_and_allies_in_presence_non_skill_base_all_damage_%_to_gain_as_fire_while_on_high_infernal_flame" => Stat::YouAndAlliesInPresenceNonSkillBaseAllDamageToGainAsFireWhileOnHighInfernalFlame(Other(v as f32)),
                "you_gain_%_life_when_one_of_your_minions_is_revived" => Stat::YouGainLifeWhenOneOfYourMinionsIsRevived(Other(v as f32)),
                _ => Stat::Unknown(k, v as f32),
            });
        }
        Err(Error::custom("Expected at least one stat"))
    }
}
